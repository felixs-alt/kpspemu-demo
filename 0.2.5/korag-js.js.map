{"version":3,"file":"korag-js.js","sources":["../../../../../common/src/main/kotlin/com/soywiz/korag/AG.kt","util/Lazy.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Size.kt","core/numbers.kt","util/Standard.kt","collections/Maps.kt","collections/Collections.kt","collections/MutableCollections.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/DefaultShaders.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/Korag.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/geom/Matrix2D.kt","core/math.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/geom/Matrix3.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/geom/Matrix4.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/geom/Point2D.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/log/LogAG.kt","core/generated/_CollectionsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/shader/gl/GlslExt.kt","collections/Sets.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/shader/gl/GlslGenerator.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/shader/shaders.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/software/AGSoftware.kt","../../../../src/main/kotlin/com/soywiz/korag/AGWebgl.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/Once.kt","../../../../../../../../../../../dummy.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/KoragVersion.kt"],"sourcesContent":[null,"@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes access among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize the access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should be used only when high performance is crucial and the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\nprivate class SynchronizedLazyImpl<out T>(initializer: () -> T, lock: Any? = null) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    @Volatile private var _value: Any? = UNINITIALIZED_VALUE\n    // final field is required to enable safe publication of constructed instance\n    private val lock = lock ?: this\n\n    override val value: T\n        get() {\n            val _v1 = _value\n            if (_v1 !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return _v1 as T\n            }\n\n            return synchronized(lock) {\n                val _v2 = _value\n                if (_v2 !== UNINITIALIZED_VALUE) {\n                    @Suppress(\"UNCHECKED_CAST\") (_v2 as T)\n                }\n                else {\n                    val typedValue = initializer!!()\n                    _value = typedValue\n                    initializer = null\n                    typedValue\n                }\n            }\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",null,"package kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n","/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/** Returns a new read-only list of given elements.  The returned list is serializable (JVM). */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/** Returns an empty new [MutableList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/** Returns an empty new [ArrayList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/** Returns a new [MutableList] with the given elements. */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new [ArrayList] with the given elements. */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new read-only list either of single given element, if it is not null, or empty list it the element is null. The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/** Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/** Returns `true` if the collection is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/** Returns this Collection if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/** Returns this List if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with (iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n",null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Long, b: Long): Long = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Long, b: Long): Long = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n",null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n@Deprecated(\"Use zipWithNext instead\", ReplaceWith(\"zipWithNext()\"))\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.pairwise(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n@Deprecated(\"Use zipWithNext instead\", ReplaceWith(\"zipWithNext(transform)\"))\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.pairwise(transform: (a: T, b: T) -> R): List<R> {\n    return zipWithNext(transform)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/** Returns an empty read-only set.  The returned set is serializable (JVM). */\npublic fun <T> emptySet(): Set<T> = EmptySet\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/** Returns an empty read-only set.  The returned set is serializable (JVM). */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,null,null,null,null,null,null],"names":[],"mappings":"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"}