{"version":3,"file":"korma-js.js","sources":["../../../../../common/src/main/kotlin/com/soywiz/korma/Korma.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/Matrix2d.kt","core/math.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/Vector2.kt","core/Comparator.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/Vector3.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/algo/AStar.kt","arrayUtils.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/ds/Array2.kt","collections/Collections.kt","collections/MutableCollections.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/buffer/ArrayExt.kt","util/Standard.kt","text/Strings.kt","core/string.kt","core/generated/_CollectionsJs.kt","core/generated/_ArraysJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/ds/DoubleArrayList.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/ds/IntArrayList.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/ds/PriorityQueue.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Anchor.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Angle.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/BoundsBuilder.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Orientation.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Point2d.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/PointInt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Rectangle.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/RectangleInt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/RectangleExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/ScaleMode.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Size.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/SizeInt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Vector2Ext.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/VectorPath.kt","../../../../../../../../../../../dummy.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/bezier/Bezier.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/bezier/BezierExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/bezier/SegmentEmitter.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/binpack/BinPackExt.kt","collections/Maps.kt","comparisons/Comparisons.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/binpack/BinPacker.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/binpack/MaxRects.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/clipper/Clipper.kt","core/collections.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/shape/FunnelExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/shape/HorizontalLine.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/shape/Shape2d.kt","util/Lazy.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/shape/Shape2dExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/triangle/Triangle.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/triangle/funnel.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/triangle/poly2tri.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/interpolation/Interpolate.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/interpolation/InterpolationExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/math/Math.kt","core/numbers.kt","core/generated/_ComparisonsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/numeric/NextAligned.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/numeric/NumberExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/numeric/PowerOfTwo.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/numeric/fft/FFT.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/random/MtRand.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/random/RandExt.kt","../../../../src/main/kotlin/com/soywiz/korma/random/BaseRand.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/KormaVersion.kt"],"sourcesContent":[null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Long, b: Long): Long = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Long, b: Long): Long = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n",null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n\npublic interface Comparator<T> {\n    @JsName(\"compare\") fun compare(a: T, b: T): Int\n}\n\npublic inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/** Returns a new read-only list of given elements.  The returned list is serializable (JVM). */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/** Returns an empty new [MutableList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/** Returns an empty new [ArrayList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/** Returns a new [MutableList] with the given elements. */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new [ArrayList] with the given elements. */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new read-only list either of single given element, if it is not null, or empty list it the element is null. The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/** Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/** Returns `true` if the collection is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/** Returns this Collection if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/** Returns this List if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with (iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\n\npackage kotlin.text\n\nimport kotlin.comparisons.*\nimport kotlin.internal.contracts.*\n\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        }\n        else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string with leading and trailing characters matching the [predicate] trimmed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string with leading characters matching the [predicate] trimmed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string with trailing characters matching the [predicate] trimmed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string with leading and trailing characters from the [chars] array trimmed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string with leading and trailing characters from the [chars] array trimmed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string with trailing characters from the [chars] array trimmed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace trimmed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string with leading and trailing whitespace trimmed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string with leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string with trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence\n        = replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String\n        = (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String\n        = (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String = regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length)\n            || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0..length-1) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\nprivate fun CharSequence.findAnyOf(chars: CharArray, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, Char>? {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        val index = if (!last) nativeIndexOf(char, startIndex) else nativeLastIndexOf(char, startIndex)\n        return if (index < 0) null else index to char\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..lastIndex else startIndex.coerceAtMost(lastIndex) downTo 0\n    for (index in indices) {\n        val charAtIndex = get(index)\n        val matchingCharIndex = chars.indexOfFirst { it.equals(charAtIndex, ignoreCase) }\n        if (matchingCharIndex >= 0)\n            return index to chars[matchingCharIndex]\n    }\n\n    return null\n}\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n        indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(private val input: CharSequence, private val startIndex: Int, private val limit: Int, private val getNextMatch: CharSequence.(Int) -> Pair<Int, Int>?): Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            }\n            else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                }\n                else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    }\n                    else {\n                        val (index,length) = match\n                        nextItem = currentStartIndex..index-1\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimiters, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to 1 } })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimitersList, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.WARNING) // TODO: ERROR in 1.2\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n@Deprecated(\"Use zipWithNext instead\", ReplaceWith(\"zipWithNext()\"))\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.pairwise(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n@Deprecated(\"Use zipWithNext instead\", ReplaceWith(\"zipWithNext(transform)\"))\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.pairwise(transform: (a: T, b: T) -> R): List<R> {\n    return zipWithNext(transform)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ByteArray.copyOf(newSize: Int): ByteArray {\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ShortArray.copyOf(newSize: Int): ShortArray {\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun IntArray.copyOf(newSize: Int): IntArray {\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun LongArray.copyOf(newSize: Int): LongArray {\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun FloatArray.copyOf(newSize: Int): FloatArray {\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun CharArray.copyOf(newSize: Int): CharArray {\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic fun <T: Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun CharArray.toTypedArray(): Array<Char> {\n    return Array<Char>(size, { i -> this[i] })\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n","/*\n * Copyright 2010-2014 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T)->Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n        }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n        }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n        }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n        }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenComparator.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparison(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@then.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n        Comparator<T> { a, b ->\n            val previousCompare = this@thenDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n        }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n */\npublic fun <T: Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> -1\n                b == null -> 1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n */\npublic fun <T: Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> 1\n                b == null -> -1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n */\npublic fun <T: Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n */\npublic fun <T: Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/** Returns a comparator that imposes the reverse ordering of this comparator. */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>): Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator: Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n",null,null,null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.math.floor\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n@library(\"arrayToString\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun arrayToString(array: Array<*>): String = definedExternally\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.shuffle(): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = rand(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\nprivate fun rand(upperBound: Int) = floor(kotlin.js.Math.random() * upperBound).toInt()\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n */\npublic fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n\n    array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n",null,null,null,"@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes access among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize the access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should be used only when high performance is crucial and the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\nprivate class SynchronizedLazyImpl<out T>(initializer: () -> T, lock: Any? = null) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    @Volatile private var _value: Any? = UNINITIALIZED_VALUE\n    // final field is required to enable safe publication of constructed instance\n    private val lock = lock ?: this\n\n    override val value: T\n        get() {\n            val _v1 = _value\n            if (_v1 !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return _v1 as T\n            }\n\n            return synchronized(lock) {\n                val _v2 = _value\n                if (_v2 !== UNINITIALIZED_VALUE) {\n                    @Suppress(\"UNCHECKED_CAST\") (_v2 as T)\n                }\n                else {\n                    val typedValue = initializer!!()\n                    _value = typedValue\n                    initializer = null\n                    typedValue\n                }\n            }\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",null,null,null,null,null,null,null,"package kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long): Long {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long): Long {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n",null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}