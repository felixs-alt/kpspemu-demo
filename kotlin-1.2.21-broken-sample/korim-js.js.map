{"version":3,"file":"korim-js.js","sources":["../../../../../common/src/main/kotlin/com/soywiz/korim/Korim.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Size.kt","util/Standard.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap1.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap16.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap2.kt","core/generated/_ComparisonsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap32.kt","../../../../src/main/kotlin/com/soywiz/kmem/KmemGenJs.kt","../../../../../common/src/main/kotlin/com/soywiz/kmem/KmemGen.kt","core/math.kt","core/generated/_CollectionsJs.kt","core/generated/_ArraysJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap4.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap8.kt","../../../../../common/src/main/kotlin/com/soywiz/kmem/UByteArray.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/BitmapChannel.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/BitmapExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/BitmapIndexed.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/BitmapSlice.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/NativeImage.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/vector/Context2d.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/PSNR.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ARGB.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/BGRA.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ColorFormat.kt","../../../../../../../../../../dummy.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ColorFormat16.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ColorFormat24.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ColorFormat32.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/ColorTransform.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/Colors.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/NamedColors.kt","core/string.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/PaletteColorFormat.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/RGB.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/RGBA.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/RGBA_16.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/RGBAd.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/RGBAf.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/YCbCr.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/color/YUVA.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/font/Bitmap32Ext.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/font/BitmapFont.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/font/BitmapFontGenerator.kt","collections/Collections.kt","collections/MutableCollections.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/font/ttf/TtfFont.kt","collections/Maps.kt","../../../../../common/src/main/kotlin/com/soywiz/klock/Time.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/BMP.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/DDS.kt","../../../../../common/src/main/kotlin/com/soywiz/kds/Extra.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/DXT.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ICO.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageData.kt","comparisons/Comparisons.kt","core/Comparator.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageDecodingProps.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageEncodingProps.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageFormat.kt","text/Strings.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/error/error.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/stream/SyncStream.kt","collections/Sets.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageFormats.kt","util/Lazy.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageFrame.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/ImageInfo.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/JPEG.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/JPEGDecoder.kt","arrayUtils.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/JPEGEncoder.kt","core/kotlin.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/KorioExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/NativeImageFormatProviderExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/PNG.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/PSD.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/SVG.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/StandardImageFormats.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/format/TGA.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/geom/RectangleExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/vector/Bitmap32Context2d.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/RedirectField.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/vector/GraphicsPath.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/vector/Shape.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/VectorPath.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/vector/format/SVG.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/StrReader.kt","../../../../../common/src/main/kotlin/com/soywiz/klogger/Logger.kt","../../../../src/main/kotlin/com/soywiz/korim/NativeImageSpecialReader.kt","../../../../src/main/kotlin/com/soywiz/korim/format/HtmlCanvas.kt","../../../../src/main/kotlin/com/soywiz/korim/format/HtmlImage.kt","generated/org.khronos.webgl.kt","../../../../src/main/kotlin/com/soywiz/korim/format/HtmlImageSpecialReader.kt","../../../../src/main/kotlin/com/soywiz/korim/format/NativeImageFormatProvider.kt","generated/org.w3c.files.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/coroutine/coroutine.kt","coroutines/experimental/CoroutinesLibrary.kt","generated/org.w3c.dom.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/KorimVersion.kt"],"sourcesContent":[null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n",null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long): Long {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long): Long {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n",null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Long, b: Long): Long = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Long, b: Long): Long = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ByteArray.copyOf(newSize: Int): ByteArray {\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ShortArray.copyOf(newSize: Int): ShortArray {\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun IntArray.copyOf(newSize: Int): IntArray {\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun LongArray.copyOf(newSize: Int): LongArray {\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun FloatArray.copyOf(newSize: Int): FloatArray {\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun CharArray.copyOf(newSize: Int): CharArray {\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic fun <T: Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun CharArray.toTypedArray(): Array<Char> {\n    return Array<Char>(size, { i -> this[i] })\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n",null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with (iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2014 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T)->Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n        }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n        }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n        }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n        }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenComparator.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparison(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@then.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n        Comparator<T> { a, b ->\n            val previousCompare = this@thenDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n        }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> -1\n                b == null -> 1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> 1\n                b == null -> -1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T: Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>): Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator: Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n\npublic interface Comparator<T> {\n    @JsName(\"compare\") fun compare(a: T, b: T): Int\n}\n\npublic inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,null,null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\n\npackage kotlin.text\n\nimport kotlin.comparisons.*\nimport kotlin.internal.contracts.*\n\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        }\n        else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence\n        = replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String\n        = (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String\n        = (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String = regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length)\n            || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0..length-1) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\nprivate fun CharSequence.findAnyOf(chars: CharArray, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, Char>? {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        val index = if (!last) nativeIndexOf(char, startIndex) else nativeLastIndexOf(char, startIndex)\n        return if (index < 0) null else index to char\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..lastIndex else startIndex.coerceAtMost(lastIndex) downTo 0\n    for (index in indices) {\n        val charAtIndex = get(index)\n        val matchingCharIndex = chars.indexOfFirst { it.equals(charAtIndex, ignoreCase) }\n        if (matchingCharIndex >= 0)\n            return index to chars[matchingCharIndex]\n    }\n\n    return null\n}\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n        indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(private val input: CharSequence, private val startIndex: Int, private val limit: Int, private val getNextMatch: CharSequence.(Int) -> Pair<Int, Int>?): Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            }\n            else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                }\n                else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    }\n                    else {\n                        val (index,length) = match\n                        nextItem = currentStartIndex..index-1\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimiters, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to 1 } })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimitersList, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,"@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",null,null,null,null,null,null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n\n    return o\n}\n\npublic external abstract class WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation {\n}\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int): Unit\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String): Unit\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?): Unit\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?): Unit\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun bindTexture(target: Int, texture: WebGLTexture?): Unit\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun blendEquation(mode: Int): Unit\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit\n    fun blendFunc(sfactor: Int, dfactor: Int): Unit\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit\n    fun bufferData(target: Int, size: Int, usage: Int): Unit\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int): Unit\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?): Unit\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int): Unit\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun clearDepth(depth: Float): Unit\n    fun clearStencil(s: Int): Unit\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit\n    fun compileShader(shader: WebGLShader?): Unit\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int): Unit\n    fun deleteBuffer(buffer: WebGLBuffer?): Unit\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?): Unit\n    fun deleteProgram(program: WebGLProgram?): Unit\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?): Unit\n    fun deleteShader(shader: WebGLShader?): Unit\n    fun deleteTexture(texture: WebGLTexture?): Unit\n    fun depthFunc(func: Int): Unit\n    fun depthMask(flag: Boolean): Unit\n    fun depthRange(zNear: Float, zFar: Float): Unit\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun disable(cap: Int): Unit\n    fun disableVertexAttribArray(index: Int): Unit\n    fun drawArrays(mode: Int, first: Int, count: Int): Unit\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int): Unit\n    fun enable(cap: Int): Unit\n    fun enableVertexAttribArray(index: Int): Unit\n    fun finish(): Unit\n    fun flush(): Unit\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int): Unit\n    fun frontFace(mode: Int): Unit\n    fun generateMipmap(target: Int): Unit\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int): Unit\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float): Unit\n    fun linkProgram(program: WebGLProgram?): Unit\n    fun pixelStorei(pname: Int, param: Int): Unit\n    fun polygonOffset(factor: Float, units: Float): Unit\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit\n    fun sampleCoverage(value: Float, invert: Boolean): Unit\n    fun scissor(x: Int, y: Int, width: Int, height: Int): Unit\n    fun shaderSource(shader: WebGLShader?, source: String): Unit\n    fun stencilFunc(func: Int, ref: Int, mask: Int): Unit\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit\n    fun stencilMask(mask: Int): Unit\n    fun stencilMaskSeparate(face: Int, mask: Int): Unit\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun texParameterf(target: Int, pname: Int, param: Float): Unit\n    fun texParameteri(target: Int, pname: Int, param: Int): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun uniform1f(location: WebGLUniformLocation?, x: Float): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform1i(location: WebGLUniformLocation?, x: Int): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun useProgram(program: WebGLProgram?): Unit\n    fun validateProgram(program: WebGLProgram?): Unit\n    fun vertexAttrib1f(index: Int, x: Float): Unit\n    fun vertexAttrib1fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit\n    fun vertexAttrib2fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit\n    fun vertexAttrib3fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit\n    fun vertexAttrib4fv(index: Int, values: dynamic): Unit\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int): Unit\n    fun viewport(x: Int, y: Int, width: Int, height: Int): Unit\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Float>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float32Array.set(index: Int, value: Float): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Double>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float64Array.set(index: Int, value: Double): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte): Unit\n    fun setUint8(byteOffset: Int, value: Byte): Unit\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally): Unit\n}\n\npublic external @marker interface BufferDataSource {\n}\n\npublic external @marker interface TexImageSource {\n}\n\n",null,null,"/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.dom.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) {\n    open val size: Int\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close(): Unit\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = null, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override val length: Int\n    override fun item(index: Int): File?\n}\n@kotlin.internal.InlineOnly inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((Event) -> dynamic)?\n    var onprogress: ((Event) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob): Unit\n    fun readAsBinaryString(blob: Blob): Unit\n    fun readAsText(blob: Blob, label: String = definedExternally): Unit\n    fun readAsDataURL(blob: Blob): Unit\n    fun abort(): Unit\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}\n\n",null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmName(\"CoroutinesKt\")\npackage kotlin.coroutines.experimental\n\nimport kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED\nimport kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn\nimport kotlin.coroutines.experimental.intrinsics.createCoroutineUnchecked\n\n/**\n * Starts coroutine with receiver type [R] and result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(receiver, completion).resume(Unit)\n}\n\n/**\n * Starts coroutine without receiver and with result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend  () -> T).startCoroutine(\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(completion).resume(Unit)\n}\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(receiver, completion), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(completion), COROUTINE_SUSPENDED)\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Repeated invocation of any resume function produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\npublic inline suspend fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n        suspendCoroutineOrReturn { c: Continuation<T> ->\n            val safe = SafeContinuation(c)\n            block(safe)\n            safe.getResult()\n        }\n\n// INTERNAL DECLARATIONS\n\n@kotlin.internal.InlineOnly\ninternal inline fun processBareContinuationResume(completion: Continuation<*>, block: () -> Any?) {\n    try {\n        val result = block()\n        if (result !== COROUTINE_SUSPENDED) {\n            @Suppress(\"UNCHECKED_CAST\")\n            (completion as Continuation<Any?>).resume(result)\n        }\n    } catch (t: Throwable) {\n        completion.resumeWithException(t)\n    }\n}\n","/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    open val rootElement: SVGSVGElement?\n    var title: String\n    open val referrer: String\n    var domain: String\n    open val activeElement: Element?\n    open val location: Location?\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((Event) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((Event) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((Event) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((Event) -> dynamic)?\n    override var ondrag: ((Event) -> dynamic)?\n    override var ondragend: ((Event) -> dynamic)?\n    override var ondragenter: ((Event) -> dynamic)?\n    override var ondragexit: ((Event) -> dynamic)?\n    override var ondragleave: ((Event) -> dynamic)?\n    override var ondragover: ((Event) -> dynamic)?\n    override var ondragstart: ((Event) -> dynamic)?\n    override var ondrop: ((Event) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((Event) -> dynamic)?\n    override var oninput: ((Event) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((Event) -> dynamic)?\n    override var onkeypress: ((Event) -> dynamic)?\n    override var onkeyup: ((Event) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((Event) -> dynamic)?\n    override var onmousedown: ((Event) -> dynamic)?\n    override var onmouseenter: ((Event) -> dynamic)?\n    override var onmouseleave: ((Event) -> dynamic)?\n    override var onmousemove: ((Event) -> dynamic)?\n    override var onmouseout: ((Event) -> dynamic)?\n    override var onmouseover: ((Event) -> dynamic)?\n    override var onmouseup: ((Event) -> dynamic)?\n    override var onwheel: ((Event) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((Event) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((Event) -> dynamic)?\n    override var oncut: ((Event) -> dynamic)?\n    override var onpaste: ((Event) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun exitFullscreen(): Promise<Unit>\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close(): Unit\n    fun write(vararg text: String): Unit\n    fun writeln(vararg text: String): Unit\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear(): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(interface_: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n@kotlin.internal.InlineOnly inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindow {\n    override val performance: Performance\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close(): Unit\n    fun stop(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert(): Unit\n    fun alert(message: String): Unit\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print(): Unit\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int): Unit\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int): Unit\n    fun moveBy(x: Int, y: Int): Unit\n    fun resizeTo(x: Int, y: Int): Unit\n    fun resizeBy(x: Int, y: Int): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n@kotlin.internal.InlineOnly inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n//    fun namedItem(name: String): UnionElementOrHTMLCollection?\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n}\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection {\n//    override fun namedItem(name: String): UnionElementOrRadioNodeList?\n}\n//@kotlin.internal.InlineOnly override inline operator fun HTMLFormControlsCollection.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun forceSpellCheck(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap {\n}\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.set(name: String, value: String): Unit { asDynamic()[name] = value; }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var scope: String\n    open var workerType: WorkerType\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    @JsName(\"as\") open var as_: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, TexImageSource, HTMLOrSVGImageElement {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load(): Unit\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double): Unit\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause(): Unit\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue): Unit\n    fun removeCue(cue: TextTrackCue): Unit\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption(): Unit\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead(): Unit\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot(): Unit\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit(): Unit\n    fun reset(): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally): Unit\n    fun stepDown(n: Int = definedExternally): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun close(returnValue: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n\n    o[\"flatten\"] = flatten\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally): Unit\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save(): Unit\n    fun restore(): Unit\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double): Unit\n    fun rotate(angle: Double): Unit\n    fun translate(x: Double, y: Double): Unit\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun setTransform(transform: dynamic = definedExternally): Unit\n    fun resetTransform(): Unit\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n    var fillStyle: dynamic\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: dynamic, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun fillRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double): Unit\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath(): Unit\n    fun fill(fillRule: CanvasFillRule = definedExternally): Unit\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun stroke(): Unit\n    fun stroke(path: Path2D): Unit\n    fun clip(fillRule: CanvasFillRule = definedExternally): Unit\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun resetClip(): Unit\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element): Unit\n    fun drawFocusIfNeeded(path: Path2D, element: Element): Unit\n    fun scrollPathIntoView(): Unit\n    fun scrollPathIntoView(path: Path2D): Unit\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: dynamic, dx: Double, dy: Double): Unit\n    fun drawImage(image: dynamic, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n    fun drawImage(image: dynamic, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally): Unit\n    fun removeHitRegion(id: String): Unit\n    fun clearHitRegions(): Unit\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double): Unit\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double): Unit\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>): Unit\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath(): Unit\n    fun moveTo(x: Double, y: Double): Unit\n    fun lineTo(x: Double, y: Double): Unit\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally): Unit\n    override fun closePath(): Unit\n    override fun moveTo(x: Double, y: Double): Unit\n    override fun lineTo(x: Double, y: Double): Unit\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    override fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val region: String?\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?): Unit\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally): Unit\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = null): ElementDefinitionOptions {\n    val o = js(\"({})\")\n\n    o[\"extends\"] = extends\n\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int): Unit\n    fun getData(format: String): String\n    fun setData(format: String, data: String): Unit\n    fun clearData(format: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?): Unit\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally): Unit\n    fun back(): Unit\n    fun forward(): Unit\n    fun pushState(data: Any?, title: String, url: String? = definedExternally): Unit\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String): Unit\n    fun replace(url: String): Unit\n    fun reload(): Unit\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((Event) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update(): Unit\n    fun abort(): Unit\n    fun swapCache(): Unit\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n    var onblur: ((Event) -> dynamic)?\n    var oncancel: ((Event) -> dynamic)?\n    var oncanplay: ((Event) -> dynamic)?\n    var oncanplaythrough: ((Event) -> dynamic)?\n    var onchange: ((Event) -> dynamic)?\n    var onclick: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    var oncontextmenu: ((Event) -> dynamic)?\n    var oncuechange: ((Event) -> dynamic)?\n    var ondblclick: ((Event) -> dynamic)?\n    var ondrag: ((Event) -> dynamic)?\n    var ondragend: ((Event) -> dynamic)?\n    var ondragenter: ((Event) -> dynamic)?\n    var ondragexit: ((Event) -> dynamic)?\n    var ondragleave: ((Event) -> dynamic)?\n    var ondragover: ((Event) -> dynamic)?\n    var ondragstart: ((Event) -> dynamic)?\n    var ondrop: ((Event) -> dynamic)?\n    var ondurationchange: ((Event) -> dynamic)?\n    var onemptied: ((Event) -> dynamic)?\n    var onended: ((Event) -> dynamic)?\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    var onfocus: ((Event) -> dynamic)?\n    var oninput: ((Event) -> dynamic)?\n    var oninvalid: ((Event) -> dynamic)?\n    var onkeydown: ((Event) -> dynamic)?\n    var onkeypress: ((Event) -> dynamic)?\n    var onkeyup: ((Event) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onloadeddata: ((Event) -> dynamic)?\n    var onloadedmetadata: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    var onloadstart: ((Event) -> dynamic)?\n    var onmousedown: ((Event) -> dynamic)?\n    var onmouseenter: ((Event) -> dynamic)?\n    var onmouseleave: ((Event) -> dynamic)?\n    var onmousemove: ((Event) -> dynamic)?\n    var onmouseout: ((Event) -> dynamic)?\n    var onmouseover: ((Event) -> dynamic)?\n    var onmouseup: ((Event) -> dynamic)?\n    var onwheel: ((Event) -> dynamic)?\n    var onpause: ((Event) -> dynamic)?\n    var onplay: ((Event) -> dynamic)?\n    var onplaying: ((Event) -> dynamic)?\n    var onprogress: ((Event) -> dynamic)?\n    var onratechange: ((Event) -> dynamic)?\n    var onreset: ((Event) -> dynamic)?\n    var onresize: ((Event) -> dynamic)?\n    var onscroll: ((Event) -> dynamic)?\n    var onseeked: ((Event) -> dynamic)?\n    var onseeking: ((Event) -> dynamic)?\n    var onselect: ((Event) -> dynamic)?\n    var onshow: ((Event) -> dynamic)?\n    var onstalled: ((Event) -> dynamic)?\n    var onsubmit: ((Event) -> dynamic)?\n    var onsuspend: ((Event) -> dynamic)?\n    var ontimeupdate: ((Event) -> dynamic)?\n    var ontoggle: ((Event) -> dynamic)?\n    var onvolumechange: ((Event) -> dynamic)?\n    var onwaiting: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n    var onbeforeprint: ((Event) -> dynamic)?\n    var onbeforeunload: ((Event) -> String?)?\n    var onhashchange: ((Event) -> dynamic)?\n    var onlanguagechange: ((Event) -> dynamic)?\n    var onmessage: ((Event) -> dynamic)?\n    var onoffline: ((Event) -> dynamic)?\n    var ononline: ((Event) -> dynamic)?\n    var onpagehide: ((Event) -> dynamic)?\n    var onpageshow: ((Event) -> dynamic)?\n    var onpopstate: ((Event) -> dynamic)?\n    var onrejectionhandled: ((Event) -> dynamic)?\n    var onstorage: ((Event) -> dynamic)?\n    var onunhandledrejection: ((Event) -> dynamic)?\n    var onunload: ((Event) -> dynamic)?\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((Event) -> dynamic)?\n    var oncut: ((Event) -> dynamic)?\n    var onpaste: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val caches: CacheStorage\n    val origin: String\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally): Unit\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally): Unit\n    fun createImageBitmap(image: dynamic, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: dynamic, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String): Unit\n    fun registerContentHandler(mimeType: String, url: String, title: String): Unit\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String): Unit\n    fun unregisterContentHandler(mimeType: String, url: String): Unit\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    override val length: Int\n    fun refresh(reload: Boolean = definedExternally): Unit\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close(): Unit\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = null, resizeHeight: Int? = null, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindow?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindow?, ports: Array<MessagePort>): Unit\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindow? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindow? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close(): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n\n    o[\"withCredentials\"] = withCredentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Int\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((Event) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally): Unit\n    fun send(data: String): Unit\n    fun send(data: Blob): Unit\n    fun send(data: ArrayBuffer): Unit\n    fun send(data: ArrayBufferView): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindow, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun start(): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((Event) -> dynamic)?\n    fun importScripts(vararg urls: String): Unit\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((Event) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate(): Unit\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Int\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open var href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String): Unit\n    fun removeItem(key: String): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n@kotlin.internal.InlineOnly inline operator fun Storage.set(key: String, value: String): Unit { asDynamic()[key] = value; }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n}\n\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start(): Unit\n    fun stop(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n}\n\npublic external interface External {\n    fun AddSearchProvider(): Unit\n    fun IsSearchProviderInstalled(): Unit\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?): Unit\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n    val lastElementChild: Element?\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic): Unit\n    fun append(vararg nodes: dynamic): Unit\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n    val nextElementSibling: Element?\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic): Unit\n    fun after(vararg nodes: dynamic): Unit\n    fun replaceWith(vararg nodes: dynamic): Unit\n    fun remove(): Unit\n}\n\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override val length: Int\n    override fun item(index: Int): Node?\n}\n@kotlin.internal.InlineOnly inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : UnionElementOrHTMLCollection, ItemArrayLike<Element> {\n    override val length: Int\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally): Unit\n    fun disconnect(): Unit\n    fun takeRecords(): Array<MutationRecord>\n}\n\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = null, characterData: Boolean? = null, subtree: Boolean? = false, attributeOldValue: Boolean? = null, characterDataOldValue: Boolean? = null, attributeFilter: Array<String>? = null): MutationObserverInit {\n    val o = js(\"({})\")\n\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize(): Unit\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\npublic external interface ElementCreationOptions {\n    @JsName(\"is\") var is_: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(is_: String? = null): ElementCreationOptions {\n    val o = js(\"({})\")\n\n    o[\"is\"] = is_\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrProcessingInstruction, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent {\n    open var innerHTML: String\n    open var outerHTML: String\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    fun requestFullscreen(): Promise<Unit>\n    fun insertAdjacentHTML(position: String, text: String): Unit\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String): Unit\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String): Unit\n    fun removeAttribute(qualifiedName: String): Unit\n    fun removeAttributeNS(namespace: String?, localName: String): Unit\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String): Unit\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView(): Unit\n    fun scrollIntoView(arg: dynamic): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n\n    o[\"mode\"] = mode\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    override val length: Int\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n}\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String): Unit\n    fun insertData(offset: Int, data: String): Unit\n    fun deleteData(offset: Int, count: Int): Unit\n    fun replaceData(offset: Int, count: Int, data: String): Unit\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    fun splitText(offset: Int): Text\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun createContextualFragment(fragment: String): DocumentFragment\n    fun setStart(node: Node, offset: Int): Unit\n    fun setEnd(node: Node, offset: Int): Unit\n    fun setStartBefore(node: Node): Unit\n    fun setStartAfter(node: Node): Unit\n    fun setEndBefore(node: Node): Unit\n    fun setEndAfter(node: Node): Unit\n    fun collapse(toStart: Boolean = definedExternally): Unit\n    fun selectNode(node: Node): Unit\n    fun selectNodeContents(node: Node): Unit\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents(): Unit\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node): Unit\n    fun surroundContents(newParent: Node): Unit\n    fun cloneRange(): Range\n    fun detach(): Unit\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach(): Unit\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    override val length: Int\n    open var value: String\n    override fun item(index: Int): String?\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String): Unit\n    fun remove(vararg tokens: String): Unit\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String): Unit\n    fun supports(token: String): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n@kotlin.internal.InlineOnly inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = null, top: Double? = null, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?): Unit\n    fun addListener(listener: ((Event) -> Unit)?): Unit\n    fun removeListener(listener: EventListener?): Unit\n    fun removeListener(listener: ((Event) -> Unit)?): Unit\n}\n\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = null): BoxQuadOptions {\n    val o = js(\"({})\")\n\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n\n    return o\n}\n\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\npublic external @marker interface UnionElementOrProcessingInstruction {\n}\n\npublic external @marker interface UnionElementOrHTMLCollection {\n}\n\npublic external @marker interface UnionElementOrRadioNodeList {\n}\n\npublic external @marker interface UnionHTMLOptGroupElementOrHTMLOptionElement {\n}\n\npublic external @marker interface UnionAudioTrackOrTextTrackOrVideoTrack {\n}\n\npublic external @marker interface UnionElementOrMouseEvent {\n}\n\npublic external @marker interface UnionMessagePortOrWindow {\n}\n\npublic external @marker interface UnionMessagePortOrServiceWorker {\n}\n\npublic external @marker interface HTMLOrSVGScriptElement {\n}\n\npublic external @marker interface RenderingContext {\n}\n\npublic external @marker interface HTMLOrSVGImageElement {\n}\n\n/* please, don't implement this interface! */\npublic external interface DocumentReadyState {\n    companion object\n}\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\npublic external interface CanPlayTypeResult {\n    companion object\n}\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackMode {\n    companion object\n}\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackKind {\n    companion object\n}\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\npublic external interface SelectionMode {\n    companion object\n}\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasFillRule {\n    companion object\n}\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\npublic external interface ImageSmoothingQuality {\n    companion object\n}\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineCap {\n    companion object\n}\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineJoin {\n    companion object\n}\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextAlign {\n    companion object\n}\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextBaseline {\n    companion object\n}\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasDirection {\n    companion object\n}\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollRestoration {\n    companion object\n}\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\npublic external interface ImageOrientation {\n    companion object\n}\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\npublic external interface PremultiplyAlpha {\n    companion object\n}\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\npublic external interface ColorSpaceConversion {\n    companion object\n}\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\npublic external interface ResizeQuality {\n    companion object\n}\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\npublic external interface BinaryType {\n    companion object\n}\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\npublic external interface WorkerType {\n    companion object\n}\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\npublic external interface ShadowRootMode {\n    companion object\n}\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollBehavior {\n    companion object\n}\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollLogicalPosition {\n    companion object\n}\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\npublic external interface CSSBoxType {\n    companion object\n}\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()\n\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEA,qB;IACC,eAAc,a;EADf,C;;;;;;;;IAAA,4B;MAAA,W;;IAAA,qB;EAAA,C;;;ICQC,kB;IACA,oB;IACA,c;IACA,sB;IACa,2BAAe,iB;EALR,C;;;MAMI,OAAC,wBAAQ,QAAR,CAAD,GAAgB,CAAhB,I;IAAA,C;;;;MACF,+BAAQ,WAAR,C;IAAA,C;;;IACM,sBAAI,UAAJ,IAAY,CAAZ,I;EAAA,C;ECuB7B,2D;;;MDtBiC,YAAK,U;MAAL,aAAY,W;MAAZ,OCsBgB,cAAW,eAAN,KAAM,CAAX,EAA8B,eAAP,MAAO,CAA9B,C;IDtBhB,C;;EEPjC,gE;;IAKoC,MAAM,8B;EFIM,C;;IACT,Q;EAAA,C;;EACoB,C;;IAClB,Q;EAAA,C;;IAEhB,OAAC,KAAK,CAAN,IAAa,IAAI,U;EAAjB,C;;IACA,OAAC,KAAK,CAAN,IAAa,IAAI,W;EAAjB,C;;IAEO,8BAAU,CAAV,KAAgB,uBAAU,CAAV,C;EAAhB,C;;IAEV,OAAE,MAAF,CAAE,EAAM,CAAN,EAAS,aAAQ,CAAR,IAAT,C;EAAF,C;;IACA,OAAE,MAAF,CAAE,EAAM,CAAN,EAAS,cAAS,CAAT,IAAT,C;EAAF,C;;IAGF,Q;IAAA,OADL,IACK,UAAS,CAAT,I;IAAlB,aAAU,CAAV,gB;MADa,IACiB,kBAAS,CAAT,EADjB,IAC6B,UAAS,CAAT,GAAa,CAAb,IAAZ,C;IADjB,W;EAAA,C;;IAKK,Q;IAAA,iB;IAAlB,aAAU,CAAV,gB;MACC,SAAS,iBAAI,CAAJ,EAAO,EAAP,C;MACT,SAAS,iBAAI,CAAJ,EAAO,EAAP,C;MACT,iBAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,C;MACA,iBAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,C;;EAEF,C;;IAEiE,MAAM,mCAA8B,qEAA9B,C;EAAN,C;;IAA3C,4B;MAAA,eAAwB,I;WAA9C,mG;EAAiE,C;;IAEA,iBAAU,kCAAV,C;EAAA,C;;IAEjC,IAKZ,IALY,EAKc,M;IAJ7C,kBAD+B,IAC/B,Y;MADyB,OACV,I;SACf,kBAF+B,IAE/B,e;MAFyB,OAEP,IAAK,U;;MAEtB,UAAU,cAAS,UAAT,EAAgB,WAAhB,EAAwB,CAAxB,EAAqC,YAArC,C;MACQ,kB;MAAlB,aAAU,CAAV,gB;QAA4C,mB;QAAlB,aAAU,CAAV,kB;UAAyB,gBAAI,CAAJ,EAAO,CAAP,EAAY,IAAK,eAAM,CAAN,EAAS,CAAT,CAAjB,C;;MAL3B,OAMxB,G;;EANwB,C;;;MApCb,qC;IAAA,C;;MAAA,qC;IAAA,C;;;;;;;;IA+C6D,IAAK,I;IAAL,qBAAK,OAAL,SAAK,8BAAqB,KAArB,EAA4B,MAA5B,CAAL,6B;EAAA,C;;IGxD1E,oB;MAAA,OAAkB,cAAU,mBAAQ,MAAR,IAAiB,CAAjB,IAAV,C;IAClB,uB;MAAA,UAAoB,eAAS,CAAT,C;IACjB,yBAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC,OAAtC,C;EALS,C;;IAMyD,mBAAQ,KAAR,EAAe,MAAf,C;EAAA,C;;;;;;;ICArE,oB;MAAA,OAAuB,eAAW,mBAAQ,MAAR,CAAX,C;IACvB,sB;MAAA,SAA0B,uB;IAC1B,uB;MAAA,UAAmB,K;IAChB,kBAAO,KAAP,EAAc,MAAd,EAAsB,EAAtB,EAA0B,OAA1B,C;IAHH,gB;IACA,oB;EAJa,C;;IAOwD,oBAAS,KAAT,EAAgB,MAAhB,UAAiC,WAAjC,EAAmD,YAAnD,C;EAAA,C;;IAEA,UAAK,wBAAL,IAA0B,c;EAAvC,C;;IACP,OAAA,SAAkB,CAAb,mBAAM,CAAN,EAAS,CAAT,CAAa,CAAlB,GAA8B,K;EAA9B,C;;IAEP,OAAA,WAAO,sBAAa,SAAkB,CAAb,mBAAM,CAAN,EAAS,CAAT,CAAa,CAA/B,C;EAAP,C;;IACgB,UAAK,wBAAL,IAAuC,QAAnB,WAAO,oBAAY,C;EAApD,C;;IAEX,qBAAW,UAAX,UAAmB,WAAnB,iBAAmC,WAAnC,M;EAAA,C;;;;;;;ICflC,oB;MAAA,OAAkB,cAAU,mBAAQ,MAAR,IAAiB,CAAjB,IAAV,C;IAClB,uB;MAAA,UAAoB,eAAS,CAAT,C;IACjB,yBAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC,OAAtC,C;EALS,C;;IAMyD,mBAAQ,KAAR,EAAe,MAAf,C;EAAA,C;;;;;;ECgCtE,iB;;IC8JC,gC;IAvLA,oB;MAAA,OAAqB,eAAS,mBAAQ,MAAR,CAAT,C;IACrB,uB;MAAA,UAAmB,K;IAChB,kBAAO,KAAP,EAAc,MAAd,EAAsB,EAAtB,EAA0B,OAA1B,C;IAFH,gB;IAIC,IAAI,SAAK,OAAL,GAAY,mBAAQ,MAAR,CAAhB,C;MAAgC,MAAM,sBAAiB,qCAAkC,KAAlC,iBAAiD,MAAjD,yBAA0E,SAAK,OAA/E,gBAA8F,mBAAQ,MAAR,CAA/G,C;IAGvC,cAAmB,eDwBT,MAAK,KCxBiB,KDwBjB,ECxBwB,MDwBxB,CCxBI,C;EAVN,C;;IA0BwD,oBAAS,KAAT,EAAgB,MAAhB,UAAkC,YAAlC,C;EAAA,C;;IAEP,UAAK,wBAAL,S;EAAN,C;;IACP,iBAAK,mBAAM,CAAN,EAAS,CAAT,CAAL,C;EAAA,C;;IACP,wBAAI,CAAJ,EAAO,CAAP,C;EAAA,C;;IACS,iBAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,C;EAAA,C;;IAGlD,UAAU,GAAV,EAAe,CAAf,EAAkB,SAAlB,EAAwB,mBAAM,CAAN,EAAS,CAAT,CAAxB,EAAqC,UAArC,C;EACD,C;;IAGC,UAAU,I;IACV,YAAY,SAAS,KAAT,I;IACZ,aAAa,UAAU,IAAV,I;IACb,cAAc,GAAI,K;IAClB,cAAc,GAAI,K;IAClB,aAAU,CAAV,MAAkB,MAAlB,M;MACC,gBAAgB,GAAI,eAAM,EAAN,EAAU,KAAK,CAAL,IAAV,C;MACpB,gBAAgB,GAAI,eAAM,KAAN,EAAa,OAAO,CAAP,IAAb,C;MACpB,IAAI,GAAJ,C;QACC,aAAU,CAAV,MAAkB,KAAlB,M;UAAyB,QAAQ,YAAY,CAAZ,IAAR,IAAyB,kBAAK,aAAI,QAAQ,YAAY,CAAZ,IAAR,CAAJ,EAA4B,QAAQ,YAAY,CAAZ,IAAR,CAA5B,C;;;QAGvD,UAAU,OAAV,EAAmB,SAAnB,EAA8B,OAA9B,EAAuC,SAAvC,EAAkD,KAAlD,C;;;EAIH,C;;IAGC,iBAAK,CAAL,EAAQ,CAAR,EAAa,kBAAK,aAAI,iBAAK,CAAL,EAAQ,CAAR,CAAJ,EAAgB,CAAhB,CAAlB,C;EACD,C;;IAE4C,mB;MAAA,MAAW,C;IAAG,mB;MAAA,MAAW,C;IACpE,SAAS,G;IACT,SAAS,G;IACT,YAAY,C;IACZ,WAAW,C;IACX,aAAa,KAAM,M;IACnB,cAAc,KAAM,O;IACpB,IAAI,KAAK,CAAT,C;MACC,QAAQ,CAAC,EAAD,I;MAER,KAAK,C;;IAEN,IAAI,KAAK,CAAT,C;MACC,OAAO,CAAC,EAAD,I;MAEP,KAAK,C;;IAGN,mBAAM,KAAN,EAAa,EAAb,EAAiB,EAAjB,EAAqB,KAArB,EAA4B,IAA5B,EAAkC,MAAlC,EAA0C,OAA1C,EAAmD,GAAnD,C;EACD,C;;IAEqB,iB;MAAA,IAAS,C;IAAG,iB;MAAA,IAAS,C;IAAG,qB;MAAA,QAAa,IAAK,M;IAAO,sB;MAAA,SAAc,IAAK,O;IACxF,SAAS,oBAAO,CAAP,C;IACT,SAAS,oBAAO,IAAI,KAAJ,GAAY,CAAZ,IAAP,C;IACT,SAAS,oBAAO,CAAP,C;IACT,SAAS,oBAAO,IAAI,MAAJ,GAAa,CAAb,IAAP,C;IACT,cAAW,EAAX,QAAe,EAAf,O;MAA6B,gBAAV,IAAK,K;MAAK,YAAY,mBAAM,EAAN,EAAU,EAAV,C;MAAZ,UAA2B,mBAAM,EAAN,EAAU,EAAV,IAAgB,CAAhB,I;MEsC+B,SDhByC,MDtB9F,KCsB8F,ECgB5B,KDhB4B,ECgBrB,GDhBqB,C;;EDrBjI,C;;IAEsC,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAC5D,QAAQ,GAAI,O;IAEZ,qBAAqB,aAAQ,EAAR,I;IACrB,sBAAsB,cAAS,EAAT,I;IAEG,UAAoB,CAAE,M;IAA/C,aDiFS,MAAK,KCjFe,cDiFf,EI21BsC,GJ31BtC,C;IChFY,UAAqB,CAAE,O;IAAjD,cDgFS,MAAK,KChFgB,eDgFhB,EI21BsC,GJ31BtC,C;IC9Ed,mBAAM,GAAI,IAAV,EAAe,EAAf,EAAmB,EAAnB,EAAuB,CAAE,EAAzB,EAA4B,CAAE,EAA9B,EAAiC,CAAE,EAAF,GAAM,MAAN,IAAjC,EAA+C,CAAE,EAAF,GAAM,OAAN,IAA/C,EAAoE,GAApE,C;EACD,C;;IAEuB,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAK,sBAAS,KAAT,EAAgB,GAAhB,EAAqB,EAArB,EAAyB,EAAzB,C;EAAA,C;;IAC3B,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAK,sBAAS,IAAT,EAAe,GAAf,EAAoB,EAApB,EAAwB,EAAxB,C;EAAA,C;;IAEhB,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAK,mBAAM,GAAN,EAAW,EAAX,EAAe,EAAf,EAAyB,KAAzB,C;EAAA,C;;IAC3B,kB;MAAA,KAAU,C;IAAG,kB;MAAA,KAAU,C;IAAK,mBAAM,GAAN,EAAW,EAAX,EAAe,EAAf,EAAyB,IAAzB,C;EAAA,C;;IAEiB,sCAAkB,IAAlB,EAAwB,GAAxB,EAA6B,QAAQ,IAAR,IAA7B,EAA2C,SAAS,GAAT,IAA3C,C;EAAA,C;;IAGjF,UAAU,aAAS,KAAT,EAAgB,MAAhB,C;IACV,cAAW,CAAX,OAAmB,MAAnB,O;MACC,UAAU,IAAK,KAAf,EAAqB,IAAK,eAAM,CAAN,EAAS,IAAI,EAAJ,IAAT,CAA1B,EAA4C,GAAI,KAAhD,EAAsD,GAAI,eAAM,CAAN,EAAS,EAAT,CAA1D,EAAwE,KAAxE,C;;IAED,OAAO,G;EACR,C;iHAEA,yB;IAAA,8C;II+tCD,qD;IJ/tCC,2B;MACuB,gBAAd,SAAQ,SAAR,C;MAAc,c;;QImuCJ,Q;QADhB,IAAI,wCAAsB,mBAA1B,C;UAAqC,aAAO,K;UAAP,e;;QACrB,2B;QAAhB,OAAgB,cAAhB,C;UAAgB,yB;UAAM,IJnuCI,SAAS,UImuCC,OJnuCD,CAAT,CImuCJ,C;YAAwB,aAAO,I;YAAP,e;;;QAC9C,aAAO,K;;;MJpuCT,iB;IACD,C;GAFA,C;;IAMmB,UAA0B,MAA1B,EAA0C,M;IAD5D,QAAQ,C;IACU,kB;IAAlB,aAAU,CAAV,gB;MAA4C,mB;MAAlB,aAAU,CAAV,kB;QAAyB,UAAS,UAAT,EAAS,kBAAT,WAAc,CAAd,EAAiB,CAAjB,C;;;EACpD,C;yHAEA,yB;IAAA,2B;MAHmB,wB;MADlB,QAAQ,C;MACU,kB;MAAlB,aAAU,CAAV,gB;QAA4C,mB;QAAlB,aAAU,CAAV,kB;UAIA,SAAL,CAJuC,UAIvC,EAJuC,kBAIvC,YAAe,SAJ6B,CAI7B,EAJgC,CAIhC,C;;;IACrC,C;GAFA,C;uIAIA,yB;IAAA,2B;MAPmB,wB;MADlB,QAAQ,C;MACU,kB;MAAlB,aAAU,CAAV,gB;QAA4C,mB;QAAlB,aAAU,CAAV,kB;UAAyB,WAAS,UAAT,EAAS,kBAAT,S;UAQzB,SAAL,CAAU,GAAV,IAAe,SAAc,SAAL,CAAU,GAAV,CAAT,C;;;IACrC,C;GAFA,C;;IAUmB,Q;IALlB,kBAAkB,MAAO,M;IACzB,gBAAgB,WAAY,M;IAC5B,gBAAgB,WAAY,U;IAC5B,eAAe,IAAK,K;IACpB,gBAAgB,KAAM,K;IACJ,gB;IAAlB,aAAU,CAAV,gB;MACC,QAAS,UAAU,CAAV,MAAkB,WAAnB,GAAoC,G;MAC5C,SAAS,CAAT,IAAe,SAAS,CAAT,IAAgB,SAAjB,GAAgC,KAAM,S;;EAEtD,C;;IAKmB,Q;IAFlB,gBAAgB,WAAY,MAAZ,GAAoB,CAApB,I;IAChB,gBAAqC,EAApB,OAAS,SAAW,C;IACnB,gB;IAAlB,aAAU,CAAV,gB;MACC,QAAQ,KAAM,KAAQ,CAAH,CAAG,CAAd,GAA0B,G;MAClC,IAAK,KAAL,CAAU,CAAV,IAAgB,IAAK,KAAL,CAAU,CAAV,IAAiB,SAAlB,GAAiC,KAAM,S;;EAExD,C;;IAMmB,UACC,M;IAJnB,gBAAgB,WAAY,MAAZ,GAAoB,CAApB,I;IAChB,gBAAqC,EAApB,OAAS,SAAW,C;IACrC,QAAQ,C;IACU,kB;IAAlB,aAAU,CAAV,gB;MACmB,mB;MAAlB,aAAU,CAAV,kB;QACC,QAAQ,IAAI,CAAJ,EAAO,CAAP,IAAc,G;QACtB,IAAK,KAAL,CAAU,CAAV,IAAgB,IAAK,KAAL,CAAU,CAAV,IAAiB,SAAlB,GAAiC,KAAM,S;QACtD,a;;;EAGH,C;;IAKmB,Q;IAFlB,gBAAgB,WAAY,MAAZ,GAAoB,CAApB,I;IAChB,gBAAqC,EAApB,OAAS,SAAW,C;IACnB,gB;IAAlB,aAAU,CAAV,gB;MACC,QAAQ,IAAI,CAAJ,IAAW,G;MACnB,IAAK,KAAL,CAAU,CAAV,IAAgB,IAAK,KAAL,CAAU,CAAV,IAAiB,SAAlB,GAAiC,KAAM,S;;EAExD,C;;IAKmB,Q;IAFlB,UAAU,YAAQ,UAAR,EAAe,WAAf,C;IACV,YAAY,OAAQ,M;IACF,gB;IAAlB,aAAU,CAAV,gB;MACC,GAAI,KAAJ,CAAS,CAAT,IAA8C,OAA9B,UAAK,CAAL,MAAa,KAAd,GAAyB,GAAM,C;;IAE/C,OAAO,G;EACR,C;;IAEA,kC;EAAA,C;;IAEE,aAAU,CAAV,MAAkB,MAAlB,M;MACC,eAAe,GAAI,eAAM,IAAN,EAAY,OAAO,CAAP,IAAZ,C;MACnB,eAAe,GAAI,eAAM,IAAN,EAAY,OAAO,CAAP,IAAZ,C;MACnB,UAAU,GAAI,KAAd,EAAoB,QAApB,EAA8B,GAAI,KAAlC,EAAwC,QAAxC,EAAkD,KAAlD,C;;EAEF,C;;IAEsD,4B;MAAA,8C;IACrD,UAAU,aAAS,KAAM,MAAf,EAAsB,KAAM,OAA5B,C;IACV,GAAI,aAAI,KAAJ,C;IACJ,GAAI,yDAAkC,KAAlC,kC;IACJ,OAAO,G;EACR,C;;ILpMkC,MAAM,8B;EKuMiB,C;;IAEf,yB;MAAA,YAAiB,E;IAC1D,WAAW,kBAAK,CAAL,EAAQ,CAAR,C;IAEM,gBAAV,IAAK,K;IAAK,c;;MKs6QA,Q;MAAhB,wBAAgB,SAAhB,gB;QAAgB,cAAA,SAAhB,M;QAAsB,IAAI,ELr6QzB,kBAAK,cKq6Q+B,OLr6Q/B,CAAL,YAAD,IAAgC,kBAAK,cKq6QA,OLr6QA,CAAL,YAAhC,IAA+D,kBAAK,cKq6Q/B,OLr6Q+B,CAAL,YAA/D,IAA8F,kBAAK,cKq6Q9D,OLr6Q8D,CAAL,YKq6QpE,CAAJ,C;UAAyB,aAAO,K;UAAP,e;;;MAC/C,aAAO,I;;;ILv6QR,iB;EAGD,C;;IASuB,Q;IANtB,IAAI,CAAE,MAAF,KAAW,CAAE,MAAb,IAAsB,CAAE,OAAF,KAAY,CAAE,OAAxC,C;MAAgD,MAAM,8BAA2B,CAAF,gCAAiB,CAAjB,UAAzB,C;IACtD,UAAU,CAAE,U;IACZ,UAAU,CAAE,U;IACZ,UAAU,aAAS,CAAE,MAAX,EAAkB,CAAE,OAApB,UAAsC,IAAtC,C;IAGY,OAAJ,GAAI,K;IAAtB,aAAU,CAAV,gB;MACC,SAAS,kBAAK,yBAAgB,GAAI,KAAJ,CAAS,CAAT,CAAhB,C;MACd,SAAS,kBAAK,yBAAgB,GAAI,KAAJ,CAAS,CAAT,CAAhB,C;MAEd,SAAS,IAAI,kBAAK,cAAK,EAAL,CAAL,GAAgB,kBAAK,cAAK,EAAL,CAArB,IAAJ,C;MACT,SAAS,IAAI,kBAAK,cAAK,EAAL,CAAL,GAAgB,kBAAK,cAAK,EAAL,CAArB,IAAJ,C;MACT,SAAS,IAAI,kBAAK,cAAK,EAAL,CAAL,GAAgB,kBAAK,cAAK,EAAL,CAArB,IAAJ,C;MACT,SAAS,IAAI,kBAAK,cAAK,EAAL,CAAL,GAAgB,kBAAK,cAAK,EAAL,CAArB,IAAJ,C;MAIT,GAAI,KAAJ,CAAS,CAAT,IAAc,kBAAK,cAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,C;;IAKpB,OAAO,G;EACR,C;;;;;;;;IAnDD,yC;MAAA,wB;;IAAA,kC;EAAA,C;;IAsDe,iBAAI,QAAJ,C;EAAA,C;;IAGI,Q;IAAA,gB;IAAlB,aAAU,CAAV,gB;MAAwB,UAAK,CAAL,IAAU,UAAK,CAAL,IAAY,K;EAC/C,C;;IAEkC,qBAAW,UAAX,UAAmB,WAAnB,M;EAAA,C;;IAGjC,SAAS,mBAAM,CAAN,EAAS,EAAT,C;IACT,SAAS,mBAAM,CAAN,EAAS,EAAT,C;IACT,UAAU,SAAV,EAAgB,EAAhB,EAAoB,WAApB,EAA0B,CAA1B,EAA6B,UAA7B,C;IACA,UAAU,SAAV,EAAgB,EAAhB,EAAoB,SAApB,EAA0B,EAA1B,EAA8B,UAA9B,C;IACA,UAAU,WAAV,EAAgB,CAAhB,EAAmB,SAAnB,EAAyB,EAAzB,EAA6B,UAA7B,C;EACD,C;;IAEsD,sB;MAAA,SAAc,C;IAAG,4B;MAAA,eAAwB,I;IACxF,mCAD0G,IAChF,KAA1B,EAAgC,CAAhC,EAD0G,IAClE,KAAxC,e;IAD0G,W;EAAA,C;;IAInD,qBAAU,sBAAkB,IAAlB,CAAV,C;EAAA,C;;IAEhD,oBAAS,UAAT,EAAgB,WAAhB,EAAwB,IAAK,KK09YhB,QL19Yb,EAA4C,YAA5C,C;EAAA,C;;IAE4B,OAAI,IAAK,QAAT,GAAkB,IAAlB,GAA4B,oB;EAA5B,C;;IACE,OAAI,CAAC,IAAK,QAAV,GAAmB,IAAnB,GAA6B,sB;EAA7B,C;;IACC,gBAAb,IAAK,Q;ILjNlC,SKiNkD,qB;IAArB,OLhNtB,S;EKgNsB,C;;IACe,gBAAb,IAAK,Q;ILlNpC,SKkNoD,uB;IAArB,OLjNxB,S;EKiNwB,C;;IAKV,Q;IAFvB,IAAI,YAAJ,C;MAAa,M;IACb,eAAU,I;IACa,OAAL,SAAK,O;IAAvB,aAAU,CAAV,gB;MAA6B,UAAK,CAAL,IAAU,kBAAK,yBAAgB,UAAK,CAAL,CAAhB,C;EAC7C,C;;IAKwB,Q;IAFvB,IAAI,CAAC,YAAL,C;MAAc,M;IACd,eAAU,K;IACa,OAAL,SAAK,O;IAAvB,aAAU,CAAV,gB;MAA6B,UAAK,CAAL,IAAU,kBAAK,2BAAkB,UAAK,CAAL,CAAlB,C;EAE7C,C;;IAmDuB,IAGH,IAHG,EAOF,M;IAdpB,WAAW,IAAK,Q;IAChB,IAAK,qB;IACL,UAAU,IAAK,K;IAEf,aAAa,U;IACb,cAAc,W;IAEd,iBAAc,CAAd,UAAsB,MAAtB,U;MACC,kBAAU,CAAV,I;MACA,oBAAW,CAAX,I;MACkB,c;MAAlB,aAAU,CAAV,gB;QACC,QAAQ,IAAK,eAAM,CAAN,EAAS,CAAT,C;QACb,QAAQ,IAAK,eAAM,CAAN,EAAS,IAAI,CAAJ,IAAT,C;QAEK,e;QAAlB,aAAU,CAAV,kB;UACC,SAAS,IAAI,CAAJ,C;UACT,SAAS,IAAI,IAAI,CAAJ,IAAJ,C;UACT,SAAS,IAAI,IAAI,UAAJ,IAAJ,C;UACT,SAAS,IAAI,IAAI,UAAJ,GAAY,CAAZ,IAAJ,C;UACT,IAAI,CAAJ,IAAS,kBAAK,8CAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,C;UACd,QAAK,CAAL,I;UACA,a;;;;IAIH,UAAU,aAAS,MAAT,EAAiB,OAAjB,UAAoC,IAApC,C;IACV,gCAAS,kBAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,MAAhC,EAAwC,OAAxC,C;IAET,OAAO,G;EACR,C;;IAEyC,OAAK,wBAAL,SAAK,C;EAAL,C;;IAGxC,IAAI,cAAa,CAAjB,C;MACC,UAAU,IAAV,EAAgB,CAAhB,EAAmB,IAAK,KAAxB,EAA8B,mBAAM,CAAN,EAAS,CAAT,CAA9B,EAA2C,KAA3C,C;;;MAEA,QAAQ,mBAAM,CAAN,EAAS,CAAT,C;MACR,aAAU,CAAV,MAAkB,KAAlB,M;QACC,IAAK,KAAL,CAAU,CAAV,IAAe,KAAK,CAAL,C;QACf,QAAK,SAAL,I;;;EAGH,C;;IAEgC,OAAA,kBAAK,gBAAO,SAAP,C;EAAL,C;;IAIT,UACC,M;IAFvB,UAAU,aAAS,wBAAQ,EAAR,CAAT,EAAqB,yBAAS,EAAT,CAArB,C;IACY,OAAJ,GAAI,O;IAAtB,aAAU,CAAV,gB;MACuB,SAAJ,GAAI,M;MAAtB,aAAU,CAAV,kB;QACC,gBAAI,CAAJ,EAAO,CAAP,EAAY,iBAAK,IAAI,EAAJ,IAAL,EAAa,IAAI,EAAJ,IAAb,CAAZ,C;;;IAGF,OAAO,G;EACR,C;;IAImB,Q;IADlB,YAAY,IAAK,K;IACC,gB;IAAlB,aAAU,CAAV,gB;MACC,UAAK,CAAL,IAAU,MAAO,gBAAO,UAAK,CAAL,CAAP,EAAgB,MAAO,iBAAQ,MAAM,CAAN,CAAR,CAAvB,C;;EAEnB,C;;IAEsD,gBAAxB,aAAS,UAAT,EAAgB,WAAhB,C;IAAkD,Q;IAAA,OL3U7E,SK2U6E,K;IAAlB,aAAU,CAAV,gB;ML3U3D,SK2UwF,KAAL,CAAU,CAAV,IAAe,mBAAM,qBAA0B,SAAd,CAAmB,CAAnB,CAAZ,C;IAA7E,OL1UpB,S;EK0UoB,C;;IACwB,gBAAxB,aAAS,UAAT,EAAgB,WAAhB,C;IAAkD,Q;IAAA,OL5U7E,SK4U6E,K;IAAlB,aAAU,CAAV,gB;ML5U3D,SK4UwF,KAAL,CAAU,CAAV,IAAe,mBAAM,qBAA0B,SAAd,CAAmB,CAAnB,CAAZ,C;IAA7E,OL3UpB,S;EK2UoB,C;;;;;;;IAzX9B,kD;IACqE,qBAAK,KAAL,EAAY,MAAZ,UAA8B,OAA9B,C;IAC/D,gBAAL,U;IAAK,O;IE8G8C,MAAW,SAAK,O;IAAoB,SDhByC,MD9FtH,KC8FsH,ECgBhF,CDhBgF,ECgBrB,GDhBqB,C;IDhGjI,Y;EAAA,C;;IAKA,kD;IACmD,qBAAK,KAAL,EAAY,MAAZ,UAA8B,KAA9B,C;IAC7C,gBAAL,U;IAAK,O;IEyG8C,MAAW,SAAK,O;IAAoB,SDhByC,MDzFtH,KCyFsH,ECgBhF,CDhBgF,ECgBrB,GDhBqB,C;ID3FjI,Y;EAAA,C;;IAKqC,uB;MAAA,UAAmB,K;IAAxD,kD;IAAqG,qBAAK,KAAL,EAAY,MAAZ,UAA8B,OAA9B,C;IAqGlF,wB;IADlB,QAAQ,C;IACU,mB;IAAlB,aAAU,CAAV,gB;MAA4C,oB;MAAlB,aAAU,CAAV,kB;QAIA,UAAL,CAJuC,UAIvC,EAJuC,kBAIvC,YAxGb,SAwG4B,CAJ6B,CAI7B,EAJgC,CAIhC,C;;;IAzGrC,Y;EAAA,C;;IM7BA,oB;MAAA,OAAkB,cAAU,mBAAQ,MAAR,IAAiB,CAAjB,IAAV,C;IAClB,uB;MAAA,UAAoB,eAAS,EAAT,C;IACjB,yBAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC,OAAtC,C;EALS,C;;IAMyD,mBAAQ,KAAR,EAAe,MAAf,C;EAAA,C;;;;;;;ICHrE,oB;MAAA,OAAkB,cAAU,mBAAQ,MAAR,CAAV,C;IAClB,uB;MAAA,UAAoB,eAAS,GAAT,C;IACjB,yBAAc,CAAd,EAAiB,KAAjB,EAAwB,MAAxB,EAAgC,IAAhC,EAAsC,OAAtC,C;EALS,C;;IAMyD,mBAAQ,KAAR,EAAe,MAAf,C;EAAA,C;;IAEA,sB;IAAA,QAAM,wB;ICFjB,UAAL,MAAiB,a;EDEd,C;;IACP,sB;IAAA,QAAM,mBAAM,CAAN,EAAS,CAAT,C;IAAN,OCJV,UAAQ,CAAH,CAAG,CAAb,GAAyB,G;EDIV,C;;IACP,oBAAQ,iBAAI,CAAJ,EAAO,CAAP,CAAR,C;EAAA,C;;IAER,oBAAU,UAAV,UAAkB,WAAlB,kBAAoC,YAAQ,OAA5C,M;EAAA,C;;;;;;;IEZnC,e;IAAyB,kB;IAAzB,iB;IAAA,uB;IAGC,aAAY,aAAQ,CAAR,I;IACZ,eAAe,OAAS,U;IACxB,iBAAwB,CAAR,Y;EALO,C;;IAAxB,uC;IAAA,C;IACC,yDAAI,CAAJ,C;IAAQ,6DAAM,CAAN,C;IAAU,2DAAK,CAAL,C;IAAS,6DAAM,CAAN,C;IAS3B,qC;EAVD,C;;;IACC,0B;IAAA,iC;EAAA,C;;;IAAQ,0B;IAAA,mC;EAAA,C;;;IAAU,0B;IAAA,kC;EAAA,C;;;IAAS,0B;IAAA,mC;EAAA,C;;IAMG,OAAC,SAAU,UAAX,GAAsB,G;EAAtB,C;;IACW,OAAC,OAAS,cAAV,GAAyB,CAAC,QAAU,GAAX,KAAqB,U;EAA9C,C;;IAEzC,uC;IACC,WAAU,sB;EADX,C;;IAEgC,gBAAI,KAAJ,C;EAAA,C;;;;;;;;IAFhC,0B;IAAA,8C;MAAA,6B;;IAAA,uC;EAAA,C;;;;;;;IAVD,gJ;EAAA,C;;;IAAA,a;MAAA,W;QAAA,sC;MAAA,a;QAAA,wC;MAAA,Y;QAAA,uC;MAAA,a;QAAA,wC;MAAA,QAAA,0E;;EAAA,C;;;IAgBsC,sC;EAAA,C;;IACC,wC;EAAA,C;;IACA,uC;EAAA,C;;IACD,wC;EAAA,C;;YAEI,SAAK,O;WAC9C,C;QADmC,OAC9B,G;WACL,C;QAFmC,OAE9B,I;WACL,C;QAHmC,OAG9B,I;WACL,C;QAJmC,OAI9B,G;cAJ8B,OAKJ,e;;EALI,C;;ICnB+D,uBAAe,SAAf,EAAqB,kBAAa,IAAb,EAAmB,GAAnB,EAAwB,QAAQ,IAAR,IAAxB,EAAsC,SAAS,GAAT,IAAtC,CAArB,C;EAAA,C;;IACP,uBAAe,SAAf,EAAqB,kBAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,MAA1B,CAArB,C;EAAA,C;;IAC3B,uBAAe,SAAf,EAAqB,MAArB,C;EAAA,C;;IAGhE,IAAI,SAAK,MAAL,KAAc,IAAK,MAAnB,IAA4B,SAAK,OAAL,KAAe,IAAK,OAApD,C;MAA4D,OAAO,K;IACnE,QAAQ,SAAK,UAAU,4B;IACvB,QAAQ,IAAK,UAAU,4B;IACvB,YAAY,CAAE,M;IACd,aAAa,CAAE,O;IACf,aAAU,CAAV,MAAkB,MAAlB,M;MACC,aAAU,CAAV,MAAkB,KAAlB,M;QACC,IAAI,CAAE,eAAM,CAAN,EAAS,CAAT,CAAF,KAAiB,CAAE,eAAM,CAAN,EAAS,CAAT,CAAvB,C;UAAoC,OAAO,K;;;IAG7C,OAAO,I;EACR,C;;IAG6B,Q;IAAA,OAAV,SAAK,KAAK,O;IAA5B,aAAU,CAAV,gB;MAAkC,SAAK,KAAL,CAAU,CAAV,IAAgB,SAAK,KAAL,CAAU,CAAV,IAAiB,QAAlB,GAAkC,SAAU,E;EAC9F,C;;ICbE,oB;MAAA,OAAsB,cAAU,mBAAQ,MAAR,KAAkB,IAAI,GAAJ,IAAlB,KAAV,C;IACtB,uB;MAAA,UAAwB,eAAS,KAAM,GAAf,C;IACtB,kBAAO,KAAP,EAAc,MAAd,EAAsB,GAAtB,EAA2B,KAA3B,C;IAFF,gB;IACA,sB;IAGA,IAAI,SAAK,OAAL,IAAY,mBAAQ,MAAR,KAAkB,IAAI,GAAJ,IAAlB,KAAZ,CAAJ,C;MAA4C,MAAM,sBAAiB,qCAAkC,KAAlC,iBAAiD,MAAjD,yBAA0E,SAAK,OAA/E,gBAA8F,mBAAQ,MAAR,CAA/G,C;IAKnD,YAAqB,cZ0BX,MAAK,KY1BoB,KZ0BpB,EY1B2B,MZ0B3B,CY1BM,C;IAErB,aAAY,eAAW,SAAX,C;IACZ,eAAmB,IAAI,GAAJ,I;IACnB,YAAY,CAAC,KAAM,GAAP,IAAc,CAAd,I;EAhBe,C;;IAUD,8BAAoB,QAApB,gBAAgC,UAAhC,iBAA+C,WAA/C,eAA8D,YAAQ,OAAtE,M;EAAA,C;;IAOwB,sB;IAAA,QAAM,qBAAQ,CAAR,EAAW,CAAX,C;IAAP,OAAC,CHlBX,UAAQ,CAAH,CAAG,CAAb,GAAyB,GGkBT,MAA2B,sBAAM,qBAAQ,CAAR,EAAW,CAAX,CAAN,CAA5B,GAAsD,S;EAAtD,C;;IAEhD,QAAQ,qBAAQ,CAAR,EAAW,CAAX,C;IACR,qB;IAAA,QAAoB,OAAT,UHrB2B,KAAQ,CGqB7B,CHrB6B,CAAb,GAAyB,GGqBtC,EAAO,KAAP,EAAc,sBAAM,qBAAQ,CAAR,EAAW,CAAX,CAAN,CAAd,EAAmC,QAAnC,C;IHpBqC,SAAL,CGoB9C,CHpB8C,IAAiB,S;EGqBtE,C;;IAE0C,oBAAQ,iBAAK,CAAL,EAAQ,CAAR,CAAR,C;EAAA,C;;IACZ,0BAAM,CAAN,EAAS,CAAT,IAAc,YAAd,I;EAAA,C;;IACA,0BAAM,CAAN,EAAS,CAAT,IAAc,Y;EAAd,C;;IAG7B,YAAU,GAAI,KAAd,EAAoB,CAApB,EAAuB,SAAvB,EAA6B,mBAAM,CAAN,EAAS,CAAT,CAA7B,EAA0C,WAA1C,C;EACD,C;;IAGC,YAAU,GAAV,EAAe,CAAf,EAAkB,SAAlB,EAAwB,mBAAM,CAAN,EAAS,CAAT,CAAxB,EAAqC,WAArC,C;EACD,C;;IAG2B,Q;IAAA,OADE,IACV,QAAQ,O;IAA1B,aAAU,CAAV,gB;MACC,UAAyD,YAA3C,CAAF,GAFe,IAED,QAAa,OAA5B,GAAyC,GAAK,C;MAF9B,IAG3B,SAAQ,CAAR,IAAa,kCAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,C;;IAEd,OAL4B,I;EAAA,C;;IAS5B,SAAS,qBAAQ,CAAR,EAAW,EAAX,C;IACT,SAAS,qBAAQ,CAAR,EAAW,EAAX,C;IACT,YAAU,SAAV,EAAgB,EAAhB,EAAoB,SAApB,EAA0B,CAA1B,EAA6B,WAA7B,C;IACA,YAAU,SAAV,EAAgB,EAAhB,EAAoB,SAApB,EAA0B,EAA1B,EAA8B,WAA9B,C;IACA,YAAU,SAAV,EAAgB,CAAhB,EAAmB,SAAnB,EAAyB,EAAzB,EAA6B,WAA7B,C;EACD,C;EPunCD,uF;;IOpnC0B,gBAAhB,SAAQ,WAAR,C;IPynCC,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MO/rC8C,kBAAhB,SAAQ,WAAR,C;MPynC3B,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;QACT,aAAY,WO/rC6C,+BAAQ,iBP+rCvC,MO/rCuC,EP+rCvC,IO/rCuC,CAAR,EP+rC7C,C;;MAAA,YAAZ,WAAY,EO/rCmE,aPgsC5E,aOhsC4E,EAAa,EAAb,CP+rCnE,C;;IO/rClB,OPgsCS,W;EO/rCV,C;;IAOoB,Q;IAJnB,IAAI,cAAa,CAAjB,C;MACC,YAAU,IAAV,EAAgB,CAAhB,EAAmB,IAAK,KAAxB,EAA8B,mBAAM,CAAN,EAAS,CAAT,CAA9B,EAA2C,QAAQ,YAAR,IAA3C,C;;;MAEA,QAAQ,mBAAM,CAAN,EAAS,CAAT,C;MACU,eAAQ,YAAR,I;MAAlB,aAAU,CAAV,gB;QACC,IAAK,KAAL,CAAU,CAAV,IAAe,KAAK,CAAL,C;QACf,QAAK,SAAL,I;;;EAGH,C;;;;;;;ICrEiC,c;IAAY,oB;EAAb,C;;IAE/B,SAAS,WAAO,E;IAChB,SAAS,WAAO,E;IAChB,aAAa,WAAO,M;IACpB,cAAc,WAAO,O;IACrB,UAAc,0BAAJ,QAAI,EAA0B,MAA1B,EAAkC,OAAlC,C;IACd,aAAU,CAAV,MAAkB,OAAlB,M;MACC,aAAU,CAAV,MAAkB,MAAlB,M;QACC,gBAAI,CAAJ,EAAO,CAAP,EAAY,qBAAI,KAAK,CAAL,IAAJ,EAAY,KAAK,CAAL,IAAZ,CAAZ,C;;;IAGF,OAAO,G;EACR,C;;;;;;;ICR6F,kBAAO,KAAP,EAAc,MAAd,EAAsB,EAAtB,EAA0B,aAA1B,C;IAA1C,gB;IACnD,sBAAwB,a;EADC,C;;;MACzB,0B;IAAA,C;;;IAE0C,MAAM,sC;EAAN,C;;IAChB,OAAA,qBAAiB,U;EAAjB,C;;IACC,kCAA2B,aAAO,gBAAO,iBAAI,gBAAO,IAAP,EAAa,uBAAmB,SAAnB,CAAb,CAAX,C;EAAlC,C;;IAEO,OAAE,SAAF,SAAQ,UAAR,UAAgB,WAAhB,M;EAAA,C;;;;;;;IAGW,OAAA,yBAA0B,gBAAO,SAAP,EAAa,MAAb,C;EAA1B,C;;IAG7C,IAAI,qCAAJ,C;MAAyB,OAAO,SAAK,Q;IACrC,OAAO,2BAA2B,aAAO,gBAAO,iBAAI,gBAAO,SAAP,EAAa,uBAAmB,SAAnB,CAAb,CAAX,C;EAC1C,C;;IAE2C,OAAA,yBAA0B,gBAAO,KAAP,EAAc,MAAd,C;EAA1B,C;;IAEqB,sB;MAAA,SAAiB,G;IAAK,sB;MAAA,SAAiB,M;IACtG,UAAU,cAAY,KAAZ,EAAmB,MAAnB,C;;MAET,UAAU,GAAI,uB;MACd,GCyEA,O;;QDxEK,iC;QACA,mB;;;QAFL,GC6EC,U;;;;MDzEA,gC;QACC,gBAAF,CAAE,C;;;QAPH,O;;IASA,OAAO,G;EACR,C;;IAE4C,sB;MAAA,SAAiB,G;IAAK,sB;MAAA,SAAiB,M;IAClF,OAAO,cAA+B,YAAlB,CAAE,MAAF,GAAU,MAAQ,CAA/B,EAA4D,YAAnB,CAAE,OAAF,GAAW,MAAQ,CAA5D,EAAqE,CAArE,EAAwE,MAAxE,EAAgF,MAAhF,C;EACR,C;;IAGC,kBADiC,SACjC,e;MAD2B,OACT,S;;MADS,OAEnB,yBAA0B,cAAK,SAAL,C;EAFP,C;;IAKO,sB;MAAA,SAAiB,G;IAAK,sB;MAAA,SAAiB,M;IAAU,qBAAY,SAAZ,EAAkB,MAAlB,EAA0B,MAA1B,C;EAAA,C;;IE7CpF,oB;EAAA,C;;IAEQ,Q;IAAN,IAAI,GAAE,OAAF,CAAE,KAAF,wBAAU,CAAE,KAAZ,SAAJ,C;MAAsB,UAAa,CAAE,KAAL,uBAAgB,CAAE,KAA5B,C;IACtB,WAAW,CAAE,K;IACb,UAAU,G;IACV,aAAU,CAAV,MAAkB,IAAlB,M;MACC,QAAQ,CAAE,iBAAQ,CAAE,KAAF,CAAO,CAAP,CAAR,CAAF,GAAuB,CAAE,iBAAQ,CAAE,KAAF,CAAO,CAAP,CAAR,CAAzB,I;MACR,OAAO,eAAI,CAAJ,C;;IAER,OAAO,MAAW,I;EACnB,C;;IAG0B,gBAAlB,qCAAc,I;IV0/OZ,kBAAM,iBAAa,gBAAb,C;IA6TA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WUxzPa,uBVwzPC,IUxzPD,CVwzPb,C;;IUxzPlB,OAA+C,IVyzPtC,WUzzPsC,CAAxC,GAAgD,G;EACxD,C;;IAGe,QAAW,GAAL,GZ2LsB,MAAW,MY3LV,GZ2LU,C;IY3LrD,OAAO,OZ+PoC,MAAW,OAAM,CAAN,C;EY9PvD,C;;IAEwD,mBAAK,CAAL,EAAQ,CAAR,EAAW,iBAAI,CAAJ,EAAO,CAAP,CAAX,C;EAAA,C;;IACkB,mBAAK,CAAL,EAAQ,CAAR,EAAW,iBAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAX,C;EAAA,C;;;;;;;;IArB3E,2B;MAAA,U;;IAAA,oB;EAAA,C;;IAwBkD,OAAS,YAAT,gCAAS,EAAY,SAAZ,EAAkB,IAAlB,C;EAAT,C;;IACqB,yCAAK,CAAL,EAAQ,CAAR,C;EAAA,C;;IC7BvE,oB;IAAc,wB;IAAiB,2BAAmC,0BAGtD,CAHsD,EAG3C,CAH2C,EAEtD,EAFsD,EAE1C,CAF0C,EACtD,EADsD,EAC1C,CAD0C,EAItD,CAJsD,EAI3C,CAJ2C,C;EAAlE,C;;IAA+B,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAA/B,2B;MAAA,U;;IAAA,oB;EAAA,C;;ICAA,oB;IAAc,wB;IAAiB,2BAAmC,0BAGvD,EAHuD,EAG3C,CAH2C,EAEvD,CAFuD,EAE5C,CAF4C,EACvD,CADuD,EAC5C,CAD4C,EAIvD,EAJuD,EAI3C,CAJ2C,C;EAAlE,C;;IAA+B,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAA/B,2B;MAAA,U;;IAAA,oB;EAAA,C;;;;ICaG,sB;IAAkB,kB;IAClB,sB;IAAkB,kB;IAClB,sB;IAAkB,kB;IAClB,sB;IAAkB,kB;EAJT,C;;IAMuB,OAAE,gBAAF,CAAE,EAAgB,YAAhB,EAAyB,UAAzB,C;EAAF,C;;IACA,OAAE,gBAAF,CAAE,EAAgB,YAAhB,EAAyB,UAAzB,C;EAAF,C;;IACA,OAAE,gBAAF,CAAE,EAAgB,YAAhB,EAAyB,UAAzB,C;EAAF,C;;IACA,OAAE,uBAAF,CAAE,EAAuB,YAAvB,EAAgC,UAAhC,EAAiD,GAAjD,C;EAAF,C;;IAEhC,OAIG,eADA,eADA,eADA,eADI,CACJ,EAAe,CAAf,EAAkB,YAAlB,EAA2B,UAA3B,CACA,EAAe,CAAf,EAAkB,YAAlB,EAA2B,UAA3B,CACA,EAAe,CAAf,EAAkB,YAAlB,EAA2B,UAA3B,CACA,EAAe,CAAf,EAAkB,YAAlB,EAA2B,UAA3B,C;EACJ,C;;;;;;;;;;;;IA8BD,mC;IA1B0B,c;IAC1B,qBAAoB,WAAM,CAAN,I;EADK,C;;IAGE,OAAQ,kBAAH,CAAG,CAAR,GAAoB,K;EAApB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAoB,K;EAApB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAoB,K;EAApB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAoB,K;EAApB,C;;IAEC,OAAQ,kBAAH,CAAG,CAAR,GAAqB,K;EAArB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAqB,K;EAArB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAqB,K;EAArB,C;;IACA,OAAQ,kBAAH,CAAG,CAAR,GAAqB,K;EAArB,C;;IAKP,OAAA,kBAAK,kBAAS,kBAAK,CAAL,CAAT,EAAkB,kBAAK,CAAL,CAAlB,EAA2B,kBAAK,CAAL,CAA3B,EAAoC,kBAAK,CAAL,CAApC,C;EAAL,C;;IAEU,yBAAK,kBAAK,cAAK,IAAL,CAAV,EAAsB,kBAAK,cAAK,IAAL,CAA3B,EAAuC,kBAAK,cAAK,IAAL,CAA5C,EAAwD,kBAAK,cAAK,IAAL,CAA7D,C;EAAA,C;;IAEM,OAAA,kBAAK,kBAAS,kBAAK,MAAL,CAAT,EAAuB,kBAAK,MAAL,CAAvB,EAAqC,kBAAK,MAAL,CAArC,EAAmD,kBAAK,MAAL,CAAnD,C;EAAL,C;;IAEiB,OAAA,MAAO,cAC3D,IAAK,cAAK,KAAL,CADsD,EACzC,IAAK,cAAK,KAAL,CADoC,EACvB,IAAK,cAAK,KAAL,CADkB,EACL,IAAK,cAAK,KAAL,CADA,C;EAAP,C;;IAItD,qC;EAAA,C;;IAEyB,OAAI,IAAI,CAAR,GAAc,CAAd,GAA4B,IAAI,GAAR,GAAc,GAAd,GAAwB,C;EAAhD,C;;IAGC,OAAI,IAAI,GAAR,GAAY,GAAZ,GAAwB,IAAI,GAAR,GAAY,GAAZ,GAAoB,C;EAAxC,C;;IAGE,OnBwHlB,MAAK,KmBxHiB,CnBwHjB,EmBxHoB,GnBwHpB,C;EmBxHa,C;;;;;;;;IAR5B,4C;MAAA,2B;;IAAA,qC;EAAA,C;4IAWA,yB;IAAA,oC;IAAA,+D;MAKmB,IAGb,I;MAPL,SAAS,U;MACT,SAAS,S;MACT,oBAAoB,IAAK,c;MAEzB,aAAU,CAAV,MAAkB,IAAlB,M;QACC,QAAQ,KAAK,IAAL,EAAW,EAAX,C;QACR,UAAM,aAAN,I;QACA,IAAI,SAAJ,EAAI,iBAAJ,UAAY,UAAK,kBAAS,kBAAK,CAAL,CAAT,EAAkB,kBAAK,CAAL,CAAlB,EAA2B,kBAAK,CAAL,CAA3B,EAAoC,kBAAK,CAAL,CAApC,C;;IAEnB,C;GAVA,C;;YAaO,S;WACL,E;QAAM,IAAI,YAAJ,C;UATW,Q;UAJlB,SAcuB,U;UAbvB,SAawC,S;UAZxC,oBAAoB,IAAK,c;UAEzB,aAAU,CAAV,MAUmD,IAVnD,M;YACC,QC5EH,WDqFmB,ICrFnB,ED4EsB,EC5EtB,C;YD6EG,UAAM,aAAN,I;YAQkC,GAPlC,CAAI,SAAJ,EAAI,iBAAJ,UAAY,kBAAK,kBAAS,kBAAK,CAAL,CAAT,EAAkB,kBAAK,CAAL,CAAlB,EAA2B,kBAAK,CAAL,CAA3B,EAAoC,kBAAK,CAAL,CAApC,C;;;;UAHA,U;UAJlB,WAgBuB,U;UAfvB,WAewC,S;UAdxC,sBAAoB,IAAK,c;UAEzB,eAAU,CAAV,QAYmD,IAZnD,Q;YACC,UC5EH,WDuFmB,ICvFnB,ED4EsB,IC5EtB,C;YD6EG,cAAM,eAAN,I;YAUkC,GATlC,CAAI,aAAJ,EAAI,qBAAJ,YAAY,kBAAK,kBAAS,kBAAK,GAAL,CAAT,EAAkB,kBAAK,GAAL,CAAlB,EAA2B,kBAAK,GAAL,CAA3B,EAAoC,kBAAK,GAAL,CAApC,C;;;;QAMjB,K;WAKA,E;QAAM,IAAI,YAAJ,C;UAdW,U;UAJlB,WAmBuB,U;UAlBvB,WAkBwC,S;UAjBxC,sBAAoB,IAAK,c;UAEzB,eAAU,CAAV,QAemD,IAfnD,Q;YACC,UC5EH,WD0FmB,IC1FnB,ED4EsB,IC5EtB,C;YD6EG,cAAM,eAAN,I;YAakC,GAZlC,CAAI,aAAJ,EAAI,qBAAJ,YAAY,kBAAK,kBAAS,kBAAK,GAAL,CAAT,EAAkB,kBAAK,GAAL,CAAlB,EAA2B,kBAAK,GAAL,CAA3B,EAAoC,kBAAK,GAAL,CAApC,C;;;;UAHA,U;UAJlB,WAqBuB,U;UApBvB,WAoBwC,S;UAnBxC,sBAAoB,IAAK,c;UAEzB,eAAU,CAAV,QAiBmD,IAjBnD,Q;YACC,UC5EH,WD4FmB,IC5FnB,ED4EsB,IC5EtB,C;YD6EG,cAAM,eAAN,I;YAekC,GAdlC,CAAI,aAAJ,EAAI,qBAAJ,YAAY,kBAAK,kBAAS,kBAAK,GAAL,CAAT,EAAkB,kBAAK,GAAL,CAAlB,EAA2B,kBAAK,GAAL,CAA3B,EAAoC,kBAAK,GAAL,CAApC,C;;;;QAWjB,K;WAKA,E;QAAM,IAAI,YAAJ,C;UAnBW,U;UAJlB,WAwBuB,U;UAvBvB,WAuBwC,S;UAtBxC,sBAAoB,IAAK,c;UAEzB,eAAU,CAAV,QAoBmD,IApBnD,Q;YACC,UC5EH,WD+FmB,IC/FnB,ED4EsB,IC5EtB,C;YD6EG,cAAM,eAAN,I;YAkBkC,GAjBlC,CAAI,aAAJ,EAAI,qBAAJ,YAAY,kBAAK,kBAAS,kBAAK,GAAL,CAAT,EAAkB,kBAAK,GAAL,CAAlB,EAA2B,kBAAK,GAAL,CAA3B,EAAoC,kBAAK,GAAL,CAApC,C;;;;UAHA,U;UAJlB,WA0BuB,U;UAzBvB,WAyBwC,S;UAxBxC,sBAAoB,IAAK,c;UAEzB,eAAU,CAAV,QAsBmD,IAtBnD,Q;YACC,UC5EH,WDiGmB,ICjGnB,ED4EsB,IC5EtB,C;YD6EG,cAAM,eAAN,I;YAoBkC,GAnBlC,CAAI,aAAJ,EAAI,qBAAJ,YAAY,kBAAK,kBAAS,kBAAK,GAAL,CAAT,EAAkB,kBAAK,GAAL,CAAlB,EAA2B,kBAAK,GAAL,CAA3B,EAAoC,kBAAK,GAAL,CAApC,C;;;;QAgBjB,K;cAKQ,MAAM,8BAAyB,qBAAkB,QAA3C,C;;EAEhB,C;;IAnB4F,4B;MAAA,eAAwB,I;IAApH,6K;EAmBA,C;;IAGC,UAAU,eAAS,IAAT,C;IACV,oBAAO,IAAP,EAAa,UAAb,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,IAAjC,EAAuC,YAAvC,C;IACA,OAAO,G;EACR,C;;IAJiC,0B;MAAA,aAAkB,C;IAAG,oB;MAAA,OAAY,IAAK,OAAL,GAAY,kBAAZ,I;IAA2B,4B;MAAA,eAAwB,I;WAArH,6I;EAIA,C;;IAGC,OAAO,aAAS,KAAT,EAAgB,MAAhB,EAAwB,oBAAO,IAAP,EAAa,UAAb,EAAyB,mBAAQ,MAAR,CAAzB,EAAyC,YAAzC,CAAxB,C;EACR,C;;IAFoE,0B;MAAA,aAAkB,C;IAAG,4B;MAAA,eAAwB,I;WAAjH,yK;EAEA,C;;IAGoB,sCAAZ,GAA0C,KAA9B,EAAoC,CAApC,EAA2C,QAA3C,C;IAAnB,OAAO,G;EACR,C;;IAF0D,0B;MAAA,aAAkB,C;IAAG,4B;MAAA,eAAwB,I;WAAvG,oJ;EAEA,C;;IAKmB,IACF,I;IAHhB,SAAS,Y;IACT,SAAS,S;IACT,aAAU,CAAV,MAAkB,IAAlB,M;MACC,QAAQ,OAAO,SAAP,EAAO,iBAAP,O;MACR,SAAS,kBAAK,kBAAK,cAAK,CAAL,CAAV,EAAmB,kBAAK,cAAK,CAAL,CAAxB,EAAiC,kBAAK,cAAK,CAAL,CAAtC,EAA+C,kBAAK,cAAK,CAAL,CAApD,C;cACH,S;aACL,E;UAAM,IAAI,YAAJ,C;YAAsB,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;;YAA4B,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;UAAxD,K;aACA,E;UAAM,IAAI,YAAJ,C;YAAsB,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;;YAA4B,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;UAAxD,K;aACA,E;UAAM,IAAI,YAAJ,C;YAAsB,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;;YAA4B,WAAJ,GAAI,EAAW,EAAX,EAAe,EAAf,C;UAAxD,K;gBACQ,MAAM,8BAAyB,qBAAkB,QAA3C,C;;MAEf,UAAM,kBAAN,I;;EAEF,C;;IAdgG,4B;MAAA,eAAwB,I;IAAxH,qL;EAcA,C;;IAGC,UAAU,cAAU,kBAAO,kBAAP,CAAV,C;IACV,oBAAO,MAAP,EAAe,YAAf,EAA6B,GAA7B,EAAkC,CAAlC,EAAqC,IAArC,EAA2C,YAA3C,C;IACA,OAAO,G;EACR,C;;IAJkC,4B;MAAA,eAAoB,C;IAAG,oB;MAAA,OAAY,MAAO,O;IAAM,4B;MAAA,eAAwB,I;WAA1G,qJ;EAIA,C;;;;;;;IExI8B,uBAAY,EAAZ,C;EAA/B,C;;IAIoB,IACF,IADE,EAEb,M;IAJL,SAAS,Y;IACT,SAAS,S;IACT,aAAU,CAAV,MAAkB,IAAlB,M;MACC,QAAQ,OAAO,SAAP,EAAO,iBAAP,O;MACR,IAAI,WAAJ,EAAI,mBAAJ,YAAyE,QAA7D,kBAAK,kBAAK,cAAK,CAAL,CAAV,EAAmB,kBAAK,cAAK,CAAL,CAAxB,EAAiC,kBAAK,cAAK,CAAL,CAAtC,EAA+C,kBAAK,cAAK,CAAL,CAApD,CAA6D,C;;EAE3E,C;;;;;;;ICR8B,uBAAY,EAAZ,C;EAA/B,C;;;;;;;ICA+B,uBAAY,EAAZ,C;EAA/B,C;;IAIoB,IACF,IADE,EAEb,M;IAJL,SAAS,Y;IACT,SAAS,S;IACT,aAAU,CAAV,MAAkB,IAAlB,M;MACC,QAAQ,OAAO,SAAP,EAAO,iBAAP,O;MACR,IAAI,WAAJ,EAAI,mBAAJ,YAAY,kBAAK,kBAAK,cAAK,CAAL,CAAV,EAAmB,kBAAK,cAAK,CAAL,CAAxB,EAAiC,kBAAK,cAAK,CAAL,CAAtC,EAA+C,kBAAK,cAAK,CAAL,CAApD,C;;EAEd,C;;;;;;;ICSA,sC;IATA,mB;MAAA,MAA0B,G;IAC1B,mB;MAAA,MAA0B,G;IAC1B,mB;MAAA,MAA0B,G;IAC1B,mB;MAAA,MAA0B,G;IAC1B,mB;MAAA,MAAuB,C;IACvB,mB;MAAA,MAAuB,C;IACvB,mB;MAAA,MAAuB,C;IACvB,mB;MAAA,MAAuB,C;IAPvB,gB;IACA,gB;IACA,gB;IACA,gB;IACA,gB;IACA,gB;IACA,gB;IACA,gB;IAsBA,eAA+B,I;IAE/B,mBAA6B,C;IAC7B,mBAA6B,C;EAjCL,C;;IAUxB,wC;IACC,gBAAe,oB;EADhB,C;;IAG4D,0BAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,C;EAAA,C;;IACjB,OAoKgF,mBAAkB,eApKnF,CAoKmF,CAAlB,EAAiC,eApK/F,CAoK+F,CAAjC,EAAgD,eApK3G,CAoK2G,CAAhD,EAA+D,eApKvH,CAoKuH,CAA/D,EAA8E,YApKnI,CAoKmI,CAA9E,EAA0F,YApK5I,CAoK4I,CAA1F,EAAsG,YApKrJ,CAoKqJ,CAAtG,EAAkH,YApK9J,CAoK8J,CAAlH,C;EApKhF,C;;;;;;;;IAJ3C,+C;MAAA,8B;;IAAA,wC;EAAA,C;;IAOsG,0BAC/F,YAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAD+F,EAE/F,YAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAF+F,EAG/F,YAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAH+F,EAI/F,YAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAJ+F,EAK/F,cAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAL+F,EAM/F,cAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAN+F,EAO/F,cAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAP+F,EAQ/F,cAAN,KAAM,EAAY,CAAE,GAAd,EAAkB,CAAE,GAApB,CAR+F,C;EAAA,C;;IAWjB,OAAiB,CAAjB,oBAAiB,4BAAkB,IAAlB,EAAwB,KAAxB,EAA+B,KAA/B,C;EAAjB,C;;IAQpF,IAD6B,IACzB,QAAJ,C;MAD6B,IAE5B,WAAQ,K;MAFoB,IAG5B,eAAY,kBAAK,eAHW,IAGD,MAAV,EAHW,IAGc,MAAzB,EAHW,IAG6B,MAAxC,EAHW,IAG4C,MAAvD,C;MAHW,IAI5B,eAJ4B,IAIhB,WAJgB,IAIR,MAAR,EAJgB,IAIH,MAAb,EAJgB,IAIE,MAAlB,EAJgB,IAIO,MAAvB,C;;IAJgB,W;EAAA,C;;IAQwB,OAAC,wBAAiB,CAAjB,KAAwB,CAAzB,GAAgC,wBAAiB,CAAjB,KAAwB,CAAxD,GAA+D,wBAAiB,CAAjB,KAAwB,EAAvF,GAA+F,wBAAiB,CAAjB,KAAwB,E;EAAvH,C;;IACf,OAAmB,MAAlB,OAAQ,KAAM,CAAd,KAAkB,EAAM,CAAN,EAAS,GAAT,C;EAAnB,C;;IACO,QAAC,IAAI,GAAJ,IAAD,IAAa,CAAb,I;EAAA,C;;;MAGrC,OAAA,sBAAgB,Y;IAAhB,C;;MAEP,aAAM,kBAAkB,mBAAH,CAAG,C;MACxB,aAAM,kBAAkB,mBAAH,CAAG,C;MACxB,aAAM,kBAAkB,mBAAH,CAAG,C;MACxB,aAAM,kBAAkB,mBAAH,CAAG,C;MACxB,eAAQ,I;IACT,C;;;;MAKC,OAAO,sBAAgB,Y;IACxB,C;;MAEC,aAAM,0BAAmB,kBAAK,kBAAS,CAAT,CAAxB,C;MACN,aAAM,0BAAmB,kBAAK,kBAAS,CAAT,CAAxB,C;MACN,aAAM,0BAAmB,kBAAK,kBAAS,CAAT,CAAxB,C;MACN,aAAM,0BAAmB,kBAAK,kBAAS,CAAT,CAAxB,C;MACN,eAAQ,I;IACT,C;;;;MAEsB,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MAEd,OAAI,U;IAAJ,C;;MAA8B,c;MAAoB,eAAQ,I;IAAlC,C;;;;MACxB,OAAI,U;IAAJ,C;;MAA8B,c;MAAoB,eAAQ,I;IAAlC,C;;;;MACxB,OAAI,U;IAAJ,C;;MAA8B,c;MAAoB,eAAQ,I;IAAlC,C;;;;MACxB,OAAI,U;IAAJ,C;;MAA8B,c;MAAoB,eAAQ,I;IAAlC,C;;;;MAE3B,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;;MACd,iB;IAAA,C;;MAAoB,c;MAAS,eAAQ,I;IAAvB,C;;;IAGjC,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACM,IACnB,W;IADmB,IAEnB,W;IAFmB,IAGnB,W;IAHmB,IAInB,W;IAJmB,IAKnB,WAAQ,I;IALW,W;EAAA,C;;IASnB,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACS,IACnB,W;IADmB,IAEnB,W;IAFmB,IAGnB,W;IAHmB,IAInB,W;IAJmB,IAKnB,WAAQ,I;IALW,W;EAAA,C;;IASnB,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAa,G;IACb,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACV,kB;MAAA,KAAU,C;IACS,IACnB,W;IADmB,IAEnB,W;IAFmB,IAGnB,W;IAHmB,IAInB,W;IAJmB,IAKnB,W;IALmB,IAMnB,W;IANmB,IAOnB,W;IAPmB,IAQnB,W;IARmB,IASnB,WAAQ,I;IATW,W;EAAA,C;;IAanB,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IAEb,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IACb,aAAW,CAAE,M;IAEb,eAAa,CAAE,Q;IACf,mBAAiB,CAAE,Y;IACnB,mBAAiB,CAAE,Y;IAEnB,OAAO,I;EACR,C;;IAEwD,OAAA,IAAK,eAC5D,CAAE,GAAF,GAAO,CAAE,GADmD,EAE5D,CAAE,GAAF,GAAO,CAAE,GAFmD,EAG5D,CAAE,GAAF,GAAO,CAAE,GAHmD,EAI5D,CAAE,GAAF,GAAO,CAAE,GAJmD,EAK5D,CAAE,GAAF,GAAO,CAAE,GAAT,IAL4D,EAM5D,CAAE,GAAF,GAAO,CAAE,GAAT,IAN4D,EAO5D,CAAE,GAAF,GAAO,CAAE,GAAT,IAP4D,EAQ5D,CAAE,GAAF,GAAO,CAAE,GAAT,IAR4D,C;EAAL,C;;IAWtB,6BAAuB,YAAH,OAAG,CAAvB,UAAsC,YAAH,OAAG,CAAtC,UAAqD,YAAH,OAAG,CAArD,UAAoE,YAAH,OAAG,CAApE,WAAgF,OAAhF,UAAqF,OAArF,UAA0F,OAA1F,UAA+F,OAA/F,O;EAAA,C;;IAEN,OAAC,YAAM,GAAP,IAAgB,YAAM,GAAtB,IAA+B,YAAM,GAArC,IAA8C,YAAM,GAApD,IAA6D,YAAM,CAAnE,IAA0E,YAAM,CAAhF,IAAuF,YAAM,CAA7F,IAAoG,YAAM,C;EAA1G,C;;IAEE,OAAC,YAAM,GAAP,IAAgB,YAAM,GAAtB,IAA+B,YAAM,GAArC,IAA8C,YAAM,CAApD,IAA2D,YAAM,CAAjE,IAAwE,YAAM,CAA9E,IAAqF,YAAM,C;EAA3F,C;;IAER,0BAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,C;EAAA,C;;IAGrB,QAA2C,YAAjC,kBAAK,kBAAS,KAAT,CAAL,GAAuB,OAAxB,GAA8B,OAAI,C;IAC3C,QAA2C,YAAjC,kBAAK,kBAAS,KAAT,CAAL,GAAuB,OAAxB,GAA8B,OAAI,C;IAC3C,QAA2C,YAAjC,kBAAK,kBAAS,KAAT,CAAL,GAAuB,OAAxB,GAA8B,OAAI,C;IAC3C,QAA2C,YAAjC,kBAAK,kBAAS,KAAT,CAAL,GAAuB,OAAxB,GAA8B,OAAI,C;IAC3C,OAAO,kBAAK,cAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;EACb,C;;;;;;;IA9KA,iB;EADD,C;;IAEC,iB;EAFD,C;;IAGC,iB;EAHD,C;;IAIC,iB;EAJD,C;;IAKC,iB;EALD,C;;IAMC,iB;EAND,C;;IAOC,iB;EAPD,C;;IAQC,iB;EARD,C;;IAAA,0BACC,iCADD,EAEC,iCAFD,EAGC,iCAHD,EAIC,iCAJD,EAKC,iCALD,EAMC,iCAND,EAOC,iCAPD,EAQC,iCARD,C;EAAA,C;;IAAA,c;IACC,sD;IACA,sD;IACA,sD;IACA,sD;IACA,sD;IACA,sD;IACA,sD;IACA,sD;IARD,a;EAAA,C;;IAAA,4IACC,sCADD,IAEC,sCAFD,IAGC,sCAHD,IAIC,sCAJD,IAKC,sCALD,IAMC,sCAND,IAOC,sCAPD,IAQC,sCARD,I;EAAA,C;wGAkLA,yB;IAAA,0C;IAAA,oC;IAAA,iE;IAAA,iD;MAA4H,+BAAkB,eAAH,EAAG,CAAlB,EAAiC,eAAH,EAAG,CAAjC,EAAgD,eAAH,EAAG,CAAhD,EAA+D,eAAH,EAAG,CAA/D,EAA8E,YAAH,EAAG,CAA9E,EAA0F,YAAH,EAAG,CAA1F,EAAsG,YAAH,EAAG,CAAtG,EAAkH,YAAH,EAAG,CAAlH,C;IAAA,C;GAA5H,C;;ICrLA,sB;IACC,aACY,kBAAK,kBAAS,GAAT,EAAe,GAAf,EAAqB,GAArB,EAA2B,GAA3B,C;IACjB,aACY,kBAAK,kBAAS,CAAT,EAAe,CAAf,EAAqB,CAArB,EAA2B,GAA3B,C;IACjB,WACU,kBAAK,kBAAS,GAAT,EAAe,CAAf,EAAqB,CAArB,EAA2B,GAA3B,C;IACf,aACY,kBAAK,kBAAS,CAAT,EAAe,GAAf,EAAqB,CAArB,EAA2B,GAA3B,C;IACjB,YACW,kBAAK,kBAAS,CAAT,EAAe,CAAf,EAAqB,GAArB,EAA2B,GAA3B,C;IAEhB,yBACwB,kBAAK,kBAAS,CAAT,EAAe,CAAf,EAAqB,CAArB,EAA2B,CAA3B,C;IAC7B,yBACwB,kBAAK,kBAAS,CAAT,EAAe,CAAf,EAAqB,CAArB,EAA2B,CAA3B,C;EAf9B,C;;IAkBE,IAAM,WAAF,CAAE,EAAW,GAAX,CAAN,C;MACC,SAAW,OAAF,CAAE,EAAO,CAAP,C;MACX,QAAY,EAAG,OAAH,IAAa,CAAjB,GAAoB,CAApB,GAA2B,C;MACnC,YAAY,EAAG,OAAH,GAAY,CAAZ,I;MACZ,YAAgB,MAAK,CAAT,GAAY,MAAM,IAAlB,GAA4B,MAAM,K;MAC9C,SAA6B,MAAjB,SAAH,EAAG,EAAO,IAAI,CAAJ,IAAP,EAAc,CAAd,CAAiB,EAAM,EAAN,CAApB,GAAgC,K;MACzC,SAA6B,MAAjB,SAAH,EAAG,EAAO,IAAI,CAAJ,IAAP,EAAc,CAAd,CAAiB,EAAM,EAAN,CAApB,GAAgC,K;MACzC,SAA6B,MAAjB,SAAH,EAAG,EAAO,IAAI,CAAJ,IAAP,EAAc,CAAd,CAAiB,EAAM,EAAN,CAApB,GAAgC,K;MACzC,SAAa,SAAS,CAAb,GAAoC,MAAjB,SAAH,EAAG,EAAO,IAAI,CAAJ,IAAP,EAAc,CAAd,CAAiB,EAAM,EAAN,CAApB,GAAgC,KAAhD,GAA2D,G;MACpE,OAAO,kBAAK,eAAM,EAAN,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,C;;;MAEZ,UAAU,uBAAoB,CAA9B,C;;EAEF,C;;;;;;;;IA/BD,6B;MAAA,Y;;IAAA,sB;EAAA,C;;ICDA,2B;IACC,oBAAmB,OAClB,YAAW,kCAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,GAAd,CAAX,CADkB,EAElB,YAAW,kCAAK,GAAL,EAAW,GAAX,EAAiB,GAAjB,EAAuB,GAAvB,CAAX,CAFkB,EAGlB,UAAS,kCAAK,GAAL,EAAW,CAAX,EAAc,CAAd,EAAiB,GAAjB,CAAT,CAHkB,EAIlB,YAAW,kCAAK,CAAL,EAAQ,GAAR,EAAc,CAAd,EAAiB,GAAjB,CAAX,CAJkB,EAKlB,WAAU,kCAAK,CAAL,EAAQ,CAAR,EAAW,GAAX,EAAiB,GAAjB,CAAV,CALkB,EAMlB,WAAU,kCAAK,CAAL,EAAQ,GAAR,EAAc,CAAd,EAAiB,GAAjB,CAAV,CANkB,EAOlB,aAAY,kCAAK,GAAL,EAAW,GAAX,EAAiB,CAAjB,EAAuB,GAAvB,CAAZ,CAPkB,EAQlB,WAAU,kCAAK,GAAL,EAAW,GAAX,EAAiB,GAAjB,EAAuB,GAAvB,CAAV,CARkB,E;EADpB,C;;IAY+B,yB;MAAA,YAAe,oBAAO,I;IAOxC,IAmBH,I;IAzBR,IAAQ,WAAJ,GAAI,EAAW,GAAX,CAAR,C;MACC,UAAc,OAAJ,GAAI,EAAO,CAAP,C;MACd,K;MACA,K;MACA,K;MACA,K;cACM,GAAI,Q;aACT,C;UACC,IAAI,CAAkB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,CAAjB,GAA+B,GAA/B,IAAD,IAAuC,EAAvC,I;UACJ,IAAI,CAAkB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,CAAjB,GAA+B,GAA/B,IAAD,IAAuC,EAAvC,I;UACJ,IAAI,CAAkB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,CAAjB,GAA+B,GAA/B,IAAD,IAAuC,EAAvC,I;UACJ,IAAI,G;UAJL,K;aAMA,C;UACC,IAAqB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,C;UACrB,IAAqB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,C;UACrB,IAAqB,MAAb,SAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,CAAa,EAAM,EAAN,C;UACrB,IAAI,G;UAJL,K;gBAOC,IAAI,C;UAAG,IAAI,C;UAAG,IAAI,C;UAAG,IAAI,G;UAd3B,K;;MAiBA,OAAO,kBAAK,cAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;;;MAEZ,OAAO,oCAAa,GCnCsC,cDmCnD,oBAAmC,S;;EAE5C,C;;IAE+B,0BAAU,kBAAK,cAAK,KAAL,CAAf,IAA6B,GAA7B,YAAmC,kBAAK,cAAK,KAAL,CAAxC,IAAsD,GAAtD,YAA4D,kBAAK,cAAK,KAAL,CAAjE,IAA+E,GAA/E,YAAqF,kBAAK,eAAM,KAAN,CAA1F,IAAyG,G;EAAzG,C;;IACM,OAAgB,OAAhB,eAAgB,GAAO,kBAAK,cAAK,KAAL,CAAZ,EAAyB,kBAAK,cAAK,KAAL,CAA9B,EAA2C,kBAAK,cAAK,KAAL,CAAhD,E;EAAhB,C;;;;;;;;IA3CtC,kC;MAAA,iB;;IAAA,2B;EAAA,C;;IEHkD,uBAAY,CAAZ,C;IAAzB,sB;EAAD,C;;IACU,OAAA,kBAAK,kBAAS,aAAQ,CAAR,CAAT,C;EAAL,C;;IACA,OAAA,kBAAK,kBAAS,aAAQ,CAAR,CAAT,C;EAAL,C;;IACA,OAAA,kBAAK,kBAAS,aAAQ,CAAR,CAAT,C;EAAL,C;;IACA,OAAA,kBAAK,kBAAS,aAAQ,CAAR,CAAT,C;EAAL,C;;IhCkBgB,MAAM,6BAAoB,sCgCfrE,oDhCeiD,C;EgCdvD,C;;;;;;;ICLD,mB;IAAa,wB;EAAb,C;;IACkC,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACA,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACA,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IACA,U;EAAA,C;;IAEwB,OAAkC,OAAhB,OAAhB,OAAF,CAAE,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAgB,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAgB,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd,C;EAAlC,C;;;;;;;;IAN1D,0B;MAAA,S;;IAAA,mB;EAAA,C;;IASA,mB;IAAa,wB;EAAb,C;;IACkC,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IACA,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACA,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACA,U;EAAA,C;;IAEwB,OAAmC,OAAhB,OAAjB,OAAF,CAAE,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd,CAAiB,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAgB,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,C;EAAnC,C;;;;;;;;IAN1D,0B;MAAA,S;;IAAA,mB;EAAA,C;;ICRA,oB;IAAc,wB;EAAd,C;;IAMkC,6BAAS,CAAT,C;EAAA,C;;IACA,6BAAS,CAAT,C;EAAA,C;;IACA,6BAAS,CAAT,C;EAAA,C;;IACA,6BAAS,CAAT,C;EAAA,C;;IAEmB,OAAE,mCAAY,mBAAU,CAAV,CAAb,IAA+B,CAAhC,GAAwC,mCAAY,mBAAU,CAAV,CAAb,IAA+B,CAAtE,GAA8E,mCAAY,mBAAU,CAAV,CAAb,IAA+B,EAA5G,GAAqH,mCAAY,mBAAU,CAAV,CAAb,IAA+B,E;EAAnJ,C;;IAGxB,OAAC,MAAO,CAAR,GAAe,G;EAAf,C;;IAGA,OAAC,MAAO,CAAR,GAAe,G;EAAf,C;;IAGA,OAAC,MAAO,EAAR,GAAgB,G;EAAhB,C;;IAGA,OAAC,MAAO,EAAR,GAAgB,G;EAAhB,C;;IAGG,QAAE,MAAO,CAAa,GAAN,GAAhB,IAAkC,G;EAAlC,C;;IAGA,QAAE,MAAO,CAAa,GAAN,GAAhB,IAAkC,G;EAAlC,C;;IAGA,QAAE,MAAO,EAAc,GAAN,GAAjB,IAAmC,G;EAAnC,C;;IAGA,QAAE,MAAO,EAAc,GAAN,GAAjB,IAAmC,G;EAAnC,C;;IAGC,QAAE,MAAO,CAAa,GAAN,GAAhB,IAAmC,G;EAAnC,C;;IAGA,QAAE,MAAO,CAAa,GAAN,GAAhB,IAAmC,G;EAAnC,C;;IAGA,QAAE,MAAO,EAAc,GAAN,GAAjB,IAAoC,G;EAApC,C;;IAGA,QAAE,MAAO,EAAc,GAAN,GAAjB,IAAoC,G;EAApC,C;;IAKN,WAAM,Q;EAAN,C;;IAIW,oCAAgB,CAAhB,C;EAAA,C;;IAGH,OAAoB,OAApB,mBAAoB,GAAO,sBAAS,CAAT,CAAP,EAAoB,sBAAS,CAAT,CAApB,EAAiC,sBAAS,CAAT,CAAjC,EAA8C,sBAAS,CAAT,CAA9C,E;EAApB,C;;IAGA,iBAAQ,sBAAS,CAAT,CAAR,UAAwB,sBAAS,CAAT,CAAxB,UAAwC,sBAAS,CAAT,CAAxC,UAAwD,uBAAU,CAAV,CAAxD,M;EAAA,C;;IAGH,oCAAgB,CAAhB,C;EAAA,C;;IAI9B,SAAS,sBAAS,CAAT,C;IACT,SAAY,EAAH,GAAgB,K;IACzB,OAAO,sBAA4B,YAAlB,sBAAS,CAAT,IAAc,EAAI,CAA5B,EAAwD,YAAlB,sBAAS,CAAT,IAAc,EAAI,CAAxD,EAAoF,YAAlB,sBAAS,CAAT,IAAc,EAAI,CAApF,EAA6F,EAA7F,C;EACR,C;;IAIC,QAAQ,CAAC,MAAO,EAAR,IAAc,CAAd,I;IACR,SAAW,YAAC,IAAM,QAAP,EAAqB,CAArB,CAAD,KAA8B,CAA/B,GAAsC,Q;IAC/C,QAAU,YAAC,IAAM,KAAP,EAAqB,CAArB,CAAD,KAA8B,CAA/B,GAAsC,K;IAC9C,OAAQ,IAAiB,CAAX,QAAP,GAA4B,EAA5B,GAAkC,C;EAC1C,C;;IAUkD,OAAA,kBAAK,cAAK,sBAAS,CAAT,CAAL,EAAkB,sBAAS,CAAT,CAAlB,EAA+B,sBAAS,CAAT,CAA/B,EAAkE,YAArB,sBAAS,CAAT,IAAc,KAAO,CAAlE,C;EAAL,C;;IAGjB,sCAAkB,CAAlB,C;EAAA,C;;IAIhC,YAAY,mBAAM,CAAN,C;IACZ,IAAI,UAAS,GAAb,C;MACC,OAAO,oBAAO,kB;;;MAEd,aAAa,MAAM,K;MACnB,OAAO,kBAA4B,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAA5B,EAA4D,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAA5D,EAA4F,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAA5F,EAAqG,sBAAS,CAAT,CAArG,C;;EAET,C;;IAEuB,OAAI,YAAO,GAAX,GAAgB,GAAhB,GAAyB,S;EAAzB,C;;IACF,OAAI,YAAO,GAAX,GAAgB,GAAhB,GAAyB,S;EAAzB,C;;IAIpB,QAAQ,MAAO,E;IACf,YAAc,CAAF,GAAe,K;IAC3B,IAAI,UAAS,GAAb,C;MAAkB,OAAO,C;IACzB,aAAa,MAAM,K;IACnB,QAAuC,sBAAR,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAAQ,C;IACvC,QAAuC,sBAAR,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAAQ,C;IACvC,QAAuC,sBAAR,YAAtB,sBAAS,CAAT,IAAc,MAAQ,CAAQ,C;IACvC,OAAO,sBAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,C;EACR,C;;IAIC,QAAS,MAAO,E;IAChB,IAAI,MAAK,CAAT,C;MAAY,OAAO,C;IACnB,QAA4C,MAAnC,CAAC,CAAE,MAAO,CAAR,GAAe,GAAhB,IAAwB,GAAxB,IAAD,IAAgC,CAAhC,IAAmC,EAAM,CAAN,EAAS,GAAT,C;IAC5C,QAA4C,MAAnC,CAAC,CAAE,MAAO,CAAR,GAAe,GAAhB,IAAwB,GAAxB,IAAD,IAAgC,CAAhC,IAAmC,EAAM,CAAN,EAAS,GAAT,C;IAC5C,QAA6C,MAApC,CAAC,CAAE,MAAO,EAAR,GAAgB,GAAjB,IAAyB,GAAzB,IAAD,IAAiC,CAAjC,IAAoC,EAAM,CAAN,EAAS,GAAT,C;IAC7C,OAAO,sBAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,C;EACR,C;;IAIC,QAAS,MAAO,E;IAChB,SAAS,IAAI,CAAJ,I;IACT,QAAQ,CAAC,CAAC,CAAE,MAAO,CAAR,GAAe,GAAhB,KAA0B,CAA3B,IAAgC,EAAhC,IAAD,IAAyC,G;IACjD,QAAQ,CAAC,CAAC,CAAE,MAAO,CAAR,GAAe,GAAhB,KAA0B,CAA3B,IAAgC,EAAhC,IAAD,IAAyC,G;IACjD,QAAQ,CAAC,CAAC,CAAE,MAAO,EAAR,GAAgB,GAAjB,KAA2B,CAA5B,IAAiC,EAAjC,IAAD,IAA0C,G;IAClD,OAAO,sBAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,C;EACR,C;;IAIC,QAAQ,CAAC,MAAO,EAAR,IAAc,CAAd,I;IACR,QAAQ,CAAC,CAAC,CAAC,IAAM,GAAP,KAAqB,CAAtB,IAA2B,CAA3B,IAAD,IAAmC,G;IAC3C,QAAQ,CAAC,CAAC,CAAC,IAAM,KAAP,KAAqB,CAAtB,IAA2B,CAA3B,IAAD,IAAmC,K;IAC3C,QAAQ,CAAC,CAAC,CAAC,IAAM,QAAP,KAAqB,CAAtB,IAA2B,CAA3B,IAAD,IAAmC,Q;IAC3C,OAAQ,IAAiB,CAAX,QAAP,GAA4B,CAA5B,GAAiC,CAAjC,GAAsC,C;EAC9C,C;;IAG+C,OAAC,KAAM,CAAP,GAAc,KAAM,CAApB,GAA2B,KAAM,EAAjC,GAAyC,KAAM,E;EAA/C,C;;IAGc,OAAY,YAAV,IAAI,GAAM,CAAX,IAAuB,CAAxB,GAA0C,YAAV,IAAI,GAAM,CAAX,IAAuB,CAAtD,GAAwE,YAAV,IAAI,GAAM,CAAX,IAAuB,EAApF,GAAuG,YAAV,IAAI,GAAM,CAAX,IAAuB,E;EAAnH,C;;IAGtB,OAAC,MAAQ,QAAT,GAAuB,KAAM,E;EAA7B,C;;IAGqB,OAAoC,YAAnC,MAAM,MAAM,MAAZ,IAAsB,KAAK,MAAQ,CAApC,GAAgD,G;EAAhD,C;;IAI3D,SAAS,MAAM,SAAN,I;IACT,OAAO,CACH,YAAC,KAAO,QAAR,EAAoB,EAApB,CAAF,GAA6B,YAAC,KAAO,QAAR,EAAoB,SAApB,CAA7B,GAA4E,CAAX,6BAAW,SAA7E,GAEI,YAAC,KAAO,KAAR,EAAoB,EAApB,CAAF,GAA6B,YAAC,KAAO,KAAR,EAAoB,SAApB,CAA7B,GAAiE,QAH7D,MAGgF,C;EACxF,C;;IAIgD,6BAAS,EAAT,EAAa,EAAb,EAAiB,MAAjB,C;EAAA,C;;IAIG,6BAAS,EAAT,EAAa,EAAb,EAAiB,MAAjB,C;EAAA,C;;IAGG,6BAAS,EAAT,EAAa,EAAb,EAAgC,YAAd,SAAS,GAAK,CAAhC,C;EAAA,C;;IAIrD,UAAU,sBAAS,KAAO,QAAhB,EAA0B,KAAO,QAAjC,EAA0D,YAAd,SAAS,GAAK,CAA1D,C;IACV,QAAQ,4BAAe,sBAAS,EAAT,CAAf,EAA6B,sBAAS,EAAT,CAA7B,EAA2C,MAA3C,C;IACR,OAAO,uBAAU,GAAV,EAAe,CAAf,C;EACR,C;;IAEiE,yBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;EAAA,C;;IAGxC,OAAE,KAAM,EAAP,GAAe,QAAhB,GAAiC,KAAM,EAAP,GAAe,GAA/C,GAA+D,IAAiB,CAAX,6BAAW,S;EAAhF,C;;IAEoB,OAA0C,YAAzC,mCAAY,kBAAW,CAAX,CAAZ,GAAoC,GAAK,C;EAA1C,C;;IACD,OAAgC,YAA/B,mCAAY,kBAAS,CAAT,CAAZ,GAA0B,GAAK,C;EAAhC,C;;IAGiB,6BAAS,WAAI,CAAJ,CAAT,EAAiB,WAAI,CAAJ,CAAjB,EAAyB,WAAI,CAAJ,CAAzB,EAAiC,WAAI,CAAJ,CAAjC,C;EAAA,C;;IAGJ,6BAAS,WAAI,CAAJ,CAAT,EAAiB,WAAI,CAAJ,CAAjB,EAAyB,WAAI,CAAJ,CAAzB,EAAiC,WAAI,CAAJ,CAAjC,C;EAAA,C;;IAGpB,8BAAU,GAAV,EAAe,WAAI,CAAJ,CAAf,C;EAAA,C;;IAKvB,IAAN,I;IADP,WAAW,kBAAK,kBAAS,GAAT,C;YACH,K;WACZ,C;QAAS,U;QAAT,K;WACA,G;QAAQ,U;QAAR,K;cAEM,OAAL,kBAAK,mBACJ,sBAAS,GAAT,EAAc,GAAd,EAAmB,OAAO,CAAP,IAAnB,CADI,EAEJ,oDAAQ,kBAAK,kBAAS,GAAT,CAAL,GAAqB,IAArB,IAAR,CAFI,C;QAJA,K;;IAAP,W;EAUD,C;;IAIC,OAAO,kBAAK,cACV,YAAA,kBAAK,kBAAS,EAAT,CAAL,EAAoB,kBAAK,kBAAS,EAAT,CAAzB,CAAD,GAA0C,GAA1C,IADW,EAEV,YAAA,kBAAK,kBAAS,EAAT,CAAL,EAAoB,kBAAK,kBAAS,EAAT,CAAzB,CAAD,GAA0C,GAA1C,IAFW,EAGV,YAAA,kBAAK,kBAAS,EAAT,CAAL,EAAoB,kBAAK,kBAAS,EAAT,CAAzB,CAAD,GAA0C,GAA1C,IAHW,EAIV,YAAA,kBAAK,kBAAS,EAAT,CAAL,EAAoB,kBAAK,kBAAS,EAAT,CAAzB,CAAD,GAA0C,GAA1C,IAJW,C;EAMb,C;;IAgBC,SAAU,CAAE,KAAO,QAAT,KAAsB,KAAO,QAA7B,MAA6C,CAA9C,GAAqD,Q;IAC9D,QAAS,CAAE,KAAO,KAAT,KAAsB,KAAO,KAA7B,MAA6C,CAA9C,GAAqD,K;IAC7D,QAAS,CAAE,OAAQ,EAAV,KAAiB,OAAQ,EAAzB,MAAmC,CAApC,GAA2C,G;IACnD,OAAQ,KAAM,EAAP,GAAc,EAAd,GAAoB,C;EAC5B,C;;IAIC,SAAU,CAAE,KAAO,QAAT,KAAsB,KAAO,QAA7B,KAA0C,KAAO,QAAjD,KAA8D,KAAO,QAArE,MAAqF,CAAtF,GAA6F,Q;IACtG,QAAS,CAAE,KAAO,KAAT,KAAsB,KAAO,KAA7B,KAA0C,KAAO,KAAjD,KAA8D,KAAO,KAArE,MAAqF,CAAtF,GAA6F,K;IACrG,QAAS,CAAE,OAAQ,EAAV,KAAiB,OAAQ,EAAzB,KAAgC,OAAQ,EAAxC,KAA+C,OAAQ,EAAvD,MAAiE,CAAlE,GAAyE,G;IACjF,OAAQ,KAAM,EAAP,GAAc,EAAd,GAAoB,C;EAC5B,C;;;;;;;;IAjQD,2B;MAAA,U;;IAAA,oB;EAAA,C;;ICJA,yB;IAAmB,wB;IAAiB,2BAAmC,0BAC5D,CAD4D,EACjD,CADiD,EAE5D,CAF4D,EAEjD,CAFiD,EAG5D,CAH4D,EAGjD,CAHiD,EAI5D,EAJ4D,EAIhD,CAJgD,C;EAAvE,C;;IAAoC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAApC,gC;MAAA,e;;IAAA,yB;EAAA,C;;IAOA,yB;IAAmB,wB;IAAiB,2BAAmC,0BAC5D,CAD4D,EACjD,CADiD,EAE5D,CAF4D,EAEjD,CAFiD,EAG5D,EAH4D,EAGhD,CAHgD,EAI5D,EAJ4D,EAIhD,CAJgD,C;EAAvE,C;;IAAoC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAApC,gC;MAAA,e;;IAAA,yB;EAAA,C;;IAOA,uB;IAAiB,wB;IAAiB,2BAAmC,0BAC1D,CAD0D,EAC/C,CAD+C,EAE1D,CAF0D,EAE/C,CAF+C,EAG1D,EAH0D,EAG9C,CAH8C,EAI1D,EAJ0D,EAI9C,CAJ8C,C;EAArE,C;;IAAkC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAAlC,8B;MAAA,a;;IAAA,uB;EAAA,C;;IAOA,uB;IAAiB,wB;IAAiB,2BAAmC,0BAC1D,CAD0D,EAC/C,CAD+C,EAE1D,CAF0D,EAE/C,CAF+C,EAG1D,EAH0D,EAG9C,CAH8C,EAI1D,EAJ0D,EAI9C,CAJ8C,C;EAArE,C;;IAAkC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAAlC,8B;MAAA,a;;IAAA,uB;EAAA,C;;IASA,yB;IAAmB,wB;IAAiB,2BAAmC,0BAG5D,CAH4D,EAGjD,CAHiD,EAE5D,CAF4D,EAEjD,CAFiD,EAC5D,CAD4D,EACjD,CADiD,EAI5D,EAJ4D,EAIhD,CAJgD,C;EAAvE,C;;IAAoC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAApC,gC;MAAA,e;;IAAA,yB;EAAA,C;;IAOA,uB;IAAiB,wB;IAAiB,2BAAmC,0BAG1D,EAH0D,EAG9C,CAH8C,EAE1D,CAF0D,EAE/C,CAF+C,EAC1D,CAD0D,EAC/C,CAD+C,EAI1D,EAJ0D,EAI9C,CAJ8C,C;EAArE,C;;IAAkC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAAlC,8B;MAAA,a;;IAAA,uB;EAAA,C;;IAOA,uB;IAAiB,wB;IAAiB,2BAAmC,0BAG1D,EAH0D,EAG9C,CAH8C,EAE1D,CAF0D,EAE/C,CAF+C,EAC1D,CAD0D,EAC/C,CAD+C,EAI1D,EAJ0D,EAI9C,CAJ8C,C;EAArE,C;;IAAkC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAAlC,8B;MAAA,a;;IAAA,uB;EAAA,C;;IAOA,yB;IAAmB,wB;IAAiB,2BAAmC,0BAG5D,EAH4D,EAGhD,CAHgD,EAE5D,CAF4D,EAEjD,CAFiD,EAC5D,CAD4D,EACjD,CADiD,EAI5D,EAJ4D,EAIhD,CAJgD,C;EAAvE,C;;IAAoC,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,+C;EAAA,C;;IAAA,wD;EAAA,C;;;;;;;;IAApC,gC;MAAA,e;;IAAA,yB;EAAA,C;;IChDC,U;IACA,U;IACA,U;IACA,U;EAJU,C;;IAWT,SAAS,C;IACT,SAAS,C;IACT,SAAS,C;IACT,SAAS,C;EACV,C;;IAGC,SAAA,IAAK,EAAL,GAAU,C;IACV,SAAA,IAAK,EAAL,GAAU,C;IACV,SAAA,IAAK,EAAL,GAAU,C;IACV,SAAA,IAAK,EAAL,GAAU,C;EACX,C;;IAEoB,iBAAI,CAAE,EAAN,EAAS,CAAE,EAAX,EAAc,CAAE,EAAhB,EAAmB,CAAE,EAArB,C;EAAA,C;;;;;;;IAlBpB,+C;IAAwB,kBAAK,CAAE,EAAP,EAAU,CAAE,EAAZ,EAAe,CAAE,EAAjB,EAAoB,CAAE,EAAtB,C;IAAxB,Y;EAAA,C;;IACA,+C;IAAsB,kBAAK,kBAAK,eAAM,CAAN,CAAV,EAAoB,kBAAK,eAAM,CAAN,CAAzB,EAAmC,kBAAK,eAAM,CAAN,CAAxC,EAAkD,kBAAK,eAAM,CAAN,CAAvD,C;IAAtB,Y;EAAA,C;;IACA,+C;IAAgB,kBAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,C;IAAhB,Y;EAAA,C;;ICPA,kB;MAAA,KAAwB,G;IACxB,kB;MAAA,KAAwB,G;IACxB,kB;MAAA,KAAwB,G;IACxB,kB;MAAA,KAAwB,G;IAHxB,c;IACA,c;IACA,c;IACA,c;IAEA,eAAoB,I;IAgBpB,eAAyB,E;EAtBf,C;;;MAQkD,gB;IAAA,C;;MAA/B,a;MAAQ,kB;IAAd,C;;;;MACqC,gB;IAAA,C;;MAA/B,a;MAAQ,kB;IAAd,C;;;;MACqC,gB;IAAA,C;;MAA/B,a;MAAQ,kB;IAAd,C;;;;MACqC,gB;IAAA,C;;MAA/B,a;MAAQ,kB;IAAd,C;;;;MAEiD,OAAG,S;IAAH,C;;MAAzC,a;MAAkB,kB;IAAxB,C;;;;MAC+C,OAAG,S;IAAH,C;;MAAzC,a;MAAkB,kB;IAAxB,C;;;;MAC+C,OAAG,S;IAAH,C;;MAAzC,a;MAAkB,kB;IAAxB,C;;;;MAC+C,OAAG,S;IAAH,C;;MAAzC,a;MAAkB,kB;IAAxB,C;;;IAGxB,eAAQ,I;EACT,C;;;MAIC,IAAI,YAAJ,C;QACC,eAAQ,K;QACR,eAAQ,kBAAK,mBAAU,SAAV,EAAc,SAAd,EAAkB,SAAlB,EAAsB,SAAtB,C;;MAEd,OAAO,Y;IACR,C;;;IAGC,YAAU,C;IACV,YAAU,C;IACV,YAAU,C;IACV,YAAU,C;IACV,kB;EACD,C;;IAE4B,mBAAM,IAAK,EAAX,EAAc,IAAK,EAAnB,EAAsB,IAAK,EAA3B,EAA8B,IAAK,EAAnC,C;EAAA,C;;IACK,2BAAc,IAAK,EAAnB,EAAsB,IAAK,EAA3B,EAA8B,IAAK,EAAnC,EAAsC,IAAK,EAA3C,C;EAAA,C;;IAC2B,mBAAM,IAAK,EAAL,GAAS,CAAf,EAAkB,IAAK,EAAL,GAAS,CAA3B,EAA8B,IAAK,EAAL,GAAS,CAAvC,EAA0C,IAAK,EAAL,GAAS,CAAnD,C;EAAA,C;;IAExC,OAAA,kBAAK,kBAAmB,YAAT,SAAI,GAAK,CAAV,GAAsB,GAA/B,EAA+C,YAAT,SAAI,GAAK,CAAV,GAAsB,GAA3D,EAA2E,YAAT,SAAI,GAAK,CAAV,GAAsB,GAAvF,EAAuG,YAAT,SAAI,GAAK,CAAV,GAAsB,GAAnH,C;EAAL,C;;IAEE,mBAAM,GAAN,EAAU,GAAV,EAAc,GAAd,EAAkB,GAAlB,C;EAAA,C;;IAEY,kBAAW,cAAF,MAAE,CAAX,UAAyB,cAAF,MAAE,CAAzB,UAAuC,cAAF,MAAE,CAAvC,UAAqD,cAAF,MAAE,CAArD,M;EAAA,C;;;;;;sFAGnC,yB;IAAA,0C;IAAA,+C;IAAA,6B;MAA+D,sBAAQ,eAAF,CAAE,CAAR,EAAqB,eAAF,CAAE,CAArB,EAAkC,eAAF,CAAE,CAAlC,EAA+C,eAAF,CAAE,CAA/C,C;IAAA,C;GAA/D,C;;ICjDA,qB;IACe,wB;EADf,C;;IAEyB,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACC,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IACA,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IAEQ,yBAAK,CAAL,C;EAAA,C;;IACA,0BAAM,CAAN,C;EAAA,C;;IACA,0BAAM,CAAN,C;EAAA,C;;IACA,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IAEwB,OAAA,kBAAK,cAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;EAAL,C;;IAGjB,6DAAwD,YAA7C,IAAK,QAAQ,CAAb,GAAmB,QAAQ,CAA3B,GAAiC,QAAQ,CAAI,CAAxD,C;EAAA,C;;IAGC,6DAA8D,YAAnD,MAAO,WAAW,CAAlB,GAAwB,WAAW,CAAnC,GAAyC,MAAM,CAAI,CAA9D,C;EAAA,C;;IAGA,6DAA8D,YAAnD,MAAO,MAAM,CAAb,GAAmB,WAAW,CAA9B,GAAoC,WAAW,CAAI,CAA9D,C;EAAA,C;;IAIC,6DAAmC,YAAxB,IAAI,SAAS,KAAK,GAAL,IAAT,CAAoB,CAAnC,C;EAAA,C;;IAGA,6DAA4D,YAAjD,IAAI,WAAW,KAAK,GAAL,IAAX,CAAJ,GAA2B,WAAW,KAAK,GAAL,IAAX,CAAsB,CAA5D,C;EAAA,C;;IAGA,6DAAmC,YAAxB,IAAI,SAAS,KAAK,GAAL,IAAT,CAAoB,CAAnC,C;EAAA,C;;IAGzC,QAAQ,kBAAK,cAAK,CAAL,C;IACb,QAAQ,kBAAK,cAAK,CAAL,C;IACb,QAAQ,kBAAK,cAAK,CAAL,C;IACb,QAAQ,kBAAK,cAAK,CAAL,C;IAEb,QAAQ,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,C;IACR,SAAS,mBAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,C;IACT,SAAS,mBAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,C;IAET,OAAO,kBAAK,cAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,CAAhB,C;EACb,C;;IAGC,QAAQ,kBAAK,cAAK,CAAL,C;IACb,SAAS,kBAAK,cAAK,CAAL,C;IACd,SAAS,kBAAK,cAAK,CAAL,C;IACd,QAAQ,kBAAK,cAAK,CAAL,C;IAEb,QAAQ,kBAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,C;IACR,QAAQ,kBAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,C;IACR,QAAQ,kBAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,C;IAER,OAAO,kBAAK,cAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;EACb,C;;;;;;;;IAxDD,4B;MAAA,W;;IAAA,qB;EAAA,C;;ICCA,oB;IACc,wB;EADd,C;;IAGyB,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IAGA,OAAE,SAAF,CAAE,EAAS,CAAT,C;EAAF,C;;IAGA,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IAES,OAAE,SAAF,CAAE,EAAS,EAAT,C;EAAF,C;;IACA,yBAAK,kBAAK,CAAL,CAAL,EAAc,kBAAK,CAAL,CAAd,EAAuB,kBAAK,CAAL,CAAvB,C;EAAA,C;;IACA,yBAAK,kBAAK,CAAL,CAAL,EAAc,kBAAK,CAAL,CAAd,EAAuB,kBAAK,CAAL,CAAvB,C;EAAA,C;;IACA,yBAAK,kBAAK,CAAL,CAAL,EAAc,kBAAK,CAAL,CAAd,EAAuB,kBAAK,CAAL,CAAvB,C;EAAA,C;;IAEwB,6BAAS,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAT,EAAwB,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAxB,EAAuC,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAvC,EAAsD,CAAtD,C;EAAA,C;;IAEL,OAA6C,QAAf,QAAd,QAAd,QAAF,CAAE,EAAQ,CAAR,EAAW,CAAX,CAAc,EAAQ,CAAR,EAAW,CAAX,CAAc,EAAQ,CAAR,EAAW,EAAX,CAAe,EAAQ,CAAR,EAAW,EAAX,C;EAA7C,C;;IAUZ,6DAAoD,YAAxC,QAAQ,CAAT,GAAe,QAAQ,CAAvB,GAA6B,QAAQ,CAAI,CAApD,C;EAAA,C;;IAGA,6DAAwC,YAA7B,QAAS,eAAI,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAJ,CAAoB,CAAxC,C;EAAA,C;;IAGA,6DAAwC,YAA7B,QAAS,eAAI,kBAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAJ,CAAoB,CAAxC,C;EAAA,C;;IAGA,6DAAyB,YAAd,IAAI,OAAO,CAAG,CAAzB,C;EAAA,C;;IAGA,6DAAsC,YAA3B,IAAI,QAAQ,CAAZ,GAAgB,QAAQ,CAAG,CAAtC,C;EAAA,C;;IAGA,6DAA0B,YAAf,IAAI,QAAQ,CAAG,CAA1B,C;EAAA,C;;IAMrB,IAOb,I;IATL,WAAW,M;IACX,WAAW,K;IACX,aAAU,CAAV,MAAkB,KAAlB,M;MACC,QAAS,GAAU,CAAN,IAAM,CAAV,GAAsB,G;MAC/B,QAAQ,CAAC,GAAU,CAAN,IAAM,CAAV,GAAsB,GAAvB,IAA8B,GAA9B,I;MACR,QAAQ,CAAC,GAAU,CAAN,IAAM,CAAV,GAAsB,GAAvB,IAA8B,GAA9B,I;MACR,QAAQ,sDAAU,KAAK,SAAQ,IAAI,KAAJ,IAAR,KAAsB,EAA3B,KAAV,C;MACR,QAAQ,sDAAU,KAAK,SAAQ,IAAI,KAAJ,IAAR,KAAoB,IAAI,KAAJ,IAApB,KAAkC,EAAvC,KAAV,C;MACR,QAAQ,sDAAU,KAAK,SAAQ,IAAI,MAAJ,IAAR,KAAuB,EAA5B,KAAV,C;MACR,IAAI,WAAJ,EAAI,mBAAJ,UAAc,kBAAK,kBAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,GAAlB,C;MACnB,mB;;EAEF,C;;;;;;;;IA3DD,2B;MAAA,U;;IAAA,oB;EAAA,C;;ICDqD,iB;MAAA,IAAS,C;IAAG,iB;MAAA,IAAS,C;IAAG,qB;MAAA,QAAa,oBAAO,M;IAAS,IAAK,kBAAS,SAAT,EAAe,GAAf,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,KAA1B,C;EAAL,C;;ICIzG,kB;IACA,gB;IACA,4B;IACA,4B;IAE4B,gBAAX,e;IhCuqCP,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WgC7uCe,GhC6uCD,IgC7uCI,GAAH,EAAS,qBAAY,QAAN,UAAM,EhC6uCtB,IgC7uC+B,OAAT,CAAZ,EhC6uCV,IgC7uCU,CAAT,ChC6uCf,C;;IgC7uCnB,kBAA+E,MhC8uCrE,WgC9uCqE,C;EANhE,C;;IAUJ,Q;IADV,QAAQ,C;IACE,qB;IAAV,OAAU,cAAV,C;MAAU,8B;MACT,YAAY,0BAAW,CAAE,IAAb,C;MACZ,IAAI,SAAS,IAAb,C;QAAmB,QAAK,KAAM,QAAX,I;;IAEpB,OAAO,C;EACR,C;;IAEyC,iB;MAAA,IAAS,C;IAAW,qB;MAAA,QAAa,oBAAO,M;IAGtE,Q;IAFV,SAAS,C;IACT,SAAS,C;IACC,oB;IAAV,OAAU,cAAV,C;MAAU,8B;MACT,QAAQ,0BAAW,CAAE,IAAb,C;MACR,IAAI,KAAK,IAAT,C;QACC,GAAI,cAAK,CAAE,IAAP,EAAY,EAAZ,EAAgB,EAAhB,C;QACJ,UAAM,CAAE,QAAR,I;;MAED,IAAI,MAAK,EAAT,C;QACC,UAAM,eAAN,I;QACA,KAAK,C;;;EAGR,C;;IAEiB,c;IAAgC,gB;IAChD,eAAc,SAAK,Q;EADJ,C;;;;;;;IAAC,e;EAAjB,C;;IAAiD,gB;EAAjD,C;;IAAA,4BAAiB,+BAAjB,EAAiD,kCAAjD,C;EAAA,C;;IAAA,OAAiB,wCAAjB,IAAiD,sCAAjD,O;EAAA,C;;IAAA,c;IAAiB,oD;IAAgC,qD;IAAjD,a;EAAA,C;;IAAA,4IAAiB,kCAAjB,IAAiD,oCAAjD,I;EAAA,C;;IAIqB,Y;IAAa,oB;IAA0B,sB;EAAxC,C;;;;;;;IAAC,c;EAArB,C;;IAAkC,kB;EAAlC,C;;IAA4D,mB;EAA5D,C;;IAAA,gCAAqB,4BAArB,EAAkC,wCAAlC,EAA4D,2CAA5D,C;EAAA,C;;IAAA,OAAqB,0CAArB,IAAkC,0CAAlC,KAA4D,4CAA5D,O;EAAA,C;;IAAA,c;IAAqB,mD;IAAa,uD;IAA0B,wD;IAA5D,a;EAAA,C;;IAAA,4IAAqB,gCAArB,IAAkC,wCAAlC,IAA4D,0CAA5D,I;EAAA,C;;;;;;;ICrCD,mC;IAGC,aAAY,G;IACZ,iBAA2B,aAAV,kBAAK,EAAL,CAAU,EAAa,EAAb,C;IAC3B,iBAA2B,aAAV,kBAAK,GAAL,CAAU,EAAa,EAAb,C;IAC3B,eAAyB,aAAV,kBAAK,EAAL,CAAU,EAAa,EAAb,C;IACzB,mBAAkB,mC;IAClB,mBAAkB,4N;IAClB,iBAAgB,aAAQ,cAAR,GAAoB,cAApB,GAAgC,YAAhC,GAA0C,gBAA1C,GAAwD,gB;IAExE,WAAU,cAAY,CAAZ,EAAe,CAAf,C;EAXX,C;;IACuH,gBAAR,YAAN,KAAM,C;IjC4qCpG,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WiClvCyG,iBjCkvC3F,IiClvC2F,CAAU,IjCkvCnH,C;;IiClvCwD,6BAAS,QAAT,EAAmB,QAAnB,EAAqE,WjCmvCtI,WiCnvCsI,CAArE,C;EAAA,C;;IAa1E,aAAa,QAAI,uB;IACjB,cAAwB,mBAAK,QAAL,EAAwB,QAAxB,C;IACxB,mBAA2D,YAAxC,MAAO,uBAAc,GAAd,CAAmB,OAAO,OAAO,C;IhC6gPlD,kBAAM,iBgC3gPS,KhC2gPI,OAAb,C;IAmUA,Q;IAAb,wBgC90PsB,KhC80PtB,gB;MAAa,WgC90PS,KhC80PtB,M;MACI,WAAY,WgC/0PsE,YAA7C,6BAAc,oBAAM,OhC+0P/B,IgC/0P+B,CAAN,CAAd,CAAgC,OAAO,MAAM,ChC+0PtE,C;;IgC/0PlB,ahCg1PS,W;IDrrNA,oBAAM,iBAAa,wBiC1pCZ,MjC0pCY,EAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,SiC/tCC,MjC+tCD,W;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WAAc,MiChuCH,GAAK,CAAL,IjCguCX,C;;IiChuClB,gBAAsC,MjCiuC7B,aiCjuC6B,C;IACtC,SAAS,cAAY,SAAZ,EAAuB,YAAvB,C;IAST,QAAQ,EAAG,uB;IACX,cAAc,CAAE,qBAAY,oBAAO,MAAnB,C;IAChB,SAAmB,mBAAK,QAAL,EAAwB,QAAxB,C;IACnB,gE;IACA,2D;IACA,aC0EkD,kB;IDzElD,QAAQ,C;IACR,YAAY,eAAS,CAAT,C;IACZ,8BAAsB,KAAtB,iB;MAAA,WAAsB,KAAtB,O;MACC,YAAY,mBAAO,KAAP,C;MACZ,MAAM,CAAN,IAAW,I;MACX,CAAE,kBAAS,oBAAoB,KAApB,EAA2B,CAA3B,EAA8B,CAA9B,CAAT,EAA6C,CAA7C,EAAyD,GAAzD,C;MACF,cAAqB,yBAAU,IAAV,EAAgB,kBAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,EAAG,OAA7B,CAAhB,EAAsD,KAAtD,C;MAArB,MEeM,WAAI,OAAJ,C;MFdN,SAAK,KAAL,GAAa,CAAb,K;;IAGD,QAAQ,kCAA+B,QAA/B,UAA0C,QAA1C,UAAqD,KAArD,kBAAsE,EAAG,QAAzE,MAAR,C;IAEA,OAAO,eAAW,EAAG,UAAd,EAAyB,QAAzB,EAAmC,QAAnC,EAA6C,MAA7C,C;EAER,C;;;;;;;;IAjDD,0C;MAAA,yB;;IAAA,mC;EAAA,C;;IG2FC,+B;IA5EiC,U;IA0BjC,oBAAmB,oB;IAGnB,iBAAgB,C;IAChB,iBAAgB,C;IAChB,mBAAkB,C;IAClB,0BAAyB,C;IACzB,4BAA2B,C;IAC3B,gBAAe,C;IACf,yBAAwB,C;IACxB,kBAAiB,C;IACjB,uBAAsB,C;IACtB,0BAAyB,C;IACzB,wBAAuB,C;IACvB,6BAA4B,C;IAC5B,4BAA2B,C;IAC3B,yBAAwB,C;IAExB,mBAAkB,kBAAM,CAAN,EAAS,CAAT,C;IAClB,gBAAe,C;IACf,iBAAgB,C;IAChB,eAAc,C;IACd,uBAAsB,C;IACtB,0BAAyB,C;IACzB,2BAA0B,C;IAC1B,kBAAiB,C;IACjB,sBAAqB,C;IACrB,qBAAoB,C;IACpB,mBAAkB,C;IAClB,wBAAuB,C;IACvB,wBAAuB,C;IAEvB,YAAW,eAAS,CAAT,C;IAEX,eAAc,kBAAM,CAAN,EAAS,CAAT,C;IACd,kBAAiB,G;IACjB,YAAW,C;IACX,YAAW,C;IACX,YAAW,C;IACX,YAAW,C;IACX,gBAAe,C;IACf,qBAAoB,C;IACpB,yBAAwB,C;IAExB,wBAAuB,C;IACvB,uBAAsB,C;IAEtB,kBFJyC,W;IEKzC,qBAAoB,oB;IASnB,uB;IACA,e;IACA,e;IACA,e;IACA,gB;IACA,e;IACA,e;IACA,e;EA1FY,C;;IACI,Y;IAAgB,wB;IAAmB,oB;IAAiB,oB;IACpE,mC;EADe,C;;;;;MACf,uB;IAAA,C;;MAAA,oB;IAAA,C;;;IAEa,OAAA,MAAE,Q;EAAF,C;;;;;;;IAHG,c;EAAjB,C;;IAAiC,oB;EAAjC,C;;IAAoD,kB;EAApD,C;;IAAqE,kB;EAArE,C;;IAAA,yBAAiB,4BAAjB,EAAiC,8CAAjC,EAAoD,wCAApD,EAAqE,wCAArE,C;EAAA,C;;IAAA,OAAiB,sCAAjB,IAAiC,8CAAjC,KAAoD,0CAApD,KAAqE,0CAArE,O;EAAA,C;;IAAA,c;IAAiB,mD;IAAgB,yD;IAAmB,uD;IAAiB,uD;IAArE,a;EAAA,C;;IAAA,4IAAiB,gCAAjB,IAAiC,4CAAjC,IAAoD,wCAApD,IAAqE,wCAArE,I;EAAA,C;;IAMA,e;IAAmB,Y;IAAnB,iB;IAAA,uB;EAAkB,C;;IAAlB,yC;IAAA,C;IACC,yEAAU,CAAV,C;IAAc,uFAAiB,CAAjB,C;IAAqB,6FAAoB,CAApB,C;IAAwB,mFAAe,CAAf,C;IAC3D,mFAAe,CAAf,C;IAAmB,mFAAe,CAAf,C;IAAmB,qFAAgB,CAAhB,C;IAAoB,yEAAU,CAAV,C;IAC1D,+EAAa,CAAb,C;IAAiB,uEAAS,CAAT,C;IAAa,8EAAY,EAAZ,C;IAAiB,4EAAW,EAAX,C;IAC/C,gFAAa,EAAb,C;IAAkB,8FAAoB,EAApB,C;IAAyB,8EAAY,EAAZ,C;IAAiB,8EAAY,EAAZ,C;IAC5D,wFAAiB,EAAjB,C;IAAsB,8FAAoB,EAApB,C;IAAyB,sFAAgB,EAAhB,C;IAAqB,8EAAY,EAAZ,C;IACpE,oFAAe,EAAf,C;IAAoB,sFAAgB,EAAhB,C;IAAqB,4FAAmB,EAAnB,C;IAAwB,wGAAyB,EAAzB,C;IACjE,sGAAwB,EAAxB,C;IAA6B,0HAAkC,EAAlC,C;IAE7B,uC;EATD,C;;;IACC,4B;IAAA,yC;EAAA,C;;;IAAc,4B;IAAA,gD;EAAA,C;;;IAAqB,4B;IAAA,mD;EAAA,C;;;IAAwB,4B;IAAA,8C;EAAA,C;;;IAC3D,4B;IAAA,8C;EAAA,C;;;IAAmB,4B;IAAA,8C;EAAA,C;;;IAAmB,4B;IAAA,+C;EAAA,C;;;IAAoB,4B;IAAA,yC;EAAA,C;;;IAC1D,4B;IAAA,4C;EAAA,C;;;IAAiB,4B;IAAA,wC;EAAA,C;;;IAAa,4B;IAAA,2C;EAAA,C;;;IAAiB,4B;IAAA,0C;EAAA,C;;;IAC/C,4B;IAAA,4C;EAAA,C;;;IAAkB,4B;IAAA,mD;EAAA,C;;;IAAyB,4B;IAAA,2C;EAAA,C;;;IAAiB,4B;IAAA,2C;EAAA,C;;;IAC5D,4B;IAAA,gD;EAAA,C;;;IAAsB,4B;IAAA,mD;EAAA,C;;;IAAyB,4B;IAAA,+C;EAAA,C;;;IAAqB,4B;IAAA,2C;EAAA,C;;;IACpE,4B;IAAA,8C;EAAA,C;;;IAAoB,4B;IAAA,+C;EAAA,C;;;IAAqB,4B;IAAA,kD;EAAA,C;;;IAAwB,4B;IAAA,wD;EAAA,C;;;IACjE,4B;IAAA,uD;EAAA,C;;;IAA6B,4B;IAAA,iE;EAAA,C;;IAE7B,yC;IACC,aAAY,wB;EADb,C;;;;;;;;IAAA,4B;IAAA,gD;MAAA,+B;;IAAA,yC;EAAA,C;;;;;;;IATD,+sC;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,8C;MAAA,wB;QAAA,qD;MAAA,2B;QAAA,wD;MAAA,sB;QAAA,mD;MAAA,sB;QAAA,mD;MAAA,sB;QAAA,mD;MAAA,uB;QAAA,oD;MAAA,iB;QAAA,8C;MAAA,oB;QAAA,iD;MAAA,gB;QAAA,6C;MAAA,mB;QAAA,gD;MAAA,kB;QAAA,+C;MAAA,oB;QAAA,iD;MAAA,2B;QAAA,wD;MAAA,mB;QAAA,gD;MAAA,mB;QAAA,gD;MAAA,wB;QAAA,qD;MAAA,2B;QAAA,wD;MAAA,uB;QAAA,oD;MAAA,mB;QAAA,gD;MAAA,sB;QAAA,mD;MAAA,uB;QAAA,oD;MAAA,0B;QAAA,uD;MAAA,gC;QAAA,6D;MAAA,+B;QAAA,4D;MAAA,yC;QAAA,sE;MAAA,QAAA,8E;;EAAA,C;;;IAciB,c;IAAc,c;EAAf,C;;;;;;;IAAC,e;EAAjB,C;;IAA+B,e;EAA/B,C;;IAAA,yBAAiB,+BAAjB,EAA+B,+BAA/B,C;EAAA,C;;IAAA,OAAiB,wCAAjB,IAA+B,oCAA/B,O;EAAA,C;;IAAA,c;IAAiB,oD;IAAc,oD;IAA/B,a;EAAA,C;;IAAA,4IAAiB,kCAAjB,IAA+B,kCAA/B,I;EAAA,C;;IAE6B,yBAAM,qBAAN,EAAoB,qBAApB,C;EAAA,C;;IACR,gC;IAAuB,c;EAAxB,C;;;;;;;IAAC,wB;EAArB,C;;IAA4C,e;EAA5C,C;;IAAA,6BAAqB,0DAArB,EAA4C,+BAA5C,C;EAAA,C;;IAAA,OAAqB,8DAArB,IAA4C,oCAA5C,O;EAAA,C;;IAAA,c;IAAqB,6D;IAAuB,oD;IAA5C,a;EAAA,C;;IAAA,4IAAqB,oDAArB,IAA4C,kCAA5C,I;EAAA,C;;IAG8B,Q;IAAA,2CAAa,IAAb,+B;EAAA,C;;IAiD9B,iC;EAAA,C;;IAEE,OAAO,YAAQ,CAAR,C;EACR,C;;;;;;;;IAHD,wC;MAAA,uB;;IAAA,iC;EAAA,C;;IAiBmC,gBAAR,MAAF,MAAE,C;IAYZ,Q;IAXkB,kBAAb,a7ChDjB,S6CgDiB,C;IAAqB,I7ChDtC,W6CgD0C,KAAQ,CAAZ,C;MAAe,UAAU,gBAAV,C;IAAvD,mB7C/CS,W;I6CgDuB,kBAAb,a7CjDjB,S6CiDiB,C;IAAqB,I7CjDtC,W6CiD0C,KAAQ,CAAZ,C;MAAe,UAAU,gBAAV,C;IAAvD,mB7ChDS,W;I6CiDT,gBAAgB,a7ClDd,S6CkDc,C;IAChB,kBAAkB,a7CnDhB,S6CmDgB,C;IAClB,oBAAoB,a7CpDlB,S6CoDkB,C;IACpB,iBAAiB,a7CrDf,S6CqDe,C;IAEgB,kBAAnB,SAAQ,SAAR,C;IpCyjCL,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,WAAY,WoC9nCjB,kBAAM,Y7CxDL,S6CwDK,EAAY,CAAZ,CAAN,EAAsB,a7CxDrB,S6CwDqB,CAAtB,EAAoC,a7CxDnC,S6CwDmC,CAApC,EAAkD,a7CxDjD,S6CwDiD,CAAlD,CpC8nCiB,C;;IoC/nClB,apCgoCS,W;IoC5nCK,wB;IAAd,OAAc,cAAd,C;MAAc,uB;MACb,UAAU,c7C5DT,S6C4DS,EAAc,KAAM,OAApB,EAA4B,KAAM,OAAlC,C;MACV,mC;MAAA,UAAa,KAAM,G;MC6ClB,wBAAI,GAAJ,ED7CwB,KC6CxB,C;;ID3DsB,O7C9Cf,S;E6C8Ce,C;;IAoBP,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MAIC,U;MAHlB,aAAa,kB;MACb,YAAY,kB;MACZ,mBAAmB,kB;MACnB,aAAU,CAAV,MAAkB,KAAlB,M;QACC,iBAAiB,kB;QACjB,iBAAiB,kB;QACjB,iBAAiB,kB;QACjB,aAAa,kB;QACb,aAAa,kB;QACb,aAAa,kB;gBAEO,W;eACnB,C;YAAK,kB;YAAL,K;eACA,C;YAAK,sB;YAAL,K;kBACQ,sB;YAHK,K;;QAAd,oB;QAMA,aAAmG,WAAV,QAA/D,gBAAR,YAAQ,EAA2B,oBAAb,YAAa,CAAb,yBAAwB,MAAxB,EAAd,EAAqD,oBAAP,MAAO,CAArD,CAA+D,CAAU,EAAS,OAAT,C;;MAlBnF,a;;;MAAA,a;IAAA,a;EAAA,C;;IAuBD,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MACU,U;cAAA,sB;aACzB,C;UAAK,U;UAAL,K;aACA,C;UAAK,U;UAAL,K;gBACQ,wB;UAHW,K;;MAApB,0B;MAMA,WAAW,qBAAe,2BAAiB,iBAAY,CAAZ,IAAjB,CAAf,C;MACX,YAAO,eAAS,iBAAY,CAAZ,IAAT,C;MAEwB,gBAA/B,6BAAyB,IAAzB,C;cACO,sB;aACL,C;UAAqB,U;UAAA,kB;UAAV,yC;YAAwB,UAAK,CAAL,I7C5H5B,S6C4HsC,gBAAe,CAAf,I;;;UAA7C,K;aACA,C;UAAqB,U;UAAA,kB;UAAV,+C;YAAwB,UAAK,GAAL,I7C7H5B,S6C6HsC,gBAAe,CAAf,I;;;UAA7C,K;gBACQ,e;UAHT,K;;MAMD,QAAQ,WAAc,OAAL,SAAK,CAAtB,C;MAjBgB,a;;;MAAA,a;IAAA,a;EAAA,C;EE0MG,sE;;IFtLH,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MACK,IAArB,kBAAyB,KAAQ,CAAZ,C;QAAe,UAAU,aAAV,C;MACf,IAArB,kBAAyB,KAAQ,CAAZ,C;QAAe,UAAU,aAAV,C;MACpC,eAAU,4B;MACV,yBAAyB,kB;MACZ,gBAAb,kB;MAAqB,I7CnHnB,S6CmHuB,KAAQ,UAAZ,C;QAAwB,UAAU,mBAAsB,Q7CnH3E,S6CmH2E,CAAhC,C;MAC7C,YAAY,kB;MACZ,kBAAa,kB;MACb,cAAc,0BAAe,yBAAf,C;MACd,eAAe,0BAAe,yBAAf,C;MACf,YAAO,gB;MACP,YAAO,gB;MACP,YAAO,gB;MACP,YAAO,gB;MACP,gBAAW,kB;MACX,qBAAgB,kB;MAChB,yBAAoB,gB;MACpB,wBAAmB,gB;MACnB,uBAAkB,gB;MAElB,QAAQ,iBAAc,eAAtB,C;MACA,QAAQ,cAAY,kCAAS,OAAT,gBEiKO,sBFjKa,EEiKb,CFjKP,CAApB,C;MACA,QAAQ,eAAa,kCAAS,QAAT,gBEgKM,sBFhKe,EEgKf,CFhKN,CAArB,C;MACA,QAAQ,cAAW,SAAX,UAAkB,SAAlB,WAA0B,SAA1B,UAAiC,SAAjC,MAAR,C;MAvBgB,a;;;MAAA,a;IAAA,a;EAAA,C;;IA0BA,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MAChB,cAAc,4B;MACd,iBAAY,kB;MACZ,iBAAY,kB;MACZ,mBAAc,kB;MACd,0BAAqB,kB;MACrB,4BAAuB,kB;MACvB,gBAAW,kB;MACX,yBAAoB,kB;MACpB,kBAAa,kB;MACb,uBAAkB,kB;MAClB,0BAAqB,kB;MACrB,wBAAmB,kB;MACnB,6BAAwB,kB;MACxB,4BAAuB,kB;MACvB,yBAAoB,kB;MAfJ,a;;;MAAA,a;IAAA,a;EAAA,C;;IAkBA,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MAChB,mBAAc,4B;MACd,gBAAW,gB;MACX,iBAAY,gB;MACZ,eAAU,gB;MACV,uBAAkB,kB;MAClB,0BAAqB,gB;MACrB,2BAAsB,gB;MACtB,kBAAa,gB;MACb,sBAAiB,gB;MACjB,qBAAgB,gB;MAChB,mBAAc,gB;MACd,gB;MACA,gB;MACA,gB;MACA,gB;MACA,wBAAmB,gB;MACnB,wBAAmB,kB;MAjBH,a;;;MAAA,a;IAAA,a;EAAA,C;;IAoBA,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MAC8B,gBAA1B,SAAQ,qBAAR,C;MpCi8BX,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,6B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WoCvgCkC,sBAAU,kBAAV,EAAwB,gBAAxB,CpCugClC,C;;MoCvgClB,mBpCwgCS,W;MoCvgCT,uBAAoC,KAAb,YAAa,CAAO,a;MACsB,kBAAxC,SAAS,iBAAY,qBAAZ,IAAT,C;MpC+7BhB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;QACT,aAAY,WoCrgCqD,wCAA4B,gBAA5B,CpCqgCrD,C;;MoCrgClB,wBpCsgCS,a;MoCrgCT,kBAAa,mBAAe,iBAAf,C;MAJG,a;;;MAAA,a;IAAA,a;EAAA,C;;IAQU,4B;IAAqB,4B;IAAqB,oB;EAA3C,C;;;;;;;IAAC,sB;EAA1B,C;;IAA+C,sB;EAA/C,C;;IAAoE,kB;EAApE,C;;IAAA,kDAA0B,oDAA1B,EAA+C,oDAA/C,EAAoE,wCAApE,C;EAAA,C;;IAAA,OAA0B,+DAA1B,IAA+C,kDAA/C,KAAoE,0CAApE,O;EAAA,C;;IAAA,c;IAA0B,2D;IAAqB,2D;IAAqB,uD;IAApE,a;EAAA,C;;IAAA,4IAA0B,gDAA1B,IAA+C,gDAA/C,IAAoE,wCAApE,I;EAAA,C;;IADgB,Q;IAAA,U;IAAA,mCAAU,MAAV,W;MAOF,U;MAJd,cAAc,kB;MACd,gBAAgB,kB;MACiB,gBAAnB,SAAQ,SAAR,C;MpCs7BL,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,6B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WoC5/BqB,2CAAe,kBAAf,EAA6B,kBAA7B,EAA2C,kBAA3C,CpC4/BrB,C;;MoC5/BlB,apC6/BS,W;MoC3/BK,0B;MAAd,OAAc,gBAAd,C;QAAc,yB;QACyB,kBAAtC,qBAA4B,oBAAb,KAAM,OAAO,CAA5B,C;QAEO,U;QADN,aAAa,a7CpNN,W6CoNM,C;gBACP,O;eACL,C;YACC,aAAa,a7CvNR,W6CuNQ,C;YAEb,eAAe,a7CzNV,W6CyNU,C;YACf,eAAe,a7C1NV,W6C0NU,IAAe,CAAf,I;YACf,mBAAmB,a7C3Nd,W6C2Nc,C;YACnB,oBAAoB,a7C5Nf,W6C4Ne,C;YACpB,iBAAiB,a7C7NZ,W6C6NY,C;YACjB,eAAe,iB7C9NV,W6C8NU,EAAiB,QAAjB,C;YACf,a7C/NK,W6C+NL,C;YACA,iBAAiB,iB7ChOZ,W6CgOY,EAAiB,QAAjB,C;YACjB,cAAc,kB7CjOT,W6CiOS,EAAkB,QAAlB,C;YACd,qB7ClOK,W6CkOgB,SAAS,Q;YAC9B,oBAAoB,iB7CnOf,W6CmOe,EAAiB,QAAjB,C;YAKpB,aAAU,CAAV,MAAkB,QAAlB,M;cACC,SAAS,SAAS,CAAT,CAAY,I;cACrB,SAAS,WAAW,CAAX,CAAc,I;cACvB,YAAY,OAAW,CAAH,CAAG,C;cACvB,UAAU,cAAc,CAAd,CAAiB,I;cAE3B,aAAU,EAAV,OAAc,EAAd,M;gBACC,YAAiB,C;gBACjB,IAAI,QAAO,CAAX,C;kBACC,uBAAuB,kBAAiB,IAAI,CAAJ,IAAjB,K;kBACvB,sCAAoB,GAApB,I;kBACA,uCAAoB,CAAC,IAAI,EAAJ,IAAD,IAAW,CAAX,IAApB,K;kBACA,QAAkD,aAA1C,e7CpPN,W6CoPM,EAAgC,oBAAjB,gBAAiB,CAAhC,CAA0C,C;kBAClD,IAAI,UAAS,CAAb,C;oBACC,gBAAS,KAAT,I;;;;kBAGD,QAAQ,IAAI,KAAJ,I;;gBAET,oC;gBAAA,YAAmB,QAAU,K;gBC3HjC,wBD2HkB,CC3HlB,EAAS,KAAT,C;;;;YDsFC,K;eA4CA,E;YACC,a7CnQK,W6CmQL,C;YACA,eAAa,a7CpQR,W6CoQQ,C;YACb,iBAAe,a7CrQV,W6CqQU,C;YACf,gBAAgB,a7CtQX,W6CsQW,C;YAEhB,eAAU,CAAV,QAAkB,SAAlB,Q;cACC,oBAAoB,a7CzQhB,W6CyQgB,C;cACpB,kBAAkB,a7C1Qd,W6C0Qc,C;cAClB,mBAAmB,a7C3Qf,W6C2Qe,C;cAEnB,cAAc,Y;cACd,eAAU,aAAV,SAAyB,WAAzB,Q;gBACC,oC;gBAAA,eAAmB,gBAAnB,EAAmB,wBAAnB,S;gBC/IJ,wBD+IkB,GC/IlB,EAAS,OAAT,C;;;;YDkIC,K;kBA7CD,K;;QAkEA,QAAQ,wBAAqB,MAA7B,C;;MAGF,QAAQ,MAAR,C;MA/EgB,a;;;MAAA,a;IAAA,a;EAAA,C;;IAkFqC,oCAAc,SAAd,C;EAAA,C;;IACT,oCAAc,IAAK,IAAnB,C;EAAA,C;;IAEM,Q;IAAA,4CAAc,SAAd,aAAgC,kCAAhC,O;EAAA,C;;IACT,wCAAoB,IAAK,IAAzB,C;EAAA,C;;IAEC,Q;IAAA,U;IAAA,mCAAU,MAAV,W;M7CnSjC,gB;M6CoSQ,kC;MAAjB,YAAY,WAAK,mBAAL,SAAK,QAAL,0DAAuC,gB;MACnD,UAAU,WAAK,mBAAL,SAAK,EAAU,QAAQ,CAAR,IAAV,CAAL,0DAA2C,K;MACrD,WAAW,aAAM,KAAN,C;MACX,IAAI,cAAQ,gBAAR,CAAJ,C;QAHA,eAIuB,uBAAtB,qBAAe,KAAf,CAAsB,Q;;;QAJvB,eAMC,wBAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,kBAAlB,EAAgC,kBAAhC,EAA8C,kBAA9C,EAA4D,kBAA5D,EAA0E,kCAAkB,aAA5F,C;;MAPyC,qB;;;MAAA,a;IAAA,a;EAAA,C;;IAWF,gBAAnB,SAAQ,cAAR,C;IpCw1BZ,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WoC95B4B,6BpC85Bd,IoC95Bc,CpC85B5B,C;;IoC95BE,OAAgD,cpC+5B3D,WoC/5B2D,C;EAAhD,C;;;;;;;;;IAWF,iB;MAAA,IAAa,C;IAAG,iB;MAAA,IAAa,C;IAAG,uB;MAAA,UAAuB,K;IAAvD,U;IAAgB,U;IAAgB,sB;EAAjC,C;;IAEhB,SAAS,IAAK,E;IACd,SAAS,IAAK,E;IACd,eAAe,IAAK,Q;EACrB,C;;;;;;;IALkB,a;EAAnB,C;;IAAmC,a;EAAnC,C;;IAAmD,mB;EAAnD,C;;IAAA,2BAAmB,yBAAnB,EAAmC,yBAAnC,EAAmD,2CAAnD,C;EAAA,C;;IAAA,OAAmB,sCAAnB,IAAmC,gCAAnC,KAAmD,4CAAnD,O;EAAA,C;;IAAA,c;IAAmB,kD;IAAgB,kD;IAAgB,wD;IAAnD,a;EAAA,C;;IAAA,4IAAmB,8BAAnB,IAAmC,8BAAnC,IAAmD,0CAAnD,I;EAAA,C;;IAQA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,wC;IAAA,C;IACC,0D;IAAK,oE;EADN,C;;;IACC,2B;IAAA,kC;EAAA,C;;;IAAK,2B;IAAA,uC;EAAA,C;;;;;;;IADN,gF;EAAA,C;;;IAAA,a;MAAA,W;QAAA,uC;MAAA,gB;QAAA,4C;MAAA,QAAA,6E;;EAAA,C;;;IAIyC,oB;MAAA,OAAe,I;IAAM,iB;MAAA,IAAY,G;IAAK,iB;MAAA,IAAY,G;IAAK,qB;MAAA,QAAa,oBAAO,M;IAAO,sB;MAAA,8C;IAK7G,Q;IAJb,e;IACA,YAAY,OAAkB,e;IAFgI,CAG9J,wB;IAEa,qB;IAAb,OAAa,cAAb,C;MAAa,iC;MACZ,QAAQ,4BAAe,IAAf,C;MACR,IAAI,SAAJ,C;QACC,CAAE,cAR0J,CAQ1J,EAAW,IAAX,oCAAqC,oBAAO,KAA5C,C;QAR0J,CAS5J,mBAAU,QAAQ,CAAE,aAApB,EAAkC,GAAlC,C;;;EAT4J,C;;IAe7J,kB;IACA,U;IAAY,U;IACZ,oB;IACA,sB;IACA,sB;IACA,oB;EANuB,C;;;;;;;IACvB,iB;EADF,C;;IAEE,a;EAFF,C;;IAEc,a;EAFd,C;;IAGE,kB;EAHF,C;;IAIE,mB;EAJF,C;;IAKE,mB;EALF,C;;IAME,kB;EANF,C;;IAAA,kCACE,qCADF,EAEE,yBAFF,EAEc,yBAFd,EAGE,wCAHF,EAIE,2CAJF,EAKE,2CALF,EAME,wCANF,C;EAAA,C;;IAAA,OACE,qDADF,IAEE,gCAFF,KAEc,gCAFd,KAGE,0CAHF,KAIE,4CAJF,KAKE,4CALF,KAME,0CANF,O;EAAA,C;;IAAA,c;IACE,sD;IACA,kD;IAAY,kD;IACZ,uD;IACA,wD;IACA,wD;IACA,uD;IANF,a;EAAA,C;;IAAA,4IACE,sCADF,IAEE,8BAFF,IAEc,8BAFd,IAGE,wCAHF,IAIE,0CAJF,IAKE,0CALF,IAME,wCANF,I;EAAA,C;;IASA,oB;IACE,0B;IAAwB,0B;IACxB,0B;IAAwB,0B;IACxB,gB;IACA,0C;EAJwB,C;;;MACxB,0B;IAAA,C;;;;MAAwB,0B;IAAA,C;;;;MACxB,0B;IAAA,C;;;;MAAwB,0B;IAAA,C;;;;MAExB,kC;IAAA,C;;;IAGA,YAAY,OAAkB,sB;IAC9B,C1B1SD,O;;M0B2Sc,Q;MAAA,2B;MAAZ,OAAY,cAAZ,C;QAAY,qB;Q1B3Sd,Q;;U0B6SM,oBAAU,CAAK,KAAJ,GAAQ,SAAR,IAAD,SAAV,EAAkC,CAAC,EAAK,KAAL,QAAS,SAAT,IAAD,SAAlC,C;UACA,gBAAiB,UAAjB,EAAwC,UAAxC,C;UACE,SAAM,qC;;;U1B3Sb,W;;;;;M0BsSA,C1BtSA,U;;E0B+SD,C;;;;;;;IAGD,oB;IACE,0B;IAAwB,0B;IACxB,0B;IAAwB,0B;IACxB,sC;IACA,kB;IACA,gB;IACA,gB;IACA,0C;EAPe,C;;;MACf,0B;IAAA,C;;;;MAAwB,0B;IAAA,C;;;;MACxB,0B;IAAA,C;;;;MAAwB,0B;IAAA,C;;;;MAKxB,kC;IAAA,C;;;;MAEwB,OAAA,SAAK,O;IAAL,C;;;IACH,QAAC,WAAM,CAAN,IAAa,CAAd,MAAoB,C;EAApB,C;;IACF,mB;MAAA,MAAe,qB;IAAa,GAC/C,KAAI,Y;IAD2C,GAE/C,KAAI,Y;IAF2C,GAG/C,WAAU,uB;IAHqC,U;EAAA,C;;IAO/C,WAAW,W;IACX,YAAY,OAAO,IAAgB,W;IACnC,C1B1UD,O;;M0B4U6B,Q;;aACzB,K;UAA6C,OAAzB,SAAyB,GAAb,SAAa,GAAN,SAAM,I;UAA7C,K;aACA,U;UAAmB,U;UAAnB,K;;UAFmB,K;;MAApB,gB;MAFF,CAME,mBAAU,WAAV,EAAuB,CAAC,QAAQ,SAAT,SAAvB,C;MANF,CAOE,sBAAa,MAAb,C;MAPF,CAQE,Y;MARF,CASE,cAAK,yBAAL,C;MATF,CAUE,cAAuC,0BAAvC,C;;;MAVF,C1BtUA,U;;E0BmVD,C;;IAKmB,Q;IAFlB,QAAQ,kB;IAEU,OAAA,oBAAgB,OAAhB,GAAuB,CAAvB,I;IAAlB,aAAU,CAAV,gB;MACC,aAAa,qBAAgB,CAAhB,IAAqB,CAArB,I;MACb,WAAW,qBAAgB,IAAI,CAAJ,IAAhB,C;MACX,YAAY,OAAO,MAAP,GAAgB,CAAhB,I;MAEZ,WAAoB,qBAAQ,IAAR,C;MACpB,WAAoB,qBAAQ,MAAR,C;MAEpB,IAAI,IAAK,QAAT,C;QACC,CAAE,gBAAO,IAAK,EAAZ,EAAe,IAAK,EAApB,C;;;QAEF,IAAI,IAAK,QAAT,C;UACC,CAAE,gBAAO,IAAK,EAAZ,EAAe,IAAK,EAApB,C;;;UAEF,CAAE,gBAAO,YAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,EAAwB,YAAJ,GAAI,CAAxB,CAAP,EAAkE,YAAzB,CAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,IAAoB,GAAK,CAAlE,C;;;MAIJ,gBAAa,CAAb,SAAqB,KAArB,S;QACC,WAAW,I;QACX,OAAO,I;QACP,OAAO,qBAAQ,SAAU,CAAC,OAAO,CAAP,IAAD,IAAa,KAAvB,IAAR,C;QAEP,IAAI,IAAK,QAAT,C;UACC,CAAE,gBAAO,IAAK,EAAZ,EAAe,IAAK,EAApB,C;;;UAEF,aAAa,IAAK,E;UAClB,aAAa,IAAK,E;UAClB,aAAa,IAAK,E;UAClB,aAAa,IAAK,E;UAElB,IAAI,CAAC,IAAK,QAAV,C;YACC,SAAmC,YAAzB,CAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,IAAoB,GAAK,C;YACnC,SAAmC,YAAzB,CAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,IAAoB,GAAK,C;YACnC,CAAE,gBAAO,MAAP,EAAe,MAAf,C;;UAGH,IAAI,CAAC,IAAK,QAAV,C;YACC,SAAmC,YAAzB,CAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,IAAoB,GAAK,C;YACnC,SAAmC,YAAzB,CAAC,IAAK,EAAL,GAAS,IAAK,EAAd,IAAD,IAAoB,GAAK,C;;UAGpC,CAAE,gBAAO,MAAP,EAAe,MAAf,C;UACF,CAAE,gBAAO,IAAK,EAAZ,EAAe,IAAK,EAApB,EAAuB,MAAvB,EAA+B,MAA/B,C;;;MAIJ,CAAE,Q;;IAGH,OAAO,C;EACR,C;;;;;;;IAIA,QAAQ,qB;IACR,QAAQ,KAAM,E;IACd,QAAQ,IAAM,K;IACd,OAAS,CAAF,GAAgB,CAAF,GAAc,O;EACpC,C;;IAGQ,Q;IACN,KAAC,IAAD,IAAS,MAAT,C;MAAmB,wB;SACnB,KAAC,IAAD,IAAS,CAAC,MAAV,C;MAAoB,wB;SACpB,YAAQ,MAAR,C;MAAkB,4B;SAClB,YAAQ,CAAC,MAAT,C;MAAmB,8B;;MACX,sB;IALT,W;EAOD,C;;IA8De,IAGmB,IAHnB,EAGG,MAHH,EAGG,M;IA9DjB,gBAAgB,qB;IAChB,WAAW,qB;IACX,WAAW,qB;IACX,WAAW,qB;IACX,WAAW,qB;IAEX,IAAI,YAAY,CAAhB,C;MAGC,4BAA4B,C;MAC5B,yBAAyB,C;MACzB,uBAAuB,C;MACvB,sBAAsB,C;MACtB,sBAAsB,E;MACtB,+BAA+B,E;MAC/B,2BAA2B,G;MAC3B,2BAA2B,G;MAC3B,qBAAqB,G;MACrB,uBAAuB,I;MACvB,8BAA8B,I;MAC9B,gCAAgC,I;MAEhC,iBF/aiD,kB;;QEkbhD,YAAY,uB;QACZ,iBAAiB,uB;QACjB,aAAa,CAAC,QAAU,kBAAX,MAAkC,C;QAC/C,YAAY,CAAC,QAAU,qBAAX,MAAqC,C;QACjD,QAAQ,mCAAW,MAAX,EAAmB,KAAnB,C;QACR,QAAQ,mCAAW,MAAX,EAAmB,KAAnB,C;QACR,aAAoB,G;QACpB,aAAoB,G;QACpB,cAAqB,G;QACrB,cAAqB,G;QAErB,IAAI,CAAC,QAAU,eAAX,MAA+B,CAAnC,C;UACC,SAAS,mC;UACT,SAAS,M;;cACH,IAAI,CAAC,QAAU,wBAAX,MAAwC,CAA5C,C;UACN,SAAS,mC;UACT,SAAS,mC;;cACH,IAAI,CAAC,QAAU,oBAAX,MAAoC,CAAxC,C;UACN,SAAS,mC;UACT,UAAU,mC;UACV,UAAU,mC;UACV,SAAS,mC;;QAGV,UAAU,2BAAe,2CAAgB,UAAhB,EAAf,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,MAApD,EAA4D,OAA5D,EAAqE,OAArE,EAA8E,MAA9E,C;QAGV,UDjgBK,WCigBS,GDjgBT,C;;MCkgBG,SAAC,QAAU,eAAX,MAA+B,CAA/B,C;MAET,OAAO,iCAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,UAAvC,EAAmD,4BAAW,KAAX,CAAkB,aAArE,C;;;MAEP,sBAAsB,eAAS,YAAY,CAAZ,IAAT,C;MACtB,gBAAgB,CAAhB,IAAqB,E;MACrB,aAAU,CAAV,OAAa,SAAb,M;QAAwB,gBAAgB,CAAhB,IAAqB,uB;MAC7C,wBAAwB,uB;MACxB,mBAAmB,0BAAe,iBAAf,C;MACnB,gBAAgB,qBAAgB,kBAAhB,eAAgB,CAAhB,4CAA4C,CAA5C,gCAAkD,C;MAClE,cAAY,kB;MAEZ,WAAW,C;MACX,OAAO,OAAO,SAAd,C;QACC,SAAS,iB;QACT,OAAM,aAAI,EAAJ,C;QAEN,IAAI,CAAC,KAAO,CAAR,MAAc,CAAlB,C;UACC,YAAY,iB;UACZ,eAAU,CAAV,QAAkB,KAAlB,Q;YAAyB,OAAM,aAAI,EAAJ,C;UAC/B,eAAQ,KAAR,GAAgB,CAAhB,K;;;UAEA,mB;;;MAIF,WAAW,eAAS,SAAT,C;MACX,WAAW,eAAS,SAAT,C;MAIX,cAAW,CAAX,QAAc,CAAd,O;QACC,UAAc,OAAM,CAAV,GAAa,IAAb,GAAuB,I;QACjC,QAAQ,C;QACR,eAAU,CAAV,QAAkB,SAAlB,Q;UACC,WAAW,oBAAM,GAAN,C;UACX,SAAS,CAAE,SAAW,CAAX,GAAe,EAAhB,GAAyB,CAA1B,MAAgC,C;UACzC,SAAS,CAAE,SAAW,CAAX,GAAe,EAAhB,GAAyB,CAA1B,MAAgC,C;UACzC,IAAI,EAAJ,C;YACC,gBAAgB,iB;YAChB,IAAI,EAAJ,C;cAAQ,QAAK,SAAL,I;;cAAoB,QAAK,SAAL,I;;gBACtB,IAAI,CAAC,EAAL,C;YACN,QAAK,qBAAL,I;;UAED,IAAI,GAAJ,IAAS,C;;;MAOX,OAAO,wBAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,eAA9B,EAA0D,OAAX,OAAM,KAAK,EAAO,OAAM,KAAb,CAA1D,EAA8E,IAA9E,EAAoF,IAApF,EAA0F,4BAAW,KAAX,CAAkB,aAA5G,C;;EAET,C;;;;;;;IAGmD,oB;MAAA,OAAe,I;IAAM,iB;MAAA,IAAY,G;IAAK,iB;MAAA,IAAY,G;IAAK,qB;MAAA,QAAa,oBAAO,M;IAAO,sB;MAAA,8C;IACrI,IAAK,kBAAS,SAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAjC,EAAwC,MAAxC,C;EACN,C;;IGtnBA,mB;IACa,wBAAY,KAAZ,E;EADb,C;;IAGE,IAAI,QAAE,YAAF,CAAE,EAAY,CAAZ,CAAF,EAAoB,IAApB,CAAJ,C;MAA8B,OAAO,I;IAErC,WAAa,aAAF,CAAE,C;IACb,gBAAkB,WAAF,CAAE,C;IAClB,gBAAkB,WAAF,CAAE,C;IAClB,cAAgB,aAAF,CAAE,C;IAEhB,YAAc,aAAF,CAAE,C;IACd,YAAc,aAAF,CAAE,C;IACd,aAAe,aAAF,CAAE,C;IACf,aAAe,WAAF,CAAE,C;IACf,eAAiB,WAAF,CAAE,C;IACE,gBAAZ,e;IhDgDL,SgD/CD,c;IhD+CC,SgD9CD,gB;IhD8CC,SgD7CD,wB;IAHD,OhDiDS,S;EgD5CV,C;;IAGS,UAYa,MAZb,EAgBa,M;IAhBb,iCAAa,CAAb,EAAgB,KAAhB,C;IAAA,iB;MAA0B,MAAM,8BAAyB,gBAAzB,C;;IAAxC,QAAQ,I;IAER,kBAAoB,aAAF,CAAE,C;IACpB,gBAAkB,aAAF,CAAE,C;IAClB,sBAAwB,aAAF,CAAE,C;IACxB,sBAAwB,aAAF,CAAE,C;IACxB,cAAgB,aAAF,CAAE,C;IAChB,mBAAqB,aAAF,CAAE,C;IAErB,IAAI,CAAE,aAAF,KAAkB,CAAtB,C;MACC,UAAU,YAAQ,CAAE,MAAV,EAAiB,CAAE,OAAnB,C;MACV,aAAU,CAAV,MAAkB,GAAlB,M;QAAuB,GAAI,QAAJ,CAAY,CAAZ,IAAmB,aAAF,CAAE,CAAF,GAA6B,CAAX,6BAAW,S;MACjD,SAAF,CAAE,O;MAApB,eAAU,CAAV,sB;QAA4B,GAAI,gBAAO,CAAE,OAAF,GAAW,GAAX,GAAe,CAAf,IAAP,EAA2B,UAAF,CAAE,EAAU,CAAE,MAAZ,CAA3B,C;MAChC,OAAO,cAAU,OAAO,eAAW,GAAX,CAAP,CAAV,C;;;MAEP,YAAU,aAAS,CAAE,MAAX,EAAkB,CAAE,OAApB,C;MACU,SAAF,CAAE,O;MAApB,eAAU,CAAV,sB;QAA4B,KAAI,gBAAO,CAAE,OAAF,GAAW,GAAX,GAAe,CAAf,IAAP,EAA2B,gBAAF,CAAE,EAAgB,CAAE,MAAlB,CAA3B,C;MAChC,OAAO,cAAU,OAAO,eAAW,KAAX,CAAP,CAAV,C;;EAET,C;;;;;;;;IA1CD,0B;MAAA,S;;IAAA,mB;EAAA,C;;ICAA,mB;IAAa,wBAAY,KAAZ,E;IACZ,gCAA8B,2BAAS,iBAAT,C;EAD/B,C;;ECME,gB;EAUA,yD;;IDfD,yC;IAAA,0B;;MCMgC,gC;MAAX,wB;MAAW,8CAAiB,gC;MAA/C,UAAW,uH;MACX,IAAI,WAAJ,C;QACC,QAAQ,kB;QAUU,0C;QADnB,IAAY,eAAR,QAAJ,C;UAA2B,kBAAgB,U;QACnC,wB;QAAW,kDAAiB,gC;QAAM,mBATb,CASa,6D;QAA1C,mB;UJsJC,kC;;QI9JA,yBAAO,C;QAAP,2B;;MAED,yBAAO,G;;;;EDZT,C;;IAAA,yC;ICkBqB,wC;IADnB,IAAY,eAAR,QAAJ,C;MAA2B,kBAAgB,U;IACnC,wB;IAAW,8CAAiB,gC;IAAM,mB1BxB7C,M0BwB6C,6D;IAA1C,mB;MJsJC,kC;;EGxKH,C;;IAGC,IAAI,QAAE,WAAF,CAAE,EAAW,CAAX,CAAF,EAAmB,MAAnB,CAAJ,C;MAA+B,OAAO,I;IACtC,WAAa,aAAF,CAAE,C;IACb,SAAW,WAAF,CAAE,EAAW,OAAO,CAAP,IAAX,C;IACX,YAAe,aAAH,EAAG,C;IACf,aAAgB,aAAH,EAAG,C;IAChB,YAAe,aAAH,EAAG,C;IACf,wBAA2B,aAAH,EAAG,C;IAC3B,YAAe,aAAH,EAAG,C;IACf,kBAAqB,aAAH,EAAG,C;IACrB,eAAkB,gBAAH,EAAG,EAAgB,EAAhB,C;IAElB,cAAiB,aAAH,EAAG,C;IACjB,WAAc,WAAH,EAAG,EAAW,UAAU,CAAV,IAAX,C;IACd,eAAoB,aAAL,IAAK,C;IACpB,gBAAqB,WAAL,IAAK,EAAW,CAAX,C;IACrB,kBAAuB,aAAL,IAAK,C;IACvB,kBAAuB,aAAL,IAAK,C;IACvB,kBAAuB,aAAL,IAAK,C;IACvB,kBAAuB,aAAL,IAAK,C;IACvB,kBAAuB,aAAL,IAAK,C;IAEvB,WAAc,aAAH,EAAG,C;IACd,YAAe,aAAH,EAAG,C;IACf,YAAe,aAAH,EAAG,C;IACf,YAAe,aAAH,EAAG,C;IAEf,gBAAmB,aAAH,EAAG,C;IAEA,gBAAZ,e;IjD+BL,SiD9BD,c;IjD8BC,SiD7BD,gB;IjD6BC,SiD5BD,gBAAoB,E;IACpB,wBjD2BC,SiD3BD,Y;IAJD,OjDgCS,S;EiD1BV,C;;IAGS,UAEkB,M;IAF1B,QAAQ,kCAAa,CAAb,EAAgB,KAAhB,oBAA0B,UAAU,gBAAV,C;IAClC,aAAe,wBAAF,CAAE,ClB3C4C,c;YkB4C3B,O;WAC/B,M;QAAU,2B;QAAV,K;WACA,M;QAAU,2B;QAAV,K;WACA,M;QAAU,2B;QAAV,K;WACA,M;QAAU,2B;QAAV,K;cACQ,mBAAU,6BAA0B,MAA1B,MAAV,C;QALiB,K;;IAA1B,2B;IAOA,YAAc,QAAF,CAAE,C;IACd,OAAO,cAAe,mBAAgB,SAAN,KAAM,CAAhB,EAA4B,uBAA8B,WAAQ,MAAtC,EAAuD,CAAE,MAAzD,EAAyE,CAAE,OAA3E,CAA5B,C;EACvB,C;;IAnDyC,a;EAAO,C;;;;;;;;IADjD,0B;MAAA,S;;IAAA,mB;EAAA,C;;IESA,oB;IACc,oBAAS,MAAT,EAA2B,IAA3B,C;EADd,C;;;;;;;;IAAA,2B;MAAA,U;;IAAA,oB;EAAA,C;;IAGA,oB;IAAc,kBAAO,MAAP,EAAyB,IAAzB,C;EAAd,C;;;;;;;;IAAA,2B;MAAA,U;;IAAA,oB;EAAA,C;;IACA,oB;IAAc,kBAAO,MAAP,EAAyB,KAAzB,C;EAAd,C;;;;;;;;IAAA,2B;MAAA,U;;IAAA,oB;EAAA,C;;IACA,oB;IAAc,kBAAO,MAAP,EAAyB,IAAzB,C;EAAd,C;;;;;;;;IAAA,2B;MAAA,U;;IAAA,oB;EAAA,C;;IACA,oB;IAAc,kBAAO,MAAP,EAAyB,KAAzB,C;EAAd,C;;;;;;;;IAAA,2B;MAAA,U;;IAAA,oB;EAAA,C;;IAEwD,eAAI,MAAJ,EAAsB,IAAtB,EAAwC,CAAxC,C;EAArC,C;;IAEjB,wDAAoB,IAApB,EAA0B,aAAa,CAAb,IAA1B,EAA0C,OAA1C,C;IACA,YAAiB,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,C;IACjB,UAAU,S;IACV,QAAQ,C;IACR,aAAU,CAAV,MAAkB,CAAlB,M;MACC,aAAU,CAAV,MAAkB,CAAlB,M;QACC,QAAS,WAAW,IAAI,CAAJ,IAAX,CAAD,GAAuB,C;QAC/B,IAAI,MAAM,CAAN,IAAJ,IAAe,kBAAK,mBAAU,QAAG,CAAH,CAAV,EAAiB,GAAjB,C;QACpB,a;;MAED,YAAO,SAAP,I;;EAEF,C;;;;;;;IAGqD,eAAI,MAAJ,EAAsB,OAAtB,EAA2C,EAA3C,C;EAArC,C;;IAEf,oDAAgB,IAAhB,EAAsB,aAAa,CAAb,IAAtB,EAAsC,OAAtC,C;IACA,oDAAgB,IAAhB,EAAsB,aAAa,CAAb,IAAtB,EAAsC,OAAtC,C;IACA,YAAiB,WAAL,IAAK,EAAW,aAAa,CAAb,GAAiB,CAAjB,IAAX,C;IACjB,YAAiB,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAAL,IAAoE,oBAA3B,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAA2B,CAAhC,WAA6C,EAA7C,CAApC,C;IACZ,UAAU,S;IACV,QAAQ,C;IACR,aAAU,CAAV,MAAkB,CAAlB,M;MACC,aAAU,CAAV,MAAkB,CAAlB,M;QACC,QAAS,WAAW,IAAI,CAAJ,IAAX,CAAD,GAAuB,C;QAC/B,QAAU,yBAAW,IAAI,CAAJ,IAAX,CAAD,KAAuB,sBAAvB,CAA8B,Q;QACvC,IAAI,MAAM,CAAN,IAAJ,IAAe,kBAAK,mBAAU,QAAG,CAAH,CAAV,EAAiB,QAAG,CAAH,CAAjB,C;QACpB,a;;MAED,YAAO,SAAP,I;;EAEF,C;;;;;;;IAGqD,eAAI,MAAJ,EAAY,OAAZ,EAAiC,EAAjC,C;EAArC,C;;IAEf,oDAAgB,IAAhB,EAAsB,aAAa,CAAb,IAAtB,EAAsC,OAAtC,C;IACA,wDAAoB,IAApB,EAA0B,aAAa,CAAb,IAA1B,EAA0C,OAA1C,C;IACA,YAAiB,WAAL,IAAK,EAAW,aAAa,CAAb,GAAiB,CAAjB,IAAX,C;IACjB,YAAiB,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAAL,IAAoE,oBAA3B,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAA2B,CAAhC,WAA6C,EAA7C,CAApC,C;IACZ,UAAU,S;IACV,QAAQ,C;IACR,aAAU,CAAV,MAAkB,CAAlB,M;MACC,aAAU,CAAV,MAAkB,CAAlB,M;QACC,QAAS,WAAW,IAAI,CAAJ,IAAX,CAAD,GAAuB,C;QAC/B,QAAU,yBAAW,IAAI,CAAJ,IAAX,CAAD,KAAuB,sBAAvB,CAA8B,Q;QACvC,IAAI,MAAM,CAAN,IAAJ,IAAe,kBAAK,mBAAU,QAAG,CAAH,CAAV,EAAiB,QAAG,CAAH,CAAjB,C;QACpB,a;;MAED,YAAO,SAAP,I;;EAEF,C;;;;;;;IAwCA,2B;IArCkF,wBAAY,MAAZ,E;IAAhE,oB;IAAoB,sB;IAAsB,0B;IAC5D,UAAS,eAAS,CAAT,C;IACT,UAAS,eAAS,CAAT,C;EAFQ,C;;IAOhB,IAAI,CAAsC,WAAZ,CAAzB,aAAS,KAAM,SAAf,CAAyB,aAAY,EAAW,WAAX,CAA1C,C;MAA8D,OAAO,I;IAClD,gBAAZ,e;IACQ,gB;InDpBb,SmDoBD,SAAQ,CAAM,kBAAN,mBAAe,C;InDpBtB,SmDqBD,UAAS,CAAM,qBAAN,qBAAgB,C;IAF1B,OnDlBS,S;EmDsBV,C;;IAGC,UAAU,aAAS,KAAT,EAAgB,MAAhB,UAAkC,YAAlC,C;IACV,iBAAiB,GAAI,MAAJ,GAAY,CAAZ,I;IACjB,kBAAkB,GAAI,OAAJ,GAAa,CAAb,I;IAClB,aAAa,C;IACb,aAAU,CAAV,MAAkB,WAAlB,M;MACC,aAAU,CAAV,MAAkB,UAAlB,M;QACC,uBAAU,KAAV,EAAiB,MAAjB,EAAyB,GAAI,KAA7B,EAAmC,GAAI,eAAM,IAAI,CAAJ,IAAN,EAAa,IAAI,CAAJ,IAAb,CAAvC,EAA4D,GAAI,MAAhE,C;QACA,kBAAU,cAAV,I;;;IAGF,OAAO,G;EACR,C;;IAMmB,UACC,M;IAJnB,YAAc,QAAF,CAAE,C;IACd,kBAAkB,EAAC,KAAM,OAAN,GAAa,cAAb,IAAD,IAA2B,CAA3B,QAA+B,CAA/B,I;IAClB,oBAAiD,Y3CmGP,MAAW,M2CnGhB,W3CmGgB,C2CnGJ,C;IACjD,YAAY,CAAM,OAAN,KAAM,MAAN,mBAAe,a;IAC3B,aAAa,CAAM,SAAN,KAAM,OAAN,qBAAgB,a;IAC7B,OAAO,cAAU,OAAO,eAAW,0BAAa,KAAb,EAAoB,KAApB,EAA2B,MAA3B,CAAX,CAAP,CAAV,C;EACR,C;;IAEA,6B;IAsBC,gBAA8C,YAAlB,MAAM,GAAP,GAAc,GAAK,C;IAC9C,gBAA8C,YAAlB,MAAM,GAAP,GAAc,GAAK,C;IAC9C,gBAA8C,YAAlB,MAAM,GAAP,GAAc,GAAK,C;EAxB/C,C;;IAME,OAAO,qBAAQ,gBAAO,CAAP,C;EAChB,C;;IAoBC,SAAc,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,C;IACd,SAAc,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,C;IAEd,GAAG,CAAH,IAAQ,0BAAa,EAAb,C;IACR,GAAG,CAAH,IAAQ,0BAAa,EAAb,C;IACR,IAAI,KAAK,EAAT,C;MACC,GAAG,CAAH,IAAQ,kBAAK,kBAAS,GAAG,CAAH,CAAT,EAAgB,GAAG,CAAH,CAAhB,EAAuB,aAAvB,C;MACb,GAAG,CAAH,IAAQ,kBAAK,kBAAS,GAAG,CAAH,CAAT,EAAgB,GAAG,CAAH,CAAhB,EAAuB,aAAvB,C;;;MAIb,GAAG,CAAH,IAAQ,kBAAK,kBAAS,GAAG,CAAH,CAAT,EAAgB,GAAG,CAAH,CAAhB,EAAuB,aAAvB,C;MAEb,GAAG,CAAH,IAAQ,oBAAO,kB;;EAEjB,C;;IAGC,GAAG,CAAH,IAAQ,0BAAkB,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAAlB,C;IACR,GAAG,CAAH,IAAQ,0BAAkB,WAAL,IAAK,EAAW,aAAa,CAAb,IAAX,CAAlB,C;IACR,GAAG,CAAH,IAAQ,kBAAK,kBAAS,GAAG,CAAH,CAAT,EAAgB,GAAG,CAAH,CAAhB,EAAuB,aAAvB,C;IACb,GAAG,CAAH,IAAQ,kBAAK,kBAAS,GAAG,CAAH,CAAT,EAAgB,GAAG,CAAH,CAAhB,EAAuB,aAAvB,C;EAGd,C;;IAGC,SAAc,SAAL,IAAK,EAAO,aAAa,CAAb,IAAP,C;IACd,SAAc,SAAL,IAAK,EAAO,aAAa,CAAb,IAAP,C;IACd,GAAG,CAAH,IAAQ,E;IACR,GAAG,CAAH,IAAQ,E;IACR,IAAI,KAAK,EAAT,C;MACC,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;;;MAER,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,CAAC,CAAC,IAAI,EAAJ,IAAD,KAAY,IAAI,EAAJ,IAAZ,KAAD,IAAwB,CAAxB,I;MACR,GAAG,CAAH,IAAQ,C;MACR,GAAG,CAAH,IAAQ,G;;EAEV,C;;;;;;;;IAzED,oC;MAAA,mB;;IAAA,6B;EAAA,C;;;;;;;IC3GD,mB;IAAa,wBAAY,KAAZ,E;EAAb,C;;IAEE,IAAM,aAAF,CAAE,CAAF,KAAkB,CAAtB,C;MAAyB,OAAO,I;IAChC,IAAM,aAAF,CAAE,CAAF,KAAkB,CAAtB,C;MAAyB,OAAO,I;IAChC,YAAc,aAAF,CAAE,C;IACd,IAAI,SAAS,IAAb,C;MAAmB,OAAO,I;IAC1B,OAAO,e;EACR,C;;IAIE,kB;IAAgB,oB;IAChB,4B;IACA,wB;IACA,oB;IACA,wB;IACA,gB;IACA,oB;EAPkB,C;;;;;;;IAClB,iB;EADD,C;;IACiB,kB;EADjB,C;;IAEC,sB;EAFD,C;;IAGC,oB;EAHD,C;;IAIC,kB;EAJD,C;;IAKC,oB;EALD,C;;IAMC,gB;EAND,C;;IAOC,kB;EAPD,C;;IAAA,kCACC,qCADD,EACiB,wCADjB,EAEC,oDAFD,EAGC,8CAHD,EAIC,wCAJD,EAKC,8CALD,EAMC,kCAND,EAOC,wCAPD,C;EAAA,C;;IAAA,OACC,+CADD,IACiB,0CADjB,KAEC,kDAFD,KAGC,8CAHD,KAIC,0CAJD,KAKC,8CALD,KAMC,sCAND,KAOC,0CAPD,O;EAAA,C;;IAAA,c;IACC,sD;IAAgB,uD;IAChB,2D;IACA,yD;IACA,uD;IACA,yD;IACA,qD;IACA,uD;IAPD,a;EAAA,C;;IAAA,4IACC,sCADD,IACiB,wCADjB,IAEC,gDAFD,IAGC,4CAHD,IAIC,wCAJD,IAKC,4CALD,IAMC,oCAND,IAOC,wCAPD,I;EAAA,C;;IAUA,mB;MAAqB,kCACV,OAAF,SAAE,CADU,EAET,OAAF,SAAE,CAFS,EAGL,OAAF,SAAE,CAHK,EAIP,OAAF,SAAE,CAJO,EAKT,aAAF,SAAE,CALS,EAMP,aAAF,SAAE,CANO,EAOX,aAAF,SAAE,CAPW,EAQT,aAAF,SAAE,CARS,C;IAArB,C;EAAA,C;;IAWA,uB;MA8Bc,IAAN,I;MA7BP,iBAA2B,WAAR,MAAF,CAAE,CAAQ,C;MAC3B,IAAI,mBAAc,+BAAd,CAAJ,C;QAAkC,OAAO,iBAAI,gBAAS,MAAF,CAAE,CAAT,EAAkB,aAAM,cAAmB,aAAM,SAAT,SAAhB,CAAxB,C;MAC7C,iBAAmB,aAAF,CAAE,C;MACnB,YAAc,aAAF,CAAE,C;MACd,aAAe,aAAF,CAAE,C;MACf,aAAe,WAAF,CAAE,C;MACf,eAAiB,WAAF,CAAE,C;MACjB,kBAAoB,aAAF,CAAE,C;MACpB,gBAAkB,aAAF,CAAE,C;MAClB,sBAAwB,aAAF,CAAE,C;MACxB,sBAAwB,aAAF,CAAE,C;MACxB,cAAgB,aAAF,CAAE,C;MAChB,mBAAqB,aAAF,CAAE,C;MACrB,cAAc,eAAS,CAAT,C;MACd,IAAI,gBAAe,CAAnB,C;QAAsB,MAAM,mCAA8B,+BAA9B,C;MAC5B,IAAI,YAAY,CAAhB,C;QACC,aAAiB,YAAW,CAAf,GAAkB,KAAM,QAAxB,GAAsC,O;QACxB,gBAAhB,SAAQ,MAAR,C;Q3C0nCJ,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;QAqEA,U;QAAA,6B;QAAb,OAAa,gBAAb,C;UAAa,wB;uBACT,W;U2C/rCH,QAAU,S;UACV,QAAU,S;UACV,QAAU,S;UACV,eAAiB,S;U3C4rCF,YAAZ,WAAY,E2C3rCf,kCAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,GAAd,C3C2rCe,C;;Q2ChsChB,UAME,W3C2rCK,W2C3rCL,C;;MAGH,aAAc,YAAA,CAAE,MAAF,EAAU,QAAV,CAAD,GAAuB,CAAvB,I;MACb,WAAa,UAAF,CAAE,EAAU,oBAAS,CAAE,OAAX,CAAV,C;cAEA,S;aACZ,C;UAAK,mBAAQ,CAAE,MAAV,EAAiB,CAAE,OAAnB,EAA2B,IAA3B,EAAiC,OAAjC,C;UAAL,K;aACA,C;UAAK,mBAAQ,CAAE,MAAV,EAAiB,CAAE,OAAnB,EAA2B,IAA3B,EAAiC,OAAjC,C;UAAL,K;aACA,E;UAAkC,QAA5B,aAAS,CAAE,MAAX,EAAkB,CAAE,OAApB,CAA4B,uBAAa,kBAAb,EAAmB,IAAnB,C;UAAlC,K;gBACQ,MAAM,mCAA8B,2BAAwB,QAAtD,C;;MAJf,W;IA9BD,C;EAAA,C;;IA2CU,Q;IAtDV,gD;IAWA,gD;IAsCA,eAAiB,aAAF,CAAE,C;IACjB,WAAa,aAAF,CAAE,C;IACb,YAAc,aAAF,CAAE,C;IACgB,gBAAf,SAAQ,KAAR,C;I3CmmCN,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,6B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,WAAY,W2CzqCkB,c3CyqClB,C;;I2CzqClB,c3C0qCS,W;I2CzqCT,cTiCkD,kB;IShCxC,yB;IAAV,OAAU,cAAV,C;MAAU,mB;MACT,UAAU,WAAW,CAAX,EAAgB,gBAAF,CAAE,EAAuB,oBAAT,CAAE,OAAO,CAAvB,EAAwC,oBAAP,CAAE,KAAK,CAAxC,CAAhB,C;MACV,GAAI,Q;MACJ,ORvBM,WQuBK,GRvBL,C;;InCqnCE,oBAAM,iBAAa,wB2C5lCX,O3C4lCW,EAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,S2CjqCE,O3CiqCF,W;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,W2ClqCa,e3CkqCC,M2ClqCD,0BAAsB,KAAtB,C3CkqCb,C;;I2ClqClB,OAAO,c3CmqCE,a2CnqCF,C;EACR,C;;;;;;;;IAhFD,0B;MAAA,S;;IAAA,mB;EAAA,C;;ICLC,oB;IACG,2BAAe,iB;EAFC,C;;;MAGG,OAAO,SAAP,WAAO,C;IAAP,C;;;IAIpB,IAAI,EAAG,KAAP,C;MAAA,OACC,qCAAI,U;;;MADL,OAGC,wBAAA,EAAG,OAAO,MAAV,EAAkB,EAAG,OAAO,OAA5B,GAAsC,YAAA,EAAG,OAAO,IAAV,EAAgB,EAAG,OAAO,IAA1B,CAAtC,C;;EAEF,C;E5Co0BF,6D;E6CvtBA,iCAOmB,yB;IAzFnB,mE;;MAyFmB,uB;QAAU,eAAsB,gB;QAAtB,OAhFlB,cAAc,SAgFoB,CAhFpB,CAAd,EAA2B,SAgFU,CAhFV,CAA3B,C;MAgFQ,C;IAAA,C;GAAA,C;EC7GnB,yC;;IAA+F,4C;EAA/F,C;EAAA,6D;IAC4C,+BAAW,CAAX,EAAc,CAAd,C;EAAA,C;EAD5C,kF;;;MFPI,UANM,M;MAAA,UAMN,mB5Cw0BO,W4C90BD,W5C80BC,+B6CptBQ,2BD1HiB,yCC0HjB,C7CotBR,E4Cx0BP,CANM,8B;MAAA,mB;QAMmB,MAAM,8BAAyB,iBAAzB,C;;MANzB,a;IAAA,C;;;IAQyB,sBAAY,WAAZ,M;EAAA,C;;;MAZ/B,qC;IAAA,C;;MAAA,qC;IAAA,C;;;;;;;;IGDH,wB;MAAA,WAAuB,S;IACvB,qB;MAAA,QAAkB,I;IAClB,sB;MAAA,SAAmB,I;IACnB,qB;MAAA,QAAmD,I;IAHnD,wB;IACA,kB;IACA,oB;IACA,4B;EAJ4B,C;;;MAI5B,2B;IAAA,C;;MAAA,4B;IAAA,C;;;;;;;;IAHA,oB;EADD,C;;IAEC,iB;EAFD,C;;IAGC,kB;EAHD,C;;IAIC,iB;EAJD,C;;IAAA,8BACC,8CADD,EAEC,qCAFD,EAGC,wCAHD,EAIC,qCAJD,C;EAAA,C;;IAAA,OACC,+DADD,IAEC,wCAFD,KAGC,0CAHD,KAIC,wCAJD,O;EAAA,C;;IAAA,c;IACC,yD;IACA,sD;IACA,uD;IACA,sD;IAJD,a;EAAA,C;;IAAA,4IACC,4CADD,IAEC,sCAFD,IAGC,wCAHD,IAIC,sCAJD,I;EAAA,C;;ICCC,wB;MAAA,WAAuB,E;IACvB,uB;MAAA,UAAsB,I;IACtB,qB;MAAA,QAAmD,I;IAFnD,wB;IACA,sB;IACA,4B;EAH4B,C;;;MAG5B,2B;IAAA,C;;MAAA,4B;IAAA,C;;;;;;;;IAFA,oB;EADD,C;;IAEC,mB;EAFD,C;;IAGC,iB;EAHD,C;;IAAA,8BACC,8CADD,EAEC,2CAFD,EAGC,qCAHD,C;EAAA,C;;IAAA,OACC,+DADD,IAEC,4CAFD,KAGC,wCAHD,O;EAAA,C;;IAAA,c;IACC,yD;IACA,wD;IACA,sD;IAHD,a;EAAA,C;;IAAA,4IACC,4CADD,IAEC,0CAFD,IAGC,sCAHD,I;EAAA,C;;I/CygPW,kBAAM,iBgDlgPC,IhDkgPY,OAAb,C;IA6TA,Q;IAAb,wBgD/zPc,IhD+zPd,gB;MAAa,WgD/zPC,IhD+zPd,M;mBACI,W;MiDzsPR,8B;MAAA,0C;MDvH8C,gBhDg0PZ,IqBn0P2B,c;M4B8HlB,U;MjDqsPvB,YAAZ,WAAY,EiDrsP6C,KAAtB,+DAAsB,CAAO,WjDqsPpD,C;;IgDh0PnB,kBAAsD,MhDi0P5C,WgDj0P4C,C;EAD7B,C;;I1DMU,MAAM,8B;E0DJwD,C;;IAA/D,qB;MAAA,QAA4B,wB;WAA9D,wF;EAAiG,C;;IACuB,MAAM,sC;EAAN,C;;IAAnE,qB;MAAA,QAA4B,uBAAmB,SAAnB,C;IAAjF,uG;EAAwH,C;;IAEnB,uB;;;QACpG,UAAU,2B;QACE,gBAAZ,e;Q1DoDE,S0DnDD,SAAiB,S;Q1DmDhB,S0DlDD,UAAkB,U;Q1DkDjB,S0DjDD,gBAAwB,O;QEiBzB,sB5DiCS,S;;;Q4DhCR,gC;UACD,IFxBwH,IEwBxH,C;YAAY,gBAAF,CAAE,C;UACZ,sBAAO,I;UAAP,wB;;;UAJD,O;;;;IFrBqG,0B;EAAA,C;;IAAhE,qB;MAAA,QAA4B,wB;WAAjE,2F;EAAqG,C;;IASG,4C;qBAAA,uH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,gD;IAAA,gD;EAA+D,C;;;;;;;;;;;;;YAA7D,qDAAU,oBAAV,EAAkC,CAArB,wBAAqB,eAAgB,2BAAhB,CAAlC,C;;;;;;;;;;;;;;;;EAA6D,C;;IAA1H,wB;MAAA,WAAmB,S;IAAwB,uBAAgB,uDAAhB,e;EAAA,C;;IAEhE,wB;MAAA,WAAmB,S;IAAqB,OAAA,uBAAU,CAAV,EAAkC,CAArB,wBAAqB,eAAgB,QAAhB,CAAlC,CAA6D,W;EAA7D,C;;mBAChE,wD;QAAA,S;aAAA,Q;;aAAA,uB;EAAkC,C;;IAAlC,wC;IAAA,yB;IAAA,kB;IAAA,wB;EAAkC,C;;;;;;;;;;;;;YAAe,gB;4BAAL,eAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAf,OAAK,wBAAU,aAAV,EAA8B,eAAK,SAAnC,C;;;;;;;;;;;;;;EAAL,C;;IAEX,wB;MAAA,WAAmB,S;IAAqB,yBAAO,SAAF,CAAE,CAAP,EAAmB,QAAnB,C;EAAA,C;;IAEvC,qB;MAAA,QAA4B,wB;IAAgC,OAAA,uBAAU,CAAV,EAAa,KAAb,CAAoB,W;EAApB,C;;IAE7D,qB;MAAA,QAA4B,wB;IAAgC,yBAAO,SAAF,CAAE,CAAP,EAAmB,KAAnB,C;EAAA,C;;IAE1D,qB;MAAA,QAA4B,wB;IAAiC,Q;IAAA,uB;;;QEErF,sBFFiH,2C;;;QEGhH,gC;UACD,IFJyG,IEIzG,C;YAAY,gBAAF,CAAE,C;UACZ,sBAAO,I;UAAP,wB;;;UAJD,O;;;;IFDsF,qDAAgE,K;EAAhE,C;;IAE5D,qB;MAAA,QAA4B,wB;IAAwB,OAAA,IAAK,cAAK,CAAL,EAAQ,KAAR,C;EAAL,C;;IAErD,qB;MAAA,QAA4B,wB;IAAgC,yBAAO,SAAF,CAAE,CAAP,EAAmB,KAAnB,C;EAAA,C;;mBAErF,0D;QAAA,S;aAAA,Q;;aAAA,uB;EACoC,C;;IADpC,wC;IAAA,yB;IAAA,kB;IAAA,wB;EACoC,C;;;;;;;;;;;;;YAAe,gB;4BAAL,eAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAf,OAAK,wBAAU,aAAV,EAA8B,eAAK,SAAnC,C;;;;;;;;;;;;;;EAAL,C;;IAI6D,4C;qBAAA,oH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,gD;IAAA,gD;EAA+B,C;;;;;;;;;;;;;YAA7B,gDAAO,SAAF,oBAAE,CAAP,EAAmB,2BAAnB,C;;;;;;;;;;;;;;;;EAA6B,C;;IAAvF,wB;MAAA,WAAmB,S;IAAqB,uBAAgB,oDAAhB,e;EAAA,C;EGqFlF,wH;EAAA,wF;;IHnFsC,qB;MAAA,QAA4B,uBAAmB,SAAnB,C;IGoFjE,aAAa,qBHpFmI,SAAP,MAAO,CAAP,GAAc,CAAd,IGoF5H,C;IACb,QAAQ,iBAAiB,MAAjB,C;IHrFoJ,wBAAW,qBAAX,EGsFnJ,CHtFmJ,Q;IAA/C,OGuFtG,MAAO,c;EHvF+F,C;;IAChF,qB;MAAA,QAA4B,uBAAmB,SAAnB,C;IGmFzD,aAAa,qBHnFoH,KAAM,KAAN,GAAa,CAAb,IGmFpH,C;IACb,QAAQ,iBAAiB,MAAjB,C;IHpF2I,+BGqF1I,CHrF0I,Q;IAA9C,OGsF9F,MAAO,c;EHtFuF,C;;IAC1E,qB;MAAA,QAA4B,uBAAmB,SAAnB,C;IAA4C,2BAAO,OAAO,eAAW,MAAX,CAAP,CAAP,EAAmC,KAAnC,C;EAAA,C;;mBAEnG,iE;QAAA,S;aAAA,Q;;aAAA,uB;EAAoF,C;;IAApF,wC;IAAA,yB;IAAA,kB;IAAA,wB;IAAA,0B;EAAoF,C;;;;;;;;;;;;;YAApD,gC;cAAA,mBAA4B,wB;YAAoD,gB;4BAAL,eAAK,c;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,gB;4BAAA,qCAAiC,SAAV,aAAU,CAAjC,EAA6C,gBAAM,cAAgB,eAAK,SAArB,CAAnD,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAL,OAAK,a;;;;;;;;;;;;;;EAAL,C;;IACwC,4C;qBAAA,sH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,0C;IAAA,gD;EAAsB,C;;;;;;;;;;;;;YAApB,qDAAU,oBAAV,EAAa,wBAAb,C;;;;;;;;;;;;;;;;EAAoB,C;;IAArG,qB;MAAA,QAA4B,wB;IAAmC,uBAAgB,sDAAhB,e;EAAA,C;;IACS,4C;qBAAA,mH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,kC;IAAA,0C;IAAA,gD;EAA4B,C;;;;;;;;;;;;;YAA1B,gDAAO,SAAF,oBAAE,CAAP,EAAmB,wBAAnB,C;;;;;;;;;;;;;;;;EAA0B,C;;IAAxG,qB;MAAA,QAA4B,wB;IAAgC,uBAAgB,mDAAhB,e;EAAA,C;;IACqB,4C;qBAAA,sH;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAAA,wC;IAAA,yB;IAAA,4C;IAAA,0C;IAAA,gD;EAAwB,C;;;;;;;;;;;;;YAAtB,kDAAO,yBAAP,EAAe,wBAAf,C;;;;;;;;;;;;;;;;EAAsB,C;;IAAvG,qB;MAAA,QAA4B,wB;IAAmC,uBAAgB,sDAAhB,e;EAAA,C;;;;;;EIW3G,4E;;ICrDqB,wBAAY,EAAZ,E;IACpB,iBDuDuD,oB;ECxDxD,C;;IAGe,IAAa,UAAQ,Q;IAArB,W;EAAA,C;;IACoB,OAAQ,SAAR,cAAQ,C;EAAR,C;EnBkDnC,qD;;ImBhDE,IAAK,UAAQ,Q;InBqDN,OmBpDP,IAAK,UnBoDE,EmBpDS,OnBoDT,C;EmBnDR,C;;IAGC,cAAc,a;;MAEb,OAAO,U;;;MAEP,qBAAQ,OAAR,C;;EAEF,C;+IAEA,yB;IAAA,oC;MAAuF,6B;MARtF,gBAAc,a;;QASd,YAAQ,0B;QAPP,4BAQD,U;;;QANC,qBAAQ,SAAR,C;;MAIqF,gC;IAAA,C;GAAvF,C;EnB2CD,uD;;IAKS,SmB3CiD,IAAa,UnB2C9D,S;ImB3CiD,W;EAAA,C;;IACP,IAAa,UnB0BvD,kB;ImB1B0C,W;EAAA,C;;InBkC1C,OmBjCoD,IAAa,UnBiCjE,S;ImBjCoD,W;EAAA,C;;IAG5C,UACP,M;IADO,gC;IAAf,OAAe,cAAf,C;MAAe,wB;;QACP,SAAP,MAAO,sBAAe,MAAF,CAAE,CAAf,EAAwB,KAAxB,C;QAAP,mB;UAAyC,Q;;;;QACxC,gC;UACD,Q;;;UAH8B,O;;MAAP,OACvB,M;;IAID,OAAO,I;EACR,C;;IAGsB,gBAAR,c;IAAQ,sB;;MtD0KH,Q;MAAA,2B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,IAAc,OsD1KA,eAAQ,QAAR,QtD0Kd,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;IsD3KT,+B;IACA,IAAI,cAAJ,C;MAAoB,OAAO,MAAO,mBAAY,MAAF,CAAE,CAAZ,EAAqB,KAArB,C;IAClC,MAAM,mCAA8B,uCAAiD,WAAR,MAAF,CAAE,CAAQ,EAAW,CAAX,EAAc,UAAd,CAAjD,GAAwE,GAAxE,GAAqG,cAAb,UAAR,MAAF,CAAE,CAAQ,EAAU,CAAV,CAAa,CAArG,GAAiH,KAAjH,GAAgJ,WAAb,UAAR,MAAF,CAAE,CAAQ,EAAU,CAAV,CAAa,EAAS,UAAT,CAAhJ,GAAkK,GAAhM,C;EACP,C;;IAKsB,Q;IAFrB,UAAmC,CAAzB,aAAS,KAAM,SAAf,CAAyB,a;IAEd,gBAAR,c;IAAQ,sB;;MtDkKH,U;MAAA,6B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QAAM,IAAc,OsDlKO,WAAV,oBtDkKX,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;IsDnKY,yB;IAAR,iB;uEAAqI,G;MAAqC,kBAAR,c;MtD6hCtK,kBAAU,kB;MAOD,U;MAAA,+B;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QACZ,WAAqB,SsDriCyK,W;QtDsiClL,OAAZ,WAAY,EAAO,IAAP,C;;MsDtiC2C,MAAM,mCAA8B,StDwiCxF,WsDxiCwF,iBAA0H,KAA1H,MAA9B,C;;IAAnE,aAAa,I;IACb,MAAO,oBAAW,KAAX,EAAkB,CAAlB,EAAqB,KAArB,C;EACR,C;;;;;;;IAGyC,qB;MAAA,QAA4B,wB;IAAsB,uB;MAAA,UAAuB,yB;IAAuB,OAAA,IAAK,oBAAW,OAAQ,gBAAO,SAAP,EAAa,KAAM,cAAgB,IAAK,SAArB,CAAnB,CAAnB,mB;EAAL,C;;IAExG,OAAe,iBAAf,kBAAe,C;EAAmB,C;;;WCcwB,yB;EDd5F,C;;IE3DC,oB;MAAA,OAAiB,gB;IACjB,uB;MAAA,UAAmB,C;IACnB,uB;MAAA,UAAmB,C;IACnB,oB;MAAA,OAAoB,I;IAJpB,oB;IACA,gB;IACA,sB;IACA,sB;IACA,gB;IACG,2BAAe,iB;EANE,C;;;MAOE,OAAA,WAAO,K;IAAP,C;;;IAEY,uBAAa,WAAb,eAA2B,SAA3B,kBAA0C,YAA1C,kBAA4D,YAA5D,eAA2E,SAA3E,M;EAAA,C;;;MAH/B,qC;IAAA,C;;MAAA,qC;IAAA,C;;;;;;;;IxDwsDgB,Q;IADhB,UAAe,C;IACC,OwDlsDuB,SxDksDvB,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MACZ,YAAgB,OwDnsDmC,KxDmsDnD,I;;IwDnsDmC,OxDqsDhC,G;EwDrsDgC,C;;ICZpB,2BAAe,iB;IACrC,aAAiB,C;IACjB,cAAkB,C;IAClB,oBAAwB,C;EAHzB,C;;;MAKwB,YAAK,U;MAAL,aAAY,W;MAAZ,OnE8ByB,cAAW,eAAN,KAAM,CAAX,EAA8B,eAAP,MAAO,CAA9B,C;ImE9BzB,C;;;IAEW,4BAAkB,UAAlB,iBAAiC,WAAjC,cAA8C,iBAA9C,yBAAmE,UAAnE,O;EAAA,C;;;MAPZ,qC;IAAA,C;;MAAA,qC;IAAA,C;;;;;;;;ICCvB,oB;IAAc,wBAAY,KAAZ,EAAmB,MAAnB,E;EAAd,C;;;MAEE,WAAW,mCAAY,oBAAa,QAAF,CAAE,CAAb,C;MACX,gBAAZ,e;MnE4DE,SmE3DD,SAAkB,U;MnE2DjB,SmE1DD,UAAmB,W;MnE0DlB,SmEzDD,gBAAoB,E;MAL4D,OnE+DxE,S;;;MmExDR,gC;QAPgF,OAQjF,I;;;QARiF,O;;EAAA,C;;IAYjF,OAAO,cAAU,OAAO,eAAW,mCAAY,gBAAS,QAAF,CAAE,CAAT,CAAvB,CAAP,CAAV,C;EACR,C;;IAGG,WAAF,CAAE,EAAW,mCAAY,gBAAO,KAAM,WAAW,UAAxB,EAAmE,YAArB,KAAM,QAAN,GAAgB,GAAK,CAAnE,CAAvB,C;EACH,C;;;;;;;;IAlBD,2B;MAAA,U;;IAAA,oB;EAAA,C;;ICugCC,mC;IAz+BA,mBAAwB,gBACvB,CADuB,EAEvB,CAFuB,EAEpB,CAFoB,EAGvB,EAHuB,EAGnB,CAHmB,EAGhB,CAHgB,EAIvB,CAJuB,EAIpB,EAJoB,EAIhB,EAJgB,EAIZ,EAJY,EAKvB,EALuB,EAKnB,EALmB,EAKf,EALe,EAKX,EALW,EAKP,CALO,EAMvB,CANuB,EAMpB,EANoB,EAMhB,EANgB,EAMZ,EANY,EAMR,EANQ,EAMJ,EANI,EAOvB,EAPuB,EAOnB,EAPmB,EAOf,EAPe,EAOX,EAPW,EAOP,EAPO,EAOH,EAPG,EAOC,CAPD,EAQvB,CARuB,EAQpB,EARoB,EAQhB,EARgB,EAQZ,EARY,EAQR,EARQ,EAQJ,EARI,EAQA,EARA,EAQI,EARJ,EASvB,EATuB,EASnB,EATmB,EASf,EATe,EASX,EATW,EASP,EATO,EASH,EATG,EASC,EATD,EAUvB,EAVuB,EAUnB,EAVmB,EAUf,EAVe,EAUX,EAVW,EAUP,EAVO,EAUH,EAVG,EAWvB,EAXuB,EAWnB,EAXmB,EAWf,EAXe,EAWX,EAXW,EAWP,EAXO,EAYvB,EAZuB,EAYnB,EAZmB,EAYf,EAZe,EAYX,EAZW,EAavB,EAbuB,EAanB,EAbmB,EAaf,EAbe,EAcvB,EAduB,EAcnB,EAdmB,EAevB,EAfuB,E;IAkBxB,iBAAsB,I;IACtB,iBAAsB,G;IACtB,iBAAsB,I;IACtB,iBAAsB,I;IACtB,iBAAsB,I;IACtB,iBAAsB,I;IACtB,kBAAuB,I;IACvB,oBAAyB,I;IAsBzB,eAAyB,C;IACzB,gBAA0B,C;IAC1B,cAA0B,I;IAC1B,eAA4B,I;IAC5B,oBzB6BmD,kB;IyB5BnD,wBAAuC,I;EArDxC,C;;EA6BW,C;;;;;;;IAaT,sB;IACA,oB;IACA,oB;IACA,kC;EAJU,C;;;;;;;IAcwB,OAAQ,Y5DwvBF,MAA8B,M4DxvB/B,C5DwvB+B,C4DxvB5B,C;EAAR,C;;IAEZ,wB;MAAA,WzBwB4B,kB;;IyBxBkB,qB;MAAA,QAAiB,C;IAA/D,wB;IAA8C,kB;EAA/C,C;;IAEpB,OAAO,aAAS,KAAT,IAAiB,KAAxB,C;MAA+B,aAAS,WAAI,IAAJ,C;IACxC,0BAAS,KAAT,EAAkB,KAAlB,C;EACD,C;;;;;;;IAJsB,oB;EAAvB,C;;IAAqE,iB;EAArE,C;;IAAA,mCAAuB,8CAAvB,EAAqE,qCAArE,C;EAAA,C;;IAAA,OAAuB,wDAAvB,IAAqE,wCAArE,O;EAAA,C;;IAAA,c;IAAuB,yD;IAA8C,sD;IAArE,a;EAAA,C;;IAAA,4IAAuB,4CAAvB,IAAqE,sCAArE,I;EAAA,C;;IAWsD,IAInC,IAJmC,EAKlC,M;IARnB,QAAQ,C;IACR,WzBekD,kB;IyBdlD,aAAa,E;IACb,Y;MAAO,sBAAS,C;MAAT,W;QAAoB,QAAY,SAAS,CAAT,I;QAAjB,gBAAK,WvDhGW,KAAQ,CAAH,CAAG,CAAb,GAAyB,GuDgGpC,C;;;;MAA+B,uB;;IACrD,IAAK,WAAI,6BAAJ,C;IACL,QAAqB,iBAAK,CAAL,C;IACrB,K;IACkB,a;IAAlB,aAAU,CAAV,gB;MACmB,SAAA,WvDrGmB,KAAQ,CuDqGf,CvDrGe,CAAb,GAAyB,G;MuDqGzD,aAAU,CAAV,kB;QACC,IAAI,IAAK,kBAAS,IAAK,KAAL,GAAY,CAAZ,IAAT,C;QACT,c;QAAe,aAAF,CAAE,M;QAAO,UAAO,C;QAA3B,kCAAoB,MvDvGc,KAAQ,CAAH,GAAG,CAAb,GAAyB,GuDuGtD,C;QACF,OAAO,CAAE,MAAF,GAAU,CAAjB,C;UACC,IAAI,IAAK,kBAAS,IAAK,KAAL,GAAY,CAAZ,IAAT,C;;QAEV,yB;QACA,IAAK,WAAI,CAAJ,C;QACL,OAAO,IAAK,KAAL,IAAa,CAApB,C;UACC,IAAI,6B;UACJ,IAAK,WAAI,CAAJ,C;UACL,CAAE,oBAAW,CAAE,MAAb,EAAoB,CAAE,SAAtB,C;UACF,IAAI,C;;QAEL,a;;MAED,IAAI,KAAI,CAAJ,QAAQ,MAAZ,C;QAEC,IAAI,6B;QACJ,IAAK,WAAI,CAAJ,C;QACL,CAAE,oBAAW,CAAE,MAAb,EAAoB,CAAE,SAAtB,C;QACF,IAAI,C;;;IAGN,OAAO,iBAAK,CAAL,CAAQ,S;EAChB,C;;IAwBC,mB;MAEE,UAGe,MAHf,EAGe,MAHf,EAKoB,MALpB,EAKoB,M;MANrB,IAAI,sBAAY,CAAhB,C;QACC,0B;QAAA,kC;QACA,OAAQ,sBAAa,mBAAd,GAA6B,C;;MAErB,+E;MAAhB,qBAAW,YvD3J0B,KAAQ,QAAb,GAAyB,G;MuD4JzD,IAAI,uBAAY,GAAhB,C;QACqB,+E;QAApB,eAAe,YvD7JqB,KAAQ,QAAb,GAAyB,G;QuD8JxD,IAAI,aAAY,CAAhB,C;UACC,UAAU,wBAAuD,WAA7B,sBAAa,CAAd,GAAoB,QAAU,EAAS,EAAT,CAAjE,C;;;MAIF,sBAAY,C;MACZ,OAAO,uBAAc,C;IAdtB,C;EAAA,C;;IAiBA,uB;MAMQ,IAEgB,I;MAPvB,WAAsB,I;MACtB,OAAO,IAAP,C;QACC,UAAU,iB;QACV,UAAU,iBAAK,GAAL,C;QAGT,WADK,GACL,c;UAAU,OAAO,G;aACjB,kBAFK,GAEL,Q;UAAc,OAAO,mD;;UACb,UAAU,0BAAV,C;;IATX,C;EAAA,C;;IAcA,yB;MACC,UAAU,M;MACV,QAAQ,C;MACR,OAAO,MAAM,CAAb,C;QACC,UAAU,iB;QACV,IAAK,KAAM,CAAP,GAAa,G;QACjB,iB;;MAED,OAAO,C;IARR,C;EAAA,C;;IAWA,yB;MACC,QAAQ,gBAAQ,MAAR,C;MACR,IAAI,KAAM,KAAO,MAAP,GAAgB,CAA1B,C;QAA+B,OAAO,C;MACtC,OAAO,KAAK,MAAO,MAAZ,IAAsB,CAAtB,I;IAHR,C;EAAA,C;;IAMA,gC;MACC,QAAQ,sBAAc,SAAU,eAAxB,C;MACR,WAAe,MAAK,CAAT,GAAY,CAAZ,GAAmB,yBAAiB,CAAjB,C;MAC9B,iBAAA,SAAU,KAAV,GAAkB,IAAlB,I;MACA,GAAG,CAAH,IAAQ,SAAU,K;MAClB,QAAQ,C;MACR,OAAO,IAAI,EAAX,C;QACC,SAAS,sBAAc,SAAU,eAAxB,C;QACT,QAAQ,KAAO,E;QACf,QAAQ,MAAO,C;QACf,IAAI,MAAK,CAAT,C;UACC,IAAI,IAAI,EAAR,C;YAAY,K;UACZ,QAAK,EAAL,I;UACA,Q;;QAED,QAAK,CAAL,I;QACA,QAAQ,6BAAU,CAAV,C;QACR,GAAG,CAAH,IAAQ,yBAAiB,CAAjB,C;QACR,a;;IAlBF,C;EAAA,C;;IAsBA,gC;MACC,QAAQ,sBAAc,SAAU,eAAxB,C;MACR,WAAe,MAAK,CAAT,GAAY,CAAZ,GAAoB,yBAAiB,CAAjB,KAAwB,kB;MACvD,iBAAA,SAAU,KAAV,GAAkB,IAAlB,I;MACA,GAAG,CAAH,IAAQ,SAAU,K;IAJnB,C;EAAA,C;;IAOA,gC;MACC,GAAG,CAAH,IAAQ,GAAG,CAAH,IAAU,qBAAc,kB;IADjC,C;EAAA,C;;IAKA,gC;MAEE,Q;MADD,IAAI,mBAAS,CAAb,C;QACC,uB;QAAA,+B;QACA,M;;MAED,QAAQ,qB;MACR,QACQ,mB;MACR,OAAO,KAAK,CAAZ,C;QACC,SAAS,sBAAc,SAAU,eAAxB,C;QACT,QAAQ,KAAO,E;QACf,QAAQ,MAAO,C;QACf,IAAI,MAAK,CAAT,C;UACC,IAAI,IAAI,EAAR,C;YACC,mBAAS,gBAAQ,CAAR,KAAc,KAAM,CAApB,IAAyB,CAAzB,I;YACT,K;;UAED,QAAK,EAAL,I;UACA,Q;;QAED,QAAK,CAAL,I;QACA,QAAQ,6BAAU,CAAV,C;QACR,GAAG,CAAH,IAAQ,qCAAiB,CAAjB,GAAuB,KAAM,kBAA7B,C;QACR,a;;IAvBF,C;EAAA,C;;IA6BA,gC;MAQQ,IA4CN,I;MAnDD,QAAQ,qB;MACR,QACQ,mB;MACR,QAAQ,C;YACF,OAAO,KAAK,CAAZ,C;QACL,QAAQ,6BAAU,CAAV,C;QACR,gBAAoB,GAAG,CAAH,IAAQ,CAAZ,GAAe,EAAf,GAAuB,C;gBACjC,4B;eACL,C;YACC,SAAS,sBAAc,SAAU,eAAxB,C;YACT,QAAQ,KAAO,E;YACf,IAAI,MAAO,C;YACX,IAAI,MAAK,CAAT,C;cACC,IAAI,IAAI,EAAR,C;gBACC,mBAAS,gBAAQ,CAAR,KAAc,KAAM,CAApB,K;gBACT,8BAAoB,C;;;gBAEpB,IAAI,E;gBACJ,8BAAoB,C;;;;cAGrB,IAAI,MAAK,CAAT,C;gBAAY,UAAU,sBAAV,C;cACZ,kCAAwB,yBAAiB,CAAjB,C;cACxB,8BAAwB,MAAK,CAAT,GAAY,CAAZ,GAAmB,C;;;YAExC,a;eAED,C;eAAA,C;YACC,IAAI,GAAG,CAAH,MAAS,CAAb,C;cACC,GAAG,CAAH,OAAG,CAAH,IAAS,YAAC,qBAAc,kBAAf,EAA6B,SAA7B,CAAT,I;;cAEA,a;cACA,IAAI,MAAK,CAAT,C;gBAAY,8BAAwB,gCAAqB,CAAzB,GAA4B,CAA5B,GAAmC,C;;;YALrE,K;eAQA,C;YACC,IAAI,GAAG,CAAH,MAAS,CAAb,C;cACC,GAAG,CAAH,OAAG,CAAH,IAAS,YAAC,qBAAc,kBAAf,EAA6B,SAA7B,CAAT,I;;cAEA,GAAG,CAAH,IAAQ,mCAA0B,kB;cAClC,8BAAoB,C;;;YALtB,K;eAQA,C;YACC,IAAI,GAAG,CAAH,MAAS,CAAb,C;cACC,GAAG,CAAH,OAAG,CAAH,IAAS,YAAC,qBAAc,kBAAf,EAA6B,SAA7B,CAAT,I;YAFF,K;;QAKD,a;;MAED,IAAI,gCAAqB,CAAzB,C;QACC,uB;QAAA,+B;QACA,IAAI,qBAAU,CAAd,C;UACC,8BAAoB,C;;IAtDvB,C;EAAA,C;;IA0DA,mD;MACC,aAAc,MAAM,mBAAN,IAAD,GAAuB,C;MACpC,aAAa,MAAM,mB;MACnB,eAAe,oBAAS,SAAU,EAAnB,IAAuB,GAAvB,I;MACf,eAAe,oBAAS,SAAU,EAAnB,IAAuB,GAAvB,I;MACf,OAAO,SAAP,EAAkB,SAAU,OAAV,aAAiB,QAAjB,cAA2B,QAA3B,CAAlB,C;IALD,C;EAAA,C;;IASC,eAAgB,MAAM,SAAU,cAAhB,IAAD,GAAmC,C;IAClD,eAAe,MAAM,SAAU,c;IAC/B,OAAO,SAAP,EAAkB,SAAU,OAAV,aAAiB,QAAjB,cAA2B,QAA3B,CAAlB,C;EACD,C;;IAIe,UAUG,MAVH,EA4BK,MA5BL,EAiCK,M;IA1OpB,sBACoB,a;IACpB,mBACa,MADb,C;IAEA,kBAAkB,KAAM,Y;IACxB,kBAAkB,KAAM,Y;IAOxB,kBAAkB,U;IAClB,mBAAe,CAAf,C;IACA,oBAAgB,CAAhB,C;IAEA,iF;IAiBA,iE;IAcA,qD;IAWA,uE;IAMA,iG;IAsBA,qG;IAOA,uF;IAIA,iBAAa,CAAb,C;IACA,wJ;IA2BA,4BAAwB,CAAxB,C;IACA,gCAA4B,CAA5B,C;IACA,qN;IA0DA,6D;IAQA,oD;IAMA,uBAAuB,UAAW,K;IAClC,a;IACe,IAAI,WAAJ,C;MACd,OAAI,kBAAiB,CAArB,GACK,mBAAkB,CAAtB,4D;e5CvVJ,4B;M4CuV6B,CAAzB,kE;e5CvVJ,iC;M4CuVkD,CAA9C,CADD,GAGK,mBAAkB,CAAtB,4D;e5CzVJ,4B;M4CyV6B,CAAzB,kE;e5CzVJ,iC;M4CyVkD,CAA9C,C;;;;e5CzVJ,6B;M4C2VG,C;;IAND,mB;IASA,UAAU,C;IACQ,IAAI,qBAAoB,CAAxB,C;MACjB,qBAAA,uBAAW,CAAX,CAAc,cAAd,EAA8B,uBAAW,CAAX,CAAc,gBAA5C,C;;;MAEA,kCAAc,KAAM,cAApB,C;;IAHD,wB;IAKA,IAAI,oBAAiB,CAArB,C;MACC,kBAAgB,W;;IAGjB,K;IACA,K;IACA,OAAO,MAAM,WAAb,C;MAEC,aAAU,CAAV,MAAkB,gBAAlB,M;QAAoC,uBAAW,CAAX,SAAqB,C;MACzD,WAAS,C;MAET,IAAI,qBAAoB,CAAxB,C;QACC,YAAY,uBAAW,CAAX,C;QACM,wB;QAAlB,aAAU,CAAV,kB;UACC,YAAY,SAAZ,EAAuB,QAAvB,EAAiC,GAAjC,C;UACA,iB;;;;QAGiB,wB;QAAlB,eAAU,CAAV,sB;UACC,eAAU,CAAV,QAAkB,gBAAlB,Q;YACC,YAAY,uBAAW,GAAX,C;YACZ,IAAI,SAAU,E;YACd,IAAI,SAAU,E;YACd,aAAU,CAAV,MAAkB,CAAlB,M;cACC,aAAU,CAAV,MAAkB,CAAlB,M;gBACC,UAAU,SAAV,EAAqB,QAArB,EAA+B,GAA/B,EAAoC,CAApC,EAAuC,CAAvC,C;;;;UAIH,iB;UAGA,IAAI,QAAO,WAAX,C;YAAwB,K;;;MAK1B,cAAY,C;MACE,UAAK,U;MAAL,cAAA,IvDpYuB,KAAQ,CAAH,GAAG,CAAb,GAAyB,GuDoY3C,KAAiB,C;MAAM,UAAK,aAAS,CAAT,I;MAA1C,aAAa,SAAwB,IvDpYA,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;MuDqYzD,IAAI,SAAS,KAAb,C;QACC,UAAU,sBAAV,C;;MAGD,IAAc,KAAV,wBAAkB,KAAtB,C;QACC,0BAAU,CAAV,I;;;QAEA,K;;;IAIF,OAAO,aAAS,WAAT,I;EACR,C;;IAaC,sC;MAMC,SAAS,iBAAU,kB;MACnB,M;MACA,M;MACA,M;MACA,M;MACA,M;MACA,M;MACA,M;MACA,M;MACA,K;MACA,QACQ,M;MAGR,aAAU,CAAV,MAAkB,EAAlB,M;QAAsB,EAAE,CAAF,IAAO,eAAG,CAAH,GAAQ,GAAG,CAAH,CAAR,C;MAG7B,eAAU,CAAV,QAAkB,CAAlB,Q;QACC,UAAU,IAAI,GAAJ,I;QAGV,IAAI,EAAE,IAAI,GAAJ,IAAF,MAAc,CAAd,IAAmB,EAAE,IAAI,GAAJ,IAAF,MAAc,CAAjC,IAAsC,EAAE,IAAI,GAAJ,IAAF,MAAc,CAApD,IACH,EAAE,IAAI,GAAJ,IAAF,MAAc,CADX,IACgB,EAAE,IAAI,GAAJ,IAAF,MAAc,CAD9B,IACmC,EAAE,IAAI,GAAJ,IAAF,MAAc,CADjD,IAEH,EAAE,IAAI,GAAJ,IAAF,MAAc,CAFf,C;UAGC,IAAK,yCAAW,EAAE,IAAI,GAAJ,IAAF,CAAX,CAAD,GAAyB,GAAzB,IAAkC,E;UACtC,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,EAAE,IAAI,GAAJ,IAAF,IAAa,C;UACb,Q;;QAID,KAAM,yCAAW,EAAE,IAAI,GAAJ,IAAF,CAAX,CAAD,GAAyB,GAAzB,IAAkC,C;QACvC,KAAM,yCAAW,EAAE,IAAI,GAAJ,IAAF,CAAX,CAAD,GAAyB,GAAzB,IAAkC,C;QACvC,KAAK,EAAE,IAAI,GAAJ,IAAF,C;QACL,KAAK,EAAE,IAAI,GAAJ,IAAF,C;QACL,KAAM,2CAAc,EAAE,IAAI,GAAJ,IAAF,IAAa,EAAE,IAAI,GAAJ,IAAF,CAAb,IAAd,CAAD,GAA0C,GAA1C,IAAmD,C;QACxD,KAAM,2CAAc,EAAE,IAAI,GAAJ,IAAF,IAAa,EAAE,IAAI,GAAJ,IAAF,CAAb,IAAd,CAAD,GAA0C,GAA1C,IAAmD,C;QACxD,KAAK,EAAE,IAAI,GAAJ,IAAF,KAAe,C;QACpB,KAAK,EAAE,IAAI,GAAJ,IAAF,KAAe,C;QAGpB,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,GAA/B,IAAwC,C;QAC5C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,GAA/B,IAAwC,C;QAC7C,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QAGL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC7C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC9C,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC7C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC9C,KAAK,C;QAGL,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;QACb,EAAE,IAAI,GAAJ,IAAF,IAAa,KAAK,EAAL,I;;MAId,eAAY,CAAZ,QAAoB,CAApB,Q;QAEC,IAAI,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CAAlB,IAAuB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CAAzC,IAA8C,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CAAhE,IACH,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CADf,IACoB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CADtC,IAC2C,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CAD7D,IAEH,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,MAAkB,CAFnB,C;UAGC,IAAK,yCAAW,OAAO,MAAM,CAAN,IAAP,CAAX,CAAD,GAA8B,IAA9B,IAAwC,E;UAC5C,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,C;UACjB,Q;;QAID,KAAM,yCAAW,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,CAAX,CAAD,GAA6B,IAA7B,IAAuC,E;QAC5C,KAAM,yCAAW,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,CAAX,CAAD,GAA6B,IAA7B,IAAuC,E;QAC5C,KAAK,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,C;QACL,KAAK,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,C;QACL,KAAM,2CAAc,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,CAAjB,IAAd,CAAD,GAAkD,IAAlD,IAA4D,E;QACjE,KAAM,2CAAc,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,CAAjB,IAAd,CAAD,GAAkD,IAAlD,IAA4D,E;QACjE,KAAK,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,C;QACL,KAAK,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,C;QAGL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC7C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC9C,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QAGL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACtB,KAAM,EAAD,GAAM,EAAN,GAAW,CAAX,IAAkB,C;QACvB,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC7C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC9C,KAAK,C;QACL,IAAK,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC7C,KAAM,gBAAK,0BAAL,CAAD,GAAgB,gBAAK,0BAAL,CAAhB,GAA+B,IAA/B,IAAyC,E;QAC9C,KAAK,C;QAGL,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;QACjB,EAAE,KAAI,CAAJ,QAAQ,GAAR,IAAF,IAAiB,KAAK,EAAL,I;;MAIlB,eAAU,CAAV,QAAkB,EAAlB,Q;QACC,aAAa,OAAQ,EAAE,GAAF,CAAD,GAAQ,CAAR,IAAe,CAAtB,K;QACb,QAAiB,SAAS,CAAb,GAAgB,CAAhB,GAA2B,SAAS,GAAb,GAAmB,GAAnB,GAA6B,M;QAAjE,OvD9jBuD,KAAL,CuD8jB1C,GvD9jB0C,IAAiB,S;;IuD6ZrE,C;EAAA,C;;IAqKyB,IAYA,IAZA,EAYA,M;IAxLzB,YzB1SkD,kB;IyB2SlD,oBAAoB,SAAU,c;IAC9B,sBAAsB,SAAU,gB;IAChC,qBAAqB,iBAAkB,C;IACvC,SAAS,eAAS,EAAT,C;IACT,QAAQ,gBAAW,EAAX,C;IAER,2F;IAqKA,oBAAiB,CAAjB,aAAyB,eAAzB,a;MACC,eAAe,YAAa,C;MAC5B,aAAU,CAAV,MAAkB,CAAlB,M;QACC,KAAM,WAAI,gBAAW,cAAX,CAAJ,C;MACP,oBAAiB,CAAjB,aAAyB,aAAzB,a;QACC,mBAAmB,SAAU,OAAV,aAAiB,QAAjB,cAA2B,QAA3B,CAAnB,EAAyD,CAAzD,EAA4D,EAA5D,C;QAEA,aAAa,C;QACb,aAAa,YAAa,C;QAC1B,aAAU,CAAV,MAAkB,CAAlB,M;UACC,WAAW,kBAAM,WAAW,CAAX,IAAN,C;UACX,eAAU,CAAV,QAAkB,CAAlB,Q;YACsB,qD;YAAhB,sBAAS,GAAT,I;YAAL,QAAmB,CvD/kBe,KAAQ,QAAb,GAAyB,G;YuD+kBtD,IvD9kBqD,KAAL,WAAiB,S;;;;;IuDklBrE,OAAO,K;EACR,C;;IAEuC,OAAI,IAAI,CAAR,GAAW,CAAX,GAAsB,IAAI,GAAR,GAAa,GAAb,GAAsB,C;EAAxC,C;;IAGe,sBAAW,SAAK,K1DgwY3C,O0DhwY4D,I1DgwY5D,E0DhwYkE,E1DgwYlE,C0DhwY2B,C;EAAA,C;;IAGrD,U;IACA,U;IACA,sC;IAEA,sBAAgC,W;IAChC,sBAAgC,W;IAChC,yBAAkC,eAAS,CAAT,C;IAClC,YAAgB,C;IAChB,qBAAyB,C;IACzB,uBAA2B,C;IAC3B,cAAa,W;EAXM,C;;;;;;;IAuBnB,oB;MAAA,OAAgB,C;IAChB,oB;MAAA,OAAgB,C;IARhB,wB;IACA,8B;IACA,0B;IACA,0B;IACA,oC;IACA,4B;IACA,sC;IACA,gB;IACA,gB;IAEA,mBAAuB,C;IACvB,qBAAyB,C;EAZf,C;;;;;;;IAiBV,mB;MAEc,wB;MAAA,QAAK,gB;MAAL,YvD7nBwB,UAAQ,CAAH,CAAG,CAAb,GAAyB,GuD6nB5C,KAAiB,C;MAAM,0B;MAAA,UAAK,mBAAS,CAAT,I;MAAzC,YAAY,OvD7nByB,YAAQ,CAAH,GAAG,CAAb,GAAyB,G;MuD8nBzD,sCAAU,CAAV,I;MACA,OAAO,K;IAJR,C;EAAA,C;;IAOA,mB;MACC,UAAU,oB;MACuB,gBAAV,YAAK,K;MAAK,gBAAY,gB;MAAZ,cAAoB,mBAAS,GAAT,GAAe,CAAf,I;MAArD,YAAY,e1DqtYC,SAAY,OAAM,SAAN,EAAiB,OAAjB,C0DrtYb,C;MACZ,sCAAU,KAAM,KAAhB,I;MACA,OAAO,K;IAJR,C;EAAA,C;;IAOA,wB;MAGmB,UAMA,M;MARlB,WAAW,C;MACX,WAAW,C;MACO,OAAA,KAAM,WAAN,W;MAAlB,OAAkB,cAAlB,C;QAAkB,2B;QACjB,IAAI,OAAO,SAAU,EAArB,C;UAAwB,OAAO,SAAU,E;QACzC,IAAI,OAAO,SAAU,EAArB,C;UAAwB,OAAO,SAAU,E;;MAE1C,kBAAkB,yBAAM,KAAqB,eAArB,GAAiC,GAAjC,GAA2C,IAAjD,C;MAClB,oBAAoB,yBAAM,KAAgB,UAAhB,GAA4B,GAA5B,GAAsC,IAA5C,C;MACF,SAAA,KAAM,WAAN,W;MAAlB,OAAkB,gBAAlB,C;QAAkB,+B;QACjB,oBAAoB,yBAAM,yBAAM,KAAqB,eAArB,GAAiC,GAAvC,IAA6C,WAAY,EAAzD,GAA0E,IAAhF,C;QACpB,sBAAsB,yBAAM,yBAAM,KAAgB,UAAhB,GAA4B,GAAlC,IAAwC,WAAY,EAApD,GAAqE,IAA3E,C;QACtB,0BAA0B,yBAAc,WAAU,EAAxB,C;QAC1B,4BAA4B,2BAAgB,WAAU,EAA1B,C;QAC5B,azB1iBgD,kB;QyB2iBhD,aAAU,CAAV,MAAkB,qBAAlB,M;UACC,UzB5iB+C,kB;UyB6iB/C,aAAU,CAAV,MAAkB,mBAAlB,M;YACC,GAAI,WAAI,eAAS,EAAT,CAAJ,C;UACL,MAAO,WAAI,GAAJ,C;;QAER,4BAA0B,a;QAC1B,8BAA4B,e;QAC5B,qBAAmB,M;;MAEpB,aAAa,I;MACb,aAAa,I;MACb,oBAAoB,W;MACpB,sBAAsB,a;IA5BvB,C;EAAA,C;;IA+CO,IAuC8B,IAvC9B,EA0CwD,MA1CxD,EA0CmC,MA1CnC,EAuDc,MAvDd,EA6DuB,MA7DvB,EAkFyB,MAlFzB,EA2Fe,MA3Ff,EA8GsB,MA9GtB,EAkH+B,MAlH/B,EAkHe,MAlHf,EAmHkB,MAnHlB,EAwHqB,OAxHrB,EAyHmB,OAzHnB,EA0H+B,OA1H/B,EAqJkB,OArJlB,EAuJI,OAvJJ,EAkKiC,O;IAhOxC,iBAAa,CAAb,C;IACA,2D;IAOA,6E;IAOA,iE;IA+BA,WAAkB,I;IAClB,YAAoB,I;IAEpB,S;IACA,oBAAoB,C;IAC4B,gBAAZ,SAAQ,EAAR,C;I3DigB3B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,8B;IAAb,OAAa,iBAAb,C;MAAa,yB;MACT,WAAY,W2DvkBoC,eAAS,CAAT,C3DukBpC,C;;I2DvkBlB,yBAAyB,e3DwkBhB,W2DxkBgB,C;IACzB,azBjkBkD,kB;IyBkkBL,kBAAZ,SAAQ,EAAR,C;I3D+fxB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,gC;IAAb,OAAa,iBAAb,C;MAAa,2B;MACT,aAAY,W2DrkBiC,W3DqkBjC,C;;I2DrkBlB,sBAAsB,e3DskBb,a2DtkBa,C;IACuB,kBAAZ,SAAQ,EAAR,C;I3D8fxB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,gC;IAAb,OAAa,iBAAb,C;MAAa,2B;MACT,aAAY,W2DpkBiC,W3DokBjC,C;;I2DpkBlB,sBAAsB,e3DqkBb,a2DrkBa,C;IACtB,iBAAiB,Y;IACjB,IAAI,eAAc,KAAlB,C;MACC,UAAU,eAAV,C;;IAGD,aAAa,Y;IACb,OAAO,eAAc,KAArB,C;cACO,W;aACL,K;UAAA,K;aAEA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;aAAA,K;UAEC,cAAc,e;UAEd,IAAI,eAAc,KAAlB,C;YACK,eAAA,OvDhsB8B,KAAQ,CuDgsB9B,CvDhsB8B,CAAb,GAAyB,GuDgsBlD,MAAc,E;YAAd,Y;cAAsB,WAAA,OvDhsBQ,KAAQ,CuDgsBR,CvDhsBQ,CAAb,GAAyB,GuDgsB5B,MAAc,E;;;YAApC,Y;cAA4C,WAAA,OvDhsBd,KAAQ,CuDgsBc,CvDhsBd,CAAb,GAAyB,GuDgsBN,MAAc,E;;;YAA1D,Y;cACH,WAAA,OvDjsBiC,KAAQ,CuDisBjC,CvDjsBiC,CAAb,GAAyB,GuDisBrD,MAAc,E;;;YADX,Y;cACmB,WAAA,OvDjsBW,KAAQ,CuDisBX,CvDjsBW,CAAb,GAAyB,GuDisB/B,MAAc,C;;YADrC,Y;cAEC,OAAO,qBACS,OvDnsBiB,KAAQ,CuDmsBjB,CvDnsBiB,CAAb,GAAyB,GuDksB9C,EAES,OvDpsBiB,KAAQ,CuDosBjB,CvDpsBiB,CAAb,GAAyB,GuDksB9C,EAGS,OvDrsBiB,KAAQ,CuDqsBjB,CvDrsBiB,CAAb,GAAyB,GuDksB9C,EAIM,CAAA,OvDtsBoB,KAAQ,CuDssBpB,CvDtsBoB,CAAb,GAAyB,GuDssBxC,KAAe,CAAhB,GAAsB,OvDtsBD,KAAQ,CuDssBC,CvDtsBD,CAAb,GAAyB,GuDksB9C,EAKM,CAAA,OvDvsBoB,KAAQ,CuDusBpB,EvDvsBoB,CAAb,GAAyB,GuDusBxC,KAAgB,CAAjB,GAAuB,OvDvsBF,KAAQ,CuDusBE,EvDvsBF,CAAb,GAAyB,GuDksB9C,EAMO,OvDxsBmB,KAAQ,CuDwsBnB,EvDxsBmB,CAAb,GAAyB,GuDksB9C,EAOQ,OvDzsBkB,KAAQ,CuDysBlB,EvDzsBkB,CAAb,GAAyB,GuDksB9C,EAQc,gBAAR,OAAQ,EAAS,EAAT,EAAa,KAAK,iBAAI,OvD1sBV,KAAQ,CuD0sBU,EvD1sBV,CAAb,GAAyB,GuD0sBd,OAAkB,OvD1sBxB,KAAQ,CuD0sBwB,EvD1sBxB,CAAb,GAAyB,GuD0sBd,CAAL,IAAb,CARd,C;;;;UAaT,IAAI,eAAc,KAAlB,C;YACK,eAAA,OvDhtB8B,KAAQ,CuDgtB9B,CvDhtB8B,CAAb,GAAyB,GuDgtBlD,MAAc,E;YAAd,Y;cAAsB,WAAA,OvDhtBQ,KAAQ,CuDgtBR,CvDhtBQ,CAAb,GAAyB,GuDgtB5B,MAAc,G;;;YAApC,Y;cAA4C,WAAA,OvDhtBd,KAAQ,CuDgtBc,CvDhtBd,CAAb,GAAyB,GuDgtBN,MAAc,G;;;YAA1D,Y;cACH,WAAA,OvDjtBiC,KAAQ,CuDitBjC,CvDjtBiC,CAAb,GAAyB,GuDitBrD,MAAc,E;;;YADX,Y;cACmB,WAAA,OvDjtBW,KAAQ,CuDitBX,CvDjtBW,CAAb,GAAyB,GuDitB/B,MAAc,G;;;YADjC,Y;cACyC,WAAA,OvDjtBX,KAAQ,CuDitBW,CvDjtBX,CAAb,GAAyB,GuDitBT,MAAc,C;;YAD3D,Y;cAEC,QAAQ,sBACG,OvDntBsB,KAAQ,CuDmtBtB,CvDntBsB,CAAb,GAAyB,GuDktB7C,EAEG,CAAA,OvDptBsB,KAAQ,CuDotBtB,CvDptBsB,CAAb,GAAyB,GuDotB1C,KAAe,CAAhB,GAAsB,OvDptBC,KAAQ,CuDotBD,CvDptBC,CAAb,GAAyB,GuDktB7C,EAGG,CAAA,OvDrtBsB,KAAQ,CuDqtBtB,CvDrtBsB,CAAb,GAAyB,GuDqtB1C,KAAe,CAAhB,GAAsB,OvDrtBC,KAAQ,CuDqtBD,EvDrtBC,CAAb,GAAyB,GuDktB7C,EAIS,CAAA,OvDttBgB,KAAQ,CuDstBhB,EvDttBgB,CAAb,GAAyB,GuDstBpC,MAAe,CAJxB,C;;;;UAvBX,K;aAgCA,K;UACC,+BAA+B,Y;UAC/B,4BAA4B,2BAA2B,QAA3B,GAAoC,CAApC,I;UAC5B,OAAO,WAAS,qBAAhB,C;YAC6B,SAAK,eAAL,EAAK,uBAAL,O;YAA5B,4BAA4B,IvD/tBM,KAAQ,CAAH,CAAG,CAAb,GAAyB,G;YuDguBtD,gBAAgB,eAAS,EAAT,C;oBACV,yBAA0B,CAA1B,C;mBACL,C;gBAAK,aAAU,CAAV,MAAkB,EAAlB,M;kBAAgC,0BAAU,CAAV,C;kBAAgB,WAAK,iBAAL,EAAK,yBAAL,S;kBAA1B,oBAA0B,IvDluBpB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;;;gBuDkuBrD,K;mBACA,C;gBAAK,eAAU,CAAV,QAAkB,EAAlB,Q;kBAAsB,UAAU,iBAAU,GAAV,CAAV,IAA0B,Y;gBAArD,K;sBACQ,UAAU,yBAAV,C;gBAHT,K;;YAKA,+BAAmB,wBAA0B,EAA7C,EAAmD,SAAnD,C;;;UAXF,K;aAcA,K;aAAA,K;aAAA,K;UAEC,Y;UAIa,WAAK,iBAAL,EAAK,yBAAL,S;UAHb,QAAQ,sBACK,eAAc,KADnB,EAEQ,eAAc,KAFtB,EAGK,IvD/uBsB,KAAQ,CAAH,GAAG,CAAb,GAAyB,GuD4uB/C,EAIK,YAJL,EAKU,YALV,EAMM,kBANN,EzB/nBuC,kByB+nBvC,C;UASc,WAAK,iBAAL,EAAK,yBAAL,S;UAAtB,sBAAsB,IvDrvBa,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;UuDsvBvD,e;UAGA,aAAU,CAAV,MAAkB,eAAlB,M;YACe,UAAK,Q;YAAnB,cAAc,IvD1vBoB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;YuD2vB9C,UAAK,WAAS,CAAT,I;YAAb,QAAQ,CAAA,IvD3vB0B,KAAQ,CAAH,GAAG,CAAb,GAAyB,GuD2vB9C,KAAqB,C;YACrB,UAAK,WAAS,CAAT,I;YAAb,QAAQ,IvD5vB0B,KAAQ,CAAH,GAAG,CAAb,GAAyB,GuD4vB9C,GAAqB,E;YACnB,UAAK,WAAS,CAAT,I;YAAf,UAAU,IvD7vBwB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;YuD8vBhD,CAAN,0CAAM,iBAAgB,WAAI,WAAJ,C;YACtB,OAAa,CAAN,0CAAM,YAAW,KAAjB,IAAyB,WAAhC,C;cAAmD,CAAN,0CAAM,YAAW,WAAI,+BAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAJ,C;YACxD,CAAN,0CAAM,YAAN,aAAiB,WAAjB,EAAgC,+BAAmB,CAAnB,EAA0B,CAA1B,EAA+C,GAA/C,CAAhC,C;YACA,sBAAU,CAAV,I;;;UAED,kBAAkB,0CAAlB,C;UACA,MAAO,WAAI,0CAAJ,C;UA3BR,K;aA6BA,K;UACC,oBAAoB,Y;UACpB,UAAQ,C;UACR,OAAO,MAAI,aAAX,C;YACwB,WAAK,iBAAL,EAAK,yBAAL,S;YAAvB,uBAAuB,IvD1wBW,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;YuD2wBtD,kBAAkB,gBAAW,EAAX,C;YAClB,oBAAoB,C;YACpB,eAAU,CAAV,QAAkB,EAAlB,Q;cACkB,UAAK,Q;cAAtB,UAAiB,IvD9wBgB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuD8wBrD,WvD7wBoD,KAAL,CuD6wBnC,GvD7wBmC,IAAiB,W;cuD8wBhE,iCAAiB,WvD/wBgB,KAAQ,CuD+wBZ,GvD/wBY,CAAb,GAAyB,GuD+wBrD,K;cACA,2B;;YAED,oBAAoB,gBAAW,aAAX,C;YACF,sB;YAAlB,eAAU,CAAV,sB;cACoB,UAAK,Q;cAAxB,UAAmB,IvDpxBc,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuDoxBrD,avDnxBoD,KAAL,CuDmxBjC,GvDnxBiC,IAAiB,W;cuDoxBhE,2B;;YAGD,aAAK,EAAL,GAAU,aAAV,K;YAEA,YAAiB,oBAAqB,CAAtB,KAA4B,CAAhC,GAAmC,eAAnC,GAAwD,e;YACpE,kBAAM,mBAAqB,EAA3B,EAAiC,yBAAkB,WAAlB,EAA+B,aAA/B,CAAjC,C;;;UArBF,K;aAyBA,K;UACC,Y;UACA,gBAAgB,Y;UAFjB,K;aAIA,K;UACC,iBACiB,Y;UACI,YAAK,iBAAL,EAAK,yBAAL,S;UAArB,qBAAqB,IvDtyBc,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDuyBvD,iBzB1rB+C,kB;UyB2rB/C,a;UACA,eAAU,CAAV,QAAkB,cAAlB,Q;YACmB,UAAN,0CAAM,Y;YAAW,YAAK,iBAAL,EAAK,yBAAL,S;YAA7B,YAAY,mBAAiB,IvD1yBK,KAAQ,CAAH,IAAG,CAAb,GAAyB,GuD0yB1C,C;YACI,YAAK,iBAAL,EAAK,yBAAL,S;YAAhB,gBAAgB,IvD3yBkB,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;YuD4yBtD,2BAA2B,4BAAgB,aAAc,CAA9B,C;YAC3B,2BAA2B,4BAAgB,YAAc,EAA9B,C;YAC3B,UAAW,WAAI,SAAJ,C;;;UAEQ,YAAK,kBAAL,EAAK,0BAAL,U;UAApB,oBAAoB,IvDhzBe,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDizBrC,YAAK,kBAAL,EAAK,0BAAL,U;UAAlB,kBAAkB,IvDjzBiB,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDkzBzB,YAAK,kBAAL,EAAK,0BAAL,U;UAA9B,8BAA8B,IvDlzBK,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDmzBvD,gBAAgB,kBACf,IADe,EACT,QADS,EAEf,0CAFe,EAER,UAFQ,EAEI,aAFJ,EAGf,aAHe,EAGA,WAHA,EAIf,2BAA4B,CAJb,EAKf,0BAA4B,EALb,C;UAOhB,sBAAU,SAAV,I;UAvBD,K;gBA0BK,WAAK,WAAS,CAAT,I;UAAL,eAAA,IvD7zB+B,KAAQ,CAAH,IAAG,CAAb,GAAyB,GuD6zBnD,MAAoB,G;UAApB,Y;YACH,WAAK,WAAS,CAAT,I;YAAL,WAAA,IvD9zBkC,KAAQ,CAAH,IAAG,CAAb,GAAyB,GuD8zBtD,KAAoB,G;;;;UADjB,Y;YACyB,WAAK,WAAS,CAAT,I;YAAL,WAAA,IvD9zBM,KAAQ,CAAH,IAAG,CAAb,GAAyB,GuD8zB1B,KAAoB,G;;;UADjD,Y;YAIC,sBAAU,CAAV,I;;;YAEA,UAAU,yBAAoC,WAAX,UAAW,EAAS,EAAT,CAA9C,C;;;UA3IH,K;;MA+IA,aAAa,Y;;IAGd,IAAI,MAAO,KAAP,KAAe,CAAnB,C;MAAsB,UAAU,mCAAV,C;IAGG,UAAP,MAAO,K;IAAzB,eAAU,CAAV,uB;MACC,SAAS,mBAAO,GAAP,CAAU,W;MACT,uB;MAAV,OAAU,iBAAV,C;QAAU,sB;QACT,sBAAsB,+BAAmB,CAAE,gBAArB,C;QACtB,oBAAoB,E;;;IAItB,eAAmB,CAAN,0CAAM,gB;IACnB,gBAAoB,CAAN,0CAAM,W;IACpB,cAAY,I;IACZ,eAAa,K;IACb,oBzB5uBkD,kB;IyB6uBV,UAAhB,CAAN,0CAAM,iBAAgB,K;IAAxC,eAAU,CAAV,uB;MACC,kBAAsB,CAAN,0CAAM,YAAN,aAAuB,CAAN,0CAAM,iBAAN,aAAsB,GAAtB,CAAjB,C;MAChB,IAAK,aAAW,WAAI,0BACX,0BAAmB,0CAAnB,EAA0B,WAA1B,CADW,EAEV,WAAY,EAAZ,GAAmC,CAAX,0CAAW,MAFzB,EAGV,WAAY,EAAZ,GAAmC,CAAX,0CAAW,MAHzB,CAAJ,C;;EAMlB,C;;IAEgB,kB;IAA6B,oB;IAAmB,oB;EAAjD,C;;;;;;;IAUQ,IAMb,IANa,EAMb,MANa,EAkBb,MAlBa,EAkBb,MAlBa,EAmBb,MAnBa,EAmBb,MAnBa,EA2BN,MA3BM,EAyBC,MAzBD,EAwCZ,MAxCY,EAwCZ,MAxCY,EAyCZ,MAzCY,EAyCZ,OAzCY,EA0CZ,OA1CY,EA0CZ,OA1CY,EAiDZ,OAjDY,EAiDZ,OAjDY,EAkDZ,OAlDY,EAkDZ,OAlDY,EAmDZ,OAnDY,EAmDZ,OAnDY,EA8DN,OA9DM,EA4DC,OA5DD,EA+Fb,OA/Fa,EAgGb,OAhGa,EAiGb,OAjGa,EAkGb,O;IAzGT,aAAa,IAAK,QAAL,GAAa,KAAb,I;IACb,aAAa,IAAK,SAAL,GAAc,MAAd,I;IAEb,aAAa,C;IACb,iBAAiB,+BAAQ,MAAR,GAAiB,IAAK,aAAW,KAAjC,C;IACjB,WAAW,gBAAW,UAAX,C;YAEL,IAAK,aAAW,M;WACrB,C;QACC,iBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,aAAU,CAAV,MAAkB,MAAlB,M;UACC,qBAAqB,UAAW,MAAX,aAAmD,YAAhC,IAAI,UAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UACrB,aAAU,CAAV,MAAkB,KAAlB,M;YACM,qD;YAAY,QAAiD,YAAhC,IAAI,UAAW,OAAf,GAAwB,MAAQ,C;YAAlE,QAAiB,cvDp3BiB,KAAQ,CAAH,CAAG,CAAb,GAAyB,G;YuDo3BtD,IvDn3BqD,KAAL,WAAiB,S;;;;QuD82BpE,K;WASA,C;QAEC,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,iBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,eAAU,CAAV,QAAkB,MAAlB,Q;UACC,uBAAqB,YAAW,MAAX,aAAmD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UACrB,qBAAqB,UAAW,MAAX,aAAmD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UACrB,eAAU,CAAV,QAAkB,KAAlB,Q;YACM,2D;YAAY,UAAiD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;YAAlE,UAAiB,gBvDh4BiB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;YuDg4BtD,IvD/3BqD,KAAL,WAAiB,W;YuDg4B5D,2D;YAAY,UAAiD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,C;YAAlE,UAAiB,cvDj4BiB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;YuDi4BtD,IvDh4BqD,KAAL,WAAiB,W;;;;QuDu3BpE,K;WAaA,C;QAGO,W;QAAL,MAAK,UAAL,IAAK,QAAL,8CAA6B,IAA7B,C;UAAqC,a;;UAC7B,UAAK,SAAL,IAAK,iBAAL,qBAAuB,I;QAFhC,2B;QAKA,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,iBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,eAAU,CAAV,QAAkB,MAAlB,Q;UACC,uBAAqB,YAAW,MAAX,aAAmD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UACrB,uBAAqB,YAAW,MAAX,aAAmD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UACrB,qBAAqB,UAAW,MAAX,aAAmD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,CAAnD,C;UAErB,IAAI,CAAC,cAAL,C;YACC,eAAU,CAAV,QAAkB,KAAlB,Q;cACM,2D;cAAY,UAAiD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAAlE,UAAiB,gBvDt5BgB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuDs5BrD,IvDr5BoD,KAAL,WAAiB,W;cuDs5B3D,4D;cAAY,UAAiD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAAlE,UAAiB,gBvDv5BgB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuDu5BrD,IvDt5BoD,KAAL,YAAiB,W;cuDu5B3D,+D;cAAY,UAAiD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,C;cAAlE,UAAiB,cvDx5BgB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuDw5BrD,IvDv5BoD,KAAL,YAAiB,W;;;;YuD05BjE,eAAU,CAAV,QAAkB,KAAlB,Q;cACU,UAAiD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAA1D,SAAS,gBvD55BwB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuD65B5C,UAAiD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAA1D,SAAS,gBvD75BwB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuD85B5C,UAAiD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,C;cAA1D,SAAS,cvD95BwB,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuD+5BhD,+D;cAAL,UAAiB,mBAAwC,YAA3B,KAAK,SAAU,KAAK,KAAf,CAAsB,CAAxC,C;cAAjB,IvD95BoD,KAAL,YAAiB,W;cuD+5B3D,+D;cAAL,UAAiB,mBAAwE,YAA3D,KAAK,aAAc,KAAK,KAAnB,CAAL,GAAgC,cAAe,KAAK,KAApB,CAA2B,CAAxE,C;cAAjB,IvD/5BoD,KAAL,YAAiB,W;cuDg6B3D,+D;cAAL,UAAiB,mBAAwC,YAA3B,KAAK,SAAU,KAAK,KAAf,CAAsB,CAAxC,C;cAAjB,IvDh6BoD,KAAL,YAAiB,W;;;;;QuDo4BpE,K;WAiCA,C;QACC,IAAI,IAAK,QAAL,QAAJ,C;UAAwB,UAAU,uCAAV,C;QAIlB,W;QAAL,MAAK,UAAL,IAAK,QAAL,8CAA6B,IAA7B,C;UAAqC,c;;UAC7B,WAAK,UAAL,IAAK,iBAAL,sBAAuB,K;QAFhC,8B;QAIA,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,mBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,iBAAiB,IAAK,aAAL,aAAgB,CAAhB,C;QACjB,eAAU,CAAV,QAAkB,MAAlB,Q;UACC,uBAAqB,YAAW,MAAX,aAAkD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAlD,C;UACrB,uBAAqB,YAAW,MAAX,aAAkD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAlD,C;UACrB,uBAAqB,YAAW,MAAX,aAAkD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,CAAlD,C;UACrB,qBAAqB,UAAW,MAAX,aAAkD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,CAAlD,C;UACrB,eAAU,CAAV,QAAkB,KAAlB,Q;YACC,K;YACA,K;YACA,M;YACA,K;YAEA,IAAI,CAAC,gBAAL,C;cACK,UAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAApD,IAAI,gBvD97B6B,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuD+7BjD,UAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAApD,IAAI,gBvD/7B6B,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;cuDg8BhD,WAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAArD,KAAK,gBvDh8B4B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;cuDi8BjD,WAAgD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,C;cAApD,IAAI,cvDj8B6B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;;;cuDm8B5C,WAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAAzD,WAAS,gBvDn8BwB,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;cuDo8B5C,WAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAAzD,WAAS,gBvDp8BwB,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;cuDq8B5C,WAAgD,YAAhC,MAAI,YAAW,OAAf,GAAwB,MAAQ,C;cAAzD,WAAS,gBvDr8BwB,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;cuDu8BjD,WAAgD,YAAhC,MAAI,UAAW,OAAf,GAAwB,MAAQ,C;cAApD,IAAI,cvDv8B6B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;cuDy8BrD,IAAI,MAAM,mBAAsC,YAAzB,OAAK,SAAS,OAAK,GAAL,IAAT,CAAoB,CAAtC,CAAN,I;cACJ,IAAI,MAAM,mBAAoE,YAAvD,OAAK,aAAa,OAAK,GAAL,IAAb,CAAL,GAA8B,cAAc,OAAK,GAAL,IAAd,CAAyB,CAApE,CAAN,I;cACJ,KAAK,MAAM,mBAAsC,YAAzB,OAAK,SAAS,OAAK,GAAL,IAAT,CAAoB,CAAtC,CAAN,I;;YAEN,YAAK,gBAAL,EAAK,wBAAL,U;YAAA,UAAiB,MAAM,CAAN,I;YAAjB,IvD58BqD,KAAL,SAAiB,W;YuD68BjE,YAAK,gBAAL,EAAK,wBAAL,U;YAAA,UAAiB,MAAM,CAAN,I;YAAjB,IvD78BqD,KAAL,SAAiB,W;YuD88BjE,YAAK,gBAAL,EAAK,wBAAL,U;YAAA,WAAiB,MAAM,EAAN,I;YAAjB,IvD98BqD,KAAL,SAAiB,Y;YuD+8BjE,YAAK,gBAAL,EAAK,wBAAL,U;YAAA,WAAiB,MAAM,CAAN,I;YAAjB,IvD/8BqD,KAAL,SAAiB,Y;;;;QuDq6BpE,K;cA8CQ,UAAU,wBAAV,C;QAtGT,K;;IAwGA,OAAO,I;EACR,C;;IASuB,IAEF,IAFE,EAGL,MAHK,EAIJ,MAJI,EAKJ,MALI,EAMJ,MANI,EAOJ,MAPI,EAWF,MAXE,EAYQ,MAZR,EAYJ,MAZI,EAYJ,MAZI,EAaQ,MAbR,EAaJ,OAbI,EAaJ,OAbI,EAcQ,OAdR,EAcJ,OAdI,EAcJ,OAdI,EAeJ,OAfI,EAmBF,OAnBE,EAoBN,OApBM,EAqBN,OArBM,EAsBN,OAtBM,EAuBN,OAvBM,EAyBJ,OAzBI,EAyBJ,OAzBI,EA0BJ,OA1BI,EA0BJ,OA1BI,EA2BJ,OA3BI,EA2BJ,OA3BI,EA4BJ,O;IAlClB,YAAY,SAAU,M;IACtB,aAAa,SAAU,O;IACvB,qBAAqB,SAAU,K;IAC/B,WAAW,IAAK,WAAQ,KAAR,EAAe,MAAf,C;IAChB,QAAQ,C;IACR,QAAQ,C;YACF,IAAK,aAAW,M;WACrB,C;QACmB,0BAAQ,MAAR,C;QAAlB,aAAU,CAAV,gB;UACU,WAAK,UAAL,EAAK,kBAAL,S;UAAT,SAAS,IvDn+B0B,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;UuDo+BvD,WAAe,UAAf,EAAe,kBAAf,S;UAAA,cvDn+BsD,KAAL,QAAiB,OuDm+B5C,EvDn+B4C,C;UuDo+BlE,WAAe,UAAf,EAAe,kBAAf,S;UAAA,cvDp+BsD,KAAL,QAAiB,OuDo+B5C,EvDp+B4C,C;UuDq+BlE,WAAe,UAAf,EAAe,kBAAf,S;UAAA,cvDr+BsD,KAAL,QAAiB,OuDq+B5C,EvDr+B4C,C;UuDs+BlE,WAAe,UAAf,EAAe,kBAAf,S;UAAA,cvDt+BsD,KAAL,QAAiB,OuDs+B5C,GvDt+B4C,C;;;QuDg+BpE,K;WASA,C;QACmB,4BAAQ,MAAR,C;QAAlB,eAAU,CAAV,sB;UACgB,iD;UAAO,WAAK,UAAL,EAAK,kBAAL,S;UAAtB,QAAsB,IvD5+Ba,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;UuD4+BvD,cvD3+BsD,KAAL,WAAiB,S;UuD4+BnD,qD;UAAO,WAAK,UAAL,EAAK,kBAAL,S;UAAtB,UAAsB,IvD7+Ba,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;UuD6+BvD,cvD5+BsD,KAAL,YAAiB,W;UuD6+BnD,qD;UAAO,WAAK,WAAL,EAAK,mBAAL,U;UAAtB,UAAsB,IvD9+Ba,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;UuD8+BvD,cvD7+BsD,KAAL,YAAiB,W;UuD8+BlE,WAAe,WAAf,EAAe,mBAAf,U;UAAA,cvD9+BsD,KAAL,QAAiB,OuD8+B5C,GvD9+B4C,C;;;QuDy+BpE,K;WAQA,C;QACmB,6BAAQ,MAAR,C;QAAlB,gBAAU,CAAV,yB;UACS,YAAK,WAAL,EAAK,mBAAL,U;UAAR,QAAQ,IvDp/B2B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDq/B/C,YAAK,WAAL,EAAK,mBAAL,U;UAAR,QAAQ,IvDr/B2B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDs/B/C,YAAK,WAAL,EAAK,mBAAL,U;UAAR,QAAQ,IvDt/B2B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDu/B/C,YAAK,WAAL,EAAK,mBAAL,U;UAAR,QAAQ,IvDv/B2B,KAAQ,CAAH,IAAG,CAAb,GAAyB,G;UuDy/BxC,qD;UAAf,UAAsB,MAAM,mBAAY,eAAK,KAAI,IAAI,GAAJ,IAAJ,KAAL,IAAoB,CAApB,IAAZ,CAAN,I;UAAtB,cvDx/BsD,KAAL,YAAiB,W;UuDy/BnD,qD;UAAf,UAAsB,MAAM,mBAAY,eAAK,KAAI,IAAI,GAAJ,IAAJ,KAAL,IAAoB,CAApB,IAAZ,CAAN,I;UAAtB,cvDz/BsD,KAAL,YAAiB,W;UuD0/BnD,qD;UAAf,UAAsB,MAAM,mBAAY,eAAK,KAAI,IAAI,GAAJ,IAAJ,KAAL,IAAoB,CAApB,IAAZ,CAAN,I;UAAtB,cvD1/BsD,KAAL,YAAiB,W;UuD2/BlE,YAAe,WAAf,EAAe,mBAAf,U;UAAA,cvD3/BsD,KAAL,SAAiB,OuD2/B5C,GvD3/B4C,C;;;QuDi/BpE,K;cAaQ,UAAU,wBAAV,C;QA/BT,K;;EAiCD,C;;IAEqB,kB;IAAgB,oB;EAAjB,C;;;;;;;IAAC,iB;EAArB,C;;IAAqC,kB;EAArC,C;;IAAA,iCAAqB,qCAArB,EAAqC,wCAArC,C;EAAA,C;;IAAA,OAAqB,gDAArB,IAAqC,0CAArC,O;EAAA,C;;IAAA,c;IAAqB,sD;IAAgB,uD;IAArC,a;EAAA,C;;IAAA,4IAAqB,sCAArB,IAAqC,wCAArC,I;EAAA,C;;IACgB,kB;IAAgB,oB;IAAiB,gB;EAAlC,C;;;;;;;IAEf,qC;EAAA,C;;IAEE,UAAU,eAAW,QAAX,C;IACV,cAAc,iB;IACd,OAAQ,eAAM,GAAN,C;IACR,OAAmB,0BAAU,OAAQ,QAAlB,EAAyB,OAAQ,SAAjC,C;EACpB,C;;IAGC,WAAW,oBAAa,QAAb,C;IACX,OAAO,kBAAK,0BAAiB,IAAK,MAAtB,EAA6B,IAAK,OAAlC,EAA0C,IAAK,KAAK,KAApD,C;EACb,C;;IAGC,UAAU,eAAW,QAAX,C;IACV,cAAc,iB;IACd,OAAQ,eAAM,GAAN,C;IAER,YAAY,0BACH,OAAQ,QADL,EAEF,OAAQ,SAFN,EAGJ,gBAAW,YAAA,OAAQ,QAAR,EAAgB,OAAQ,SAAxB,IAAiC,CAAjC,IAAX,CAHI,C;IAMZ,OAAQ,yBAAgB,KAAhB,C;IAER,OAAO,K;EACR,C;;;;;;;;IA3BD,4C;MAAA,2B;;IAAA,qC;EAAA,C;;;;;;ECr/BD,mB;;IC+kBC,mC;IA1jBiB,uB;MAAA,UAAe,E;IAChC,gBAAqB,eAAS,EAAT,C;IACrB,iBAAsB,eAAS,EAAT,C;IACtB,gBAAqB,iBAAW,EAAX,C;IACrB,iBAAsB,iBAAW,EAAX,C;IACtB,eC3B8C,E;ID4B9C,gBC5B8C,E;ID6B9C,eC7B8C,E;ID8B9C,gBC9B8C,E;IFEY,YAAa,QC8B3C,KD9B2C,C;IAIvD,Q;IAAA,OAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,iB;MACI,MAAM,CAAN,ICyB+B,eAAS,CAAT,C;;IAAtC,iBDvBU,K;ICwBV,kBAAuB,eAAS,KAAT,C;IACvB,yBAA8B,eAAS,EAAT,C;IAC9B,YAAiB,eAAS,EAAT,C;IACjB,iBAAsB,4B;IACtB,iBAAsB,C;IACtB,iBAAsB,C;IAEtB,aAAkB,iBAAW,EAAX,C;IAClB,aAAkB,iBAAW,EAAX,C;IAClB,aAAkB,iBAAW,EAAX,C;IAClB,qBAA0B,eAAS,IAAT,C;IAC1B,wBAAkC,C;IA4hBjC,uB;IACA,2B;IACA,wB;IACA,kBAAW,OAAX,C;EArjBe,C;;IAyBf,aAAU,CAAV,MAAkB,EAAlB,M;MACS,QAAM,CAAC,4DAAU,CAAV,GAAe,EAAf,CAAwB,GAAJ,EAAI,IAAzB,IAAqC,K;MAAnD,QAAyD,Y9DuxBjB,MAA+B,OAAZ,CAAY,C8DvxBd,C;MACzD,IAAI,IAAI,CAAR,C;QACC,IAAI,C;;YACE,IAAI,IAAI,GAAR,C;QACN,IAAI,G;;MAEL,cAAO,8CAAQ,CAAR,CAAP,IAAqB,C;;IAGtB,aAAU,CAAV,MAAkB,EAAlB,M;MACS,UAAM,CAAC,6DAAW,CAAX,GAAgB,EAAhB,IAAqB,IAAtB,IAA6B,K;MAA3C,QAAiD,Y9D6wBT,MAA+B,OAAZ,GAAY,C8D7wBtB,C;MACjD,IAAI,IAAI,CAAR,C;QACC,IAAI,C;;YACE,IAAI,IAAI,GAAR,C;QACN,IAAI,G;;MAEL,eAAQ,8CAAQ,CAAR,CAAR,IAAsB,C;;IAGvB,QAAQ,C;IACR,eAAY,CAAZ,QAAoB,CAApB,Q;MACC,eAAY,CAAZ,QAAoB,CAApB,Q;QACC,cAAO,CAAP,IAAa,OAAQ,aAAmB,CAAZ,8CAAQ,CAAR,CAAY,CAAnB,GAA+B,iDAAW,GAAX,CAA/B,GAAiD,iDAAW,GAAX,CAAjD,GAAmE,GAA3E,C;QACb,eAAQ,CAAR,IAAc,OAAQ,cAAoB,CAAZ,8CAAQ,CAAR,CAAY,CAApB,GAAgC,iDAAW,GAAX,CAAhC,GAAkD,iDAAW,GAAX,CAAlD,GAAoE,GAA5E,C;QACd,a;;;EAGH,C;;IAK2B,UAEZ,M;IAJd,gBAAgB,C;IAChB,iBAAiB,C;ID7EwC,YAAa,QC8EvD,CAAC,CAAU,WAAV,SAAU,CAAV,mBAAmB,CAApB,IAAyB,CAAzB,ID9EuD,C;IAIvD,U;IAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,mB;MACI,MAAM,CAAN,ICyEuC,eAAS,CAAT,C;;IAA7C,SDvES,K;ICwET,aAAU,CAAV,OAAa,EAAb,M;MACc,iBAAQ,CAAR,C;MAAb,aAAU,CAAV,mB;QACC,GAAG,UAAU,UAAV,CAAH,IAA4B,eAAS,CAAT,C;QAC5B,GAAG,UAAU,UAAV,CAAH,EAA0B,CAA1B,IAA+B,S;QAC/B,GAAG,UAAU,UAAV,CAAH,EAA0B,CAA1B,IAA+B,C;QAC/B,+B;QACA,6B;;MAED,wBAAa,CAAb,I;;IAED,OAAO,E;EACR,C;;IAGC,eAAQ,yBAAkB,8DAAlB,EAA4C,6DAA5C,C;IACR,gBAAS,yBAAkB,+DAAlB,EAA6C,8DAA7C,C;IACT,eAAQ,yBAAkB,8DAAlB,EAA4C,6DAA5C,C;IACR,gBAAS,yBAAkB,+DAAlB,EAA6C,8DAA7C,C;EACV,C;;IAKgB,IAEW,IAFX,EASmB,M;IAXlC,cAAc,C;IACd,cAAc,C;IACd,eAAY,CAAZ,SAAe,EAAf,Q;MAE0B,c;MAAzB,cAAW,OAAX,kB;QACC,gBAAS,QAAQ,EAAR,IAAT,IAAuB,G;QACvB,eAAQ,QAAQ,EAAR,IAAR,IAAsB,eAAS,CAAT,C;QACtB,eAAQ,QAAQ,EAAR,IAAR,EAAoB,CAApB,IAAyB,G;QACzB,eAAQ,QAAQ,EAAR,IAAR,EAAoB,CAApB,IAAyB,E;;MAGO,UAAC,OAAD,I;MAAjC,iBAAe,EAAE,UAAU,CAAV,IAAF,KAAf,2B;QACC,gBAAS,QAAQ,KAAR,IAAT,IAA0B,G;QAC1B,eAAQ,QAAQ,KAAR,IAAR,IAAyB,eAAS,CAAT,C;QACzB,eAAQ,QAAQ,KAAR,IAAR,EAAuB,CAAvB,IAA4B,G;QAC5B,eAAQ,QAAQ,KAAR,IAAR,EAAuB,CAAvB,IAA4B,UAAU,CAAV,GAAc,KAAd,I;;MAE7B,UAAU,WAAY,C;MACtB,UAAU,WAAY,C;;EAExB,C;;IAGC,aAAU,CAAV,MAAkB,GAAlB,M;MACC,mBAAa,IAAI,CAAJ,IAAb,IAAuB,QAAQ,CAAR,I;MACvB,mBAAa,IAAI,GAAJ,IAAb,IAAyB,QAAQ,CAAR,I;MACzB,mBAAa,IAAI,GAAJ,IAAb,IAAyB,QAAO,CAAP,QAAW,KAAX,I;MACzB,mBAAa,IAAI,GAAJ,IAAb,IAAyB,SAAS,CAAT,I;MACzB,mBAAa,IAAI,IAAJ,IAAb,IAA0B,SAAS,CAAT,I;MAC1B,mBAAa,IAAI,IAAJ,IAAb,IAA0B,SAAQ,CAAR,QAAY,OAAZ,I;MAC1B,mBAAa,IAAI,IAAJ,IAAb,IAA0B,SAAS,CAAT,I;MAC1B,mBAAa,IAAI,IAAJ,IAAb,IAA0B,QAAQ,CAAR,I;;EAE5B,C;;IAIC,YAAY,GAAG,CAAH,C;IACZ,aAAa,GAAG,CAAH,IAAQ,CAAR,I;IACb,OAAO,UAAU,CAAjB,C;MACC,IAAI,CAAC,QAAW,KAAM,MAAlB,MAA8B,CAAlC,C;QACC,iBAAU,iBAAY,KAAM,c;;MAE7B,uB;MACA,uC;MACA,IAAI,iBAAU,CAAd,C;QACC,IAAI,mBAAW,GAAf,C;UACC,iBAAU,GAAV,C;UACA,iBAAU,CAAV,C;;;UAEA,iBAAU,cAAV,C;;QAED,iBAAU,C;QACV,iBAAU,C;;;EAGb,C;;IAGC,cAAQ,gBAAa,OAAN,KAAM,CAAb,C;EACT,C;;IAGC,iBAAW,UAAW,CAAZ,GAAmB,GAA7B,C;IACA,iBAAW,KAAD,GAAY,GAAtB,C;EACD,C;;IAIC,M;IACA,M;IACA,M;IACA,M;IACA,M;IACA,M;IACA,M;IACA,M;IAEA,cAAc,C;IACd,SAAS,C;IACT,UAAU,E;IACV,aAAU,CAAV,MAAkB,EAAlB,M;MACC,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MAEL,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAChB,WAAW,KAAK,E;MAGhB,YAAY,OAAO,I;MACnB,YAAY,OAAO,I;MACnB,YAAY,OAAO,I;MACnB,YAAY,OAAO,I;MAEnB,KAAK,OAAL,IAAgB,QAAQ,K;MACxB,KAAK,UAAU,CAAV,IAAL,IAAoB,QAAQ,K;MAE5B,SAAS,CAAC,QAAQ,KAAT,IAAkB,U;MAC3B,KAAK,UAAU,CAAV,IAAL,IAAoB,QAAQ,E;MAC5B,KAAK,UAAU,CAAV,IAAL,IAAoB,QAAQ,E;MAG5B,QAAQ,OAAO,I;MACf,QAAQ,OAAO,I;MACf,QAAQ,OAAO,I;MAGf,SAAS,CAAC,QAAQ,KAAT,IAAkB,U;MAC3B,SAAS,YAAe,KAAf,GAAuB,E;MAChC,SAAS,WAAe,KAAf,GAAuB,E;MAChC,SAAS,QAAQ,U;MAEjB,UAAU,OAAO,E;MACjB,UAAU,OAAO,E;MAEjB,KAAK,UAAU,CAAV,IAAL,IAAoB,MAAM,E;MAC1B,KAAK,UAAU,CAAV,IAAL,IAAoB,MAAM,E;MAC1B,KAAK,UAAU,CAAV,IAAL,IAAoB,MAAM,E;MAC1B,KAAK,UAAU,CAAV,IAAL,IAAoB,MAAM,E;MAE1B,oBAAW,CAAX,I;;IAID,UAAU,C;IACV,eAAU,CAAV,QAAkB,EAAlB,Q;MACC,KAAK,KAAK,OAAL,C;MACL,KAAK,KAAK,UAAU,CAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MACL,KAAK,KAAK,UAAU,EAAV,IAAL,C;MAEL,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAClB,aAAa,KAAK,E;MAGlB,cAAc,SAAS,M;MACvB,cAAc,SAAS,M;MACvB,cAAc,SAAS,M;MACvB,cAAc,SAAS,M;MAEvB,KAAK,OAAL,IAAgB,UAAU,O;MAC1B,KAAK,UAAU,EAAV,IAAL,IAAqB,UAAU,O;MAE/B,WAAW,CAAC,UAAU,OAAX,IAAsB,U;MACjC,KAAK,UAAU,EAAV,IAAL,IAAqB,UAAU,I;MAC/B,KAAK,UAAU,EAAV,IAAL,IAAqB,UAAU,I;MAG/B,UAAU,SAAS,M;MACnB,UAAU,SAAS,M;MACnB,UAAU,SAAS,M;MAGnB,WAAW,CAAC,UAAU,OAAX,IAAsB,U;MACjC,WAAW,YAAe,OAAf,GAAyB,I;MACpC,WAAW,WAAe,OAAf,GAAyB,I;MACpC,WAAW,UAAU,U;MAErB,YAAY,SAAS,I;MACrB,YAAY,SAAS,I;MAErB,KAAK,UAAU,EAAV,IAAL,IAAqB,QAAQ,I;MAC7B,KAAK,UAAU,EAAV,IAAL,IAAqB,QAAQ,I;MAC7B,KAAK,UAAU,CAAV,IAAL,IAAoB,QAAQ,I;MAC5B,KAAK,UAAU,EAAV,IAAL,IAAqB,QAAQ,I;MAE7B,yB;;IAID,a;IACA,eAAU,CAAV,QAAkB,GAAlB,Q;MAEC,YAAY,KAAK,GAAL,IAAU,MAAM,GAAN,C;MACtB,uBAAgB,GAAhB,IAAyB,YAAY,GAAhB,GAA0C,YAAlB,YAAY,GAAM,CAA1C,GAA4E,YAAlB,YAAY,GAAM,C;;IAIlG,OAAO,sB;EACR,C;;IAGC,iBAAU,KAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;EACD,C;;IAGC,iBAAU,KAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,MAAV,C;IACA,iBAAU,KAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;EACD,C;;IAGC,iBAAU,KAAV,C;IACA,iBAAU,GAAV,C;IACA,iBAAU,CAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,cAAO,CAAP,CAAV,C;;IAED,iBAAU,CAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,eAAQ,CAAR,CAAV,C;;EAEF,C;;IAGC,iBAAU,KAAV,C;IACA,iBAAU,GAAV,C;IAEA,iBAAU,CAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,+DAAyB,IAAI,CAAJ,IAAzB,CAAV,C;;IAED,aAAU,CAAV,OAAa,EAAb,M;MACC,iBAAU,8DAAwB,CAAxB,CAAV,C;;IAGD,iBAAU,EAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,+DAAyB,IAAI,CAAJ,IAAzB,CAAV,C;;IAED,aAAU,CAAV,OAAa,GAAb,M;MACC,iBAAU,8DAAwB,CAAxB,CAAV,C;;IAGD,iBAAU,CAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,gEAA0B,IAAI,CAAJ,IAA1B,CAAV,C;;IAED,aAAU,CAAV,OAAa,EAAb,M;MACC,iBAAU,+DAAyB,CAAzB,CAAV,C;;IAGD,iBAAU,EAAV,C;IACA,aAAU,CAAV,MAAkB,EAAlB,M;MACC,iBAAU,gEAA0B,IAAI,CAAJ,IAA1B,CAAV,C;;IAED,aAAU,CAAV,OAAa,GAAb,M;MACC,iBAAU,+DAAyB,CAAzB,CAAV,C;;EAEF,C;;IAGC,iBAAU,KAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;IACA,iBAAU,EAAV,C;IACA,iBAAU,CAAV,C;EACD,C;;IAGC,SACS,E;IACT,UAAU,KAAK,CAAL,C;IACV,gBAAgB,KAAK,GAAL,C;IAChB,O;IACA,UAAU,E;IACV,UAAU,E;IACV,UAAU,E;IACV,YAAY,iBAAU,GAAV,EAAe,KAAf,C;IAEZ,aAAU,CAAV,MAAkB,GAAlB,M;MACC,UAAG,8CAAQ,CAAR,CAAH,IAAiB,MAAM,CAAN,C;;IAElB,WAAW,UAAG,CAAH,IAAQ,EAAR,I;IACX,KAAK,UAAG,CAAH,C;IAEL,IAAI,SAAQ,CAAZ,C;MACC,iBAAU,KAAK,CAAL,CAAV,C;;;MAEA,MAAM,QAAQ,IAAR,I;MACN,iBAAU,KAAK,gBAAS,GAAT,CAAL,CAAV,C;MACA,iBAAU,eAAQ,GAAR,CAAV,C;;IAGD,cAAc,E;IACd,OAAQ,UAAU,CAAX,IAAkB,UAAG,OAAH,MAAe,CAAxC,C;MAA4C,yB;;IAE5C,IAAI,YAAW,CAAf,C;MACC,iBAAU,GAAV,C;MACA,OAAO,E;;IAER,QAAQ,C;IACR,O;IACA,OAAO,KAAK,OAAZ,C;MACC,eAAe,C;MACf,OAAQ,UAAG,CAAH,MAAS,CAAV,IAAiB,KAAK,OAA7B,C;QAAuC,a;;MACvC,eAAe,IAAI,QAAJ,I;MACf,IAAI,YAAY,GAAhB,C;QACC,MAAM,YAAa,C;QACnB,oBAAiB,CAAjB,cAAoB,GAApB,a;UACC,iBAAU,SAAV,C;QACD,WAAW,WAAa,E;;MAEzB,MAAM,QAAQ,UAAG,CAAH,CAAR,I;MACN,iBAAU,KAAK,CAAC,YAAa,CAAd,IAAmB,gBAAS,GAAT,CAAnB,IAAL,CAAV,C;MACA,iBAAU,eAAQ,GAAR,CAAV,C;MACA,a;;IAED,IAAI,YAAW,GAAf,C;MACC,iBAAU,GAAV,C;;IAED,OAAO,E;EACR,C;;IAG0B,uB;MAAA,UAAgB,I;IAAmB,qBAAmB,0BAC/E,GAAI,eAD2E,EAE/E,GAAI,MAF2E,EAG/E,GAAI,OAH2E,CAAnB,EAI1D,OAJ0D,C;EAAA,C;;IAMxB,uB;MAAA,UAAgB,I;IA4C9B,IAaL,IAbK,EAcL,MAdK,EAeL,M;IAxDjB,IAAI,eAAJ,C;MAAqB,kBAAW,OAAX,C;IAGrB,iBAAU,4B;IACV,iBAAU,C;IACV,iBAAU,C;IAGV,iBAAU,KAAV,C;IACA,kB;IACA,iB;IACA,iBAAU,KAAM,MAAhB,EAAuB,KAAM,OAA7B,C;IACA,iB;IACA,iB;IAGA,UAAU,C;IACV,UAAU,C;IACV,UAAU,C;IAEV,iBAAU,C;IACV,iBAAU,C;IAEV,gBAAgB,KAAM,K;IACtB,YAAY,KAAM,M;IAClB,aAAa,KAAM,O;IAEnB,gBAAgB,QAAQ,CAAR,I;IAEhB,K;IACA,QAAQ,C;IACR,K;IACA,K;IACA,K;IACA,S;IACA,OAAO,IAAI,MAAX,C;MACC,IAAI,C;MACJ,OAAO,IAAI,SAAX,C;QACC,QAAQ,uBAAY,CAAZ,IAAgB,CAAhB,I;QAGR,eAAY,CAAZ,QAAoB,EAApB,Q;UACC,UAAU,OAAQ,C;UAClB,UAAU,CAAC,MAAQ,CAAT,IAAc,CAAd,I;UACV,QAAQ,QAAS,iBAAM,SAAN,CAAT,GAA4B,GAA5B,I;UAER,IAAI,KAAI,GAAJ,SAAW,MAAf,C;YACC,QAAM,uBAAa,IAAI,CAAJ,GAAQ,GAAR,GAAc,MAAd,IAAb,CAAN,I;;UAGD,IAAI,KAAI,GAAJ,SAAW,SAAf,C;YACC,SAAO,CAAP,GAAW,GAAX,GAAkB,SAAlB,GAA8B,CAA9B,K;;UAGD,IAAI,SAAe,CAAL,QAAK,EAAL,gBAAK,OAAf,GAA2B,G;UAC/B,IAAI,SAAe,CAAL,UAAK,EAAL,kBAAK,SAAf,GAA2B,G;UAC/B,IAAI,SAAe,CAAL,UAAK,EAAL,kBAAK,SAAf,GAA2B,G;UAU/B,WAAI,GAAJ,IAAqG,CAAvF,mBAAa,IAAI,CAAJ,IAAb,CAAD,GAAwB,mBAAa,IAAI,GAAJ,IAAb,CAAxB,GAAiD,mBAAa,IAAI,GAAJ,IAAb,CAAjD,IAA6E,EAAW,IAAL,GAAK,I;UACrG,WAAI,GAAJ,IAAyG,CAA3F,mBAAa,IAAI,GAAJ,IAAb,CAAD,GAA0B,mBAAa,IAAI,IAAJ,IAAb,CAA1B,GAAoD,mBAAa,IAAI,IAAJ,IAAb,CAApD,IAAiF,EAAW,IAAL,GAAK,I;UACzG,WAAI,GAAJ,IAA0G,CAA5F,mBAAa,IAAI,IAAJ,IAAb,CAAD,GAA2B,mBAAa,IAAI,IAAJ,IAAb,CAA3B,GAAqD,mBAAa,IAAI,IAAJ,IAAb,CAArD,IAAkF,EAAW,IAAL,GAAK,I;;QAI3G,MAAM,iBAAU,UAAV,EAAe,aAAf,EAAuB,GAAvB,EAA4B,YAA5B,EAAmC,YAAnC,C;QACN,MAAM,iBAAU,UAAV,EAAe,cAAf,EAAwB,GAAxB,EAA6B,aAA7B,EAAqC,aAArC,C;QACN,MAAM,iBAAU,UAAV,EAAe,cAAf,EAAwB,GAAxB,EAA6B,aAA7B,EAAqC,aAArC,C;QACN,QAAK,EAAL,I;;MAED,QAAK,CAAL,I;;IAOD,IAAI,kBAAW,CAAf,C;MACC,eAAe,eAAS,CAAT,C;MACf,SAAS,CAAT,IAAc,iBAAU,CAAV,I;MACd,SAAS,CAAT,IAAc,CAAC,KAAO,cAAP,GAAiB,CAAlB,IAAwB,CAAxB,I;MACd,iBAAU,QAAV,C;;IAGD,iBAAU,KAAV,C;IAEA,OAAO,cAAQ,c;EAChB,C;;IAGC,gBACc,O;IACd,IAAI,aAAW,CAAf,C;MACC,YAAU,C;;IAEX,IAAI,YAAU,GAAd,C;MACC,YAAU,G;;IAGX,IAAI,0BAAkB,SAAtB,C;MAA+B,M;IAE/B,uBAAoB,YAAU,EAAd,GAAmB,OAAO,SAAP,IAAnB,GAAyC,OAAM,YAAU,CAAV,IAAN,KAAzD,C;IACA,wBAAiB,S;EAElB,C;;IASwB,gB;IAAqB,kB;IAAgB,oB;EAAtC,C;;;;;;;IAEvB,qC;IACC,iBAAsB,gBACrB,CADqB,EAClB,CADkB,EACf,CADe,EACZ,CADY,EACT,EADS,EACL,EADK,EACD,EADC,EACG,EADH,EAErB,CAFqB,EAElB,CAFkB,EAEf,CAFe,EAEZ,EAFY,EAER,EAFQ,EAEJ,EAFI,EAEA,EAFA,EAEI,EAFJ,EAGrB,CAHqB,EAGlB,CAHkB,EAGf,EAHe,EAGX,EAHW,EAGP,EAHO,EAGH,EAHG,EAGC,EAHD,EAGK,EAHL,EAIrB,CAJqB,EAIlB,EAJkB,EAId,EAJc,EAIV,EAJU,EAIN,EAJM,EAIF,EAJE,EAIE,EAJF,EAIM,EAJN,EAKrB,EALqB,EAKjB,EALiB,EAKb,EALa,EAKT,EALS,EAKL,EALK,EAKD,EALC,EAKG,EALH,EAKO,EALP,EAMrB,EANqB,EAMjB,EANiB,EAMb,EANa,EAMT,EANS,EAML,EANK,EAMD,EANC,EAMG,EANH,EAMO,EANP,EAOrB,EAPqB,EAOjB,EAPiB,EAOb,EAPa,EAOT,EAPS,EAOL,EAPK,EAOD,EAPC,EAOG,EAPH,EAOO,EAPP,EAQrB,EARqB,EAQjB,EARiB,EAQb,EARa,EAQT,EARS,EAQL,EARK,EAQD,EARC,EAQG,EARH,EAQO,EARP,E;IAWtB,kCAAuC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,E;IACvC,iCAAsC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,EAAzC,EAA6C,EAA7C,E;IACtC,kCAAuC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,GAA3D,E;IACvC,iCAAsC,gBACrC,CADqC,EAC/B,CAD+B,EACzB,CADyB,EACnB,CADmB,EACb,CADa,EACP,EADO,EACD,CADC,EACK,EADL,EAErC,EAFqC,EAE/B,EAF+B,EAEzB,EAFyB,EAEnB,CAFmB,EAEb,EAFa,EAEP,EAFO,EAED,EAFC,EAEK,CAFL,EAGrC,EAHqC,EAG/B,GAH+B,EAGzB,EAHyB,EAGnB,EAHmB,EAGb,GAHa,EAGP,GAHO,EAGD,GAHC,EAGK,CAHL,EAIrC,EAJqC,EAI/B,EAJ+B,EAIzB,GAJyB,EAInB,GAJmB,EAIb,EAJa,EAIP,EAJO,EAID,GAJC,EAIK,GAJL,EAKrC,EALqC,EAK/B,EAL+B,EAKzB,EALyB,EAKnB,GALmB,EAKb,GALa,EAKP,CALO,EAKD,EALC,EAKK,EALL,EAMrC,EANqC,EAM/B,EAN+B,EAMzB,EANyB,EAMnB,EANmB,EAMb,EANa,EAMP,EANO,EAMD,EANC,EAMK,EANL,EAOrC,EAPqC,EAO/B,EAP+B,EAOzB,EAPyB,EAOnB,EAPmB,EAOb,EAPa,EAOP,EAPO,EAOD,EAPC,EAOK,EAPL,EAQrC,EARqC,EAQ/B,EAR+B,EAQzB,EARyB,EAQnB,EARmB,EAQb,EARa,EAQP,EARO,EAQD,EARC,EAQK,EARL,EASrC,EATqC,EAS/B,EAT+B,EASzB,EATyB,EASnB,EATmB,EASb,EATa,EASP,EATO,EASD,EATC,EASK,EATL,EAUrC,EAVqC,EAU/B,EAV+B,EAUzB,GAVyB,EAUnB,GAVmB,EAUb,GAVa,EAUP,GAVO,EAUD,GAVC,EAUK,GAVL,EAWrC,GAXqC,EAW/B,GAX+B,EAWzB,GAXyB,EAWnB,GAXmB,EAWb,GAXa,EAWP,GAXO,EAWD,GAXC,EAWK,GAXL,EAYrC,GAZqC,EAY/B,GAZ+B,EAYzB,GAZyB,EAYnB,GAZmB,EAYb,GAZa,EAYP,GAZO,EAYD,GAZC,EAYK,GAZL,EAarC,GAbqC,EAa/B,GAb+B,EAazB,GAbyB,EAanB,GAbmB,EAab,GAba,EAaP,GAbO,EAaD,GAbC,EAaK,GAbL,EAcrC,GAdqC,EAc/B,GAd+B,EAczB,GAdyB,EAcnB,GAdmB,EAcb,GAda,EAcP,GAdO,EAcD,GAdC,EAcK,GAdL,EAerC,GAfqC,EAe/B,GAf+B,EAezB,GAfyB,EAenB,GAfmB,EAeb,GAfa,EAeP,GAfO,EAeD,GAfC,EAeK,GAfL,EAgBrC,GAhBqC,EAgB/B,GAhB+B,EAgBzB,GAhByB,EAgBnB,GAhBmB,EAgBb,GAhBa,EAgBP,GAhBO,EAgBD,GAhBC,EAgBK,GAhBL,EAiBrC,GAjBqC,EAiB/B,GAjB+B,EAiBzB,GAjByB,EAiBnB,GAjBmB,EAiBb,GAjBa,EAiBP,GAjBO,EAiBD,GAjBC,EAiBK,GAjBL,EAkBrC,GAlBqC,EAkB/B,GAlB+B,EAkBzB,GAlByB,EAkBnB,GAlBmB,EAkBb,GAlBa,EAkBP,GAlBO,EAkBD,GAlBC,EAkBK,GAlBL,EAmBrC,GAnBqC,EAmB/B,GAnB+B,EAmBzB,GAnByB,EAmBnB,GAnBmB,EAmBb,GAnBa,EAmBP,GAnBO,EAmBD,GAnBC,EAmBK,GAnBL,EAoBrC,GApBqC,EAoB/B,GApB+B,EAoBzB,GApByB,EAoBnB,GApBmB,EAoBb,GApBa,EAoBP,GApBO,EAoBD,GApBC,EAoBK,GApBL,EAqBrC,GArBqC,EAqB/B,GArB+B,E;IAwBtC,mCAAwC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,E;IACxC,kCAAuC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,EAAzC,EAA6C,EAA7C,E;IACvC,mCAAwC,gBAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,GAA3D,E;IACxC,kCAAuC,gBACtC,CADsC,EAChC,CADgC,EAC1B,CAD0B,EACpB,CADoB,EACd,EADc,EACR,CADQ,EACF,CADE,EACI,EADJ,EAEtC,EAFsC,EAEhC,CAFgC,EAE1B,EAF0B,EAEpB,EAFoB,EAEd,EAFc,EAER,CAFQ,EAEF,EAFE,EAEI,GAFJ,EAGtC,EAHsC,EAGhC,EAHgC,EAG1B,EAH0B,EAGpB,GAHoB,EAGd,CAHc,EAGR,EAHQ,EAGF,EAHE,EAGI,GAHJ,EAItC,GAJsC,EAIhC,GAJgC,EAI1B,GAJ0B,EAIpB,CAJoB,EAId,EAJc,EAIR,EAJQ,EAIF,EAJE,EAII,GAJJ,EAKtC,EALsC,EAKhC,EALgC,EAK1B,GAL0B,EAKpB,GALoB,EAKd,EALc,EAKR,EALQ,EAKF,EALE,EAKI,EALJ,EAMtC,GANsC,EAMhC,EANgC,EAM1B,GAN0B,EAMpB,EANoB,EAMd,EANc,EAMR,EANQ,EAMF,EANE,EAMI,EANJ,EAOtC,EAPsC,EAOhC,EAPgC,EAO1B,EAP0B,EAOpB,EAPoB,EAOd,EAPc,EAOR,EAPQ,EAOF,EAPE,EAOI,EAPJ,EAQtC,EARsC,EAQhC,EARgC,EAQ1B,EAR0B,EAQpB,EARoB,EAQd,EARc,EAQR,EARQ,EAQF,EARE,EAQI,EARJ,EAStC,EATsC,EAShC,EATgC,EAS1B,EAT0B,EASpB,EAToB,EASd,EATc,EASR,EATQ,EASF,EATE,EASI,EATJ,EAUtC,EAVsC,EAUhC,EAVgC,EAU1B,EAV0B,EAUpB,GAVoB,EAUd,GAVc,EAUR,GAVQ,EAUF,GAVE,EAUI,GAVJ,EAWtC,GAXsC,EAWhC,GAXgC,EAW1B,GAX0B,EAWpB,GAXoB,EAWd,GAXc,EAWR,GAXQ,EAWF,GAXE,EAWI,GAXJ,EAYtC,GAZsC,EAYhC,GAZgC,EAY1B,GAZ0B,EAYpB,GAZoB,EAYd,GAZc,EAYR,GAZQ,EAYF,GAZE,EAYI,GAZJ,EAatC,GAbsC,EAahC,GAbgC,EAa1B,GAb0B,EAapB,GAboB,EAad,GAbc,EAaR,GAbQ,EAaF,GAbE,EAaI,GAbJ,EActC,GAdsC,EAchC,GAdgC,EAc1B,GAd0B,EAcpB,GAdoB,EAcd,GAdc,EAcR,GAdQ,EAcF,GAdE,EAcI,GAdJ,EAetC,GAfsC,EAehC,GAfgC,EAe1B,GAf0B,EAepB,GAfoB,EAed,GAfc,EAeR,GAfQ,EAeF,GAfE,EAeI,GAfJ,EAgBtC,GAhBsC,EAgBhC,GAhBgC,EAgB1B,GAhB0B,EAgBpB,GAhBoB,EAgBd,GAhBc,EAgBR,GAhBQ,EAgBF,GAhBE,EAgBI,GAhBJ,EAiBtC,GAjBsC,EAiBhC,GAjBgC,EAiB1B,GAjB0B,EAiBpB,GAjBoB,EAiBd,GAjBc,EAiBR,GAjBQ,EAiBF,GAjBE,EAiBI,GAjBJ,EAkBtC,GAlBsC,EAkBhC,GAlBgC,EAkB1B,GAlB0B,EAkBpB,GAlBoB,EAkBd,GAlBc,EAkBR,GAlBQ,EAkBF,GAlBE,EAkBI,GAlBJ,EAmBtC,GAnBsC,EAmBhC,GAnBgC,EAmB1B,GAnB0B,EAmBpB,GAnBoB,EAmBd,GAnBc,EAmBR,GAnBQ,EAmBF,GAnBE,EAmBI,GAnBJ,EAoBtC,GApBsC,EAoBhC,GApBgC,EAoB1B,GApB0B,EAoBpB,GApBoB,EAoBd,GApBc,EAoBR,GApBQ,EAoBF,GApBE,EAoBI,GApBJ,EAqBtC,GArBsC,EAqBhC,GArBgC,E;IAwBvC,mBAAwB,gBACvB,EADuB,EACnB,EADmB,EACf,EADe,EACX,EADW,EACP,EADO,EACH,EADG,EACC,EADD,EACK,EADL,EAEvB,EAFuB,EAEnB,EAFmB,EAEf,EAFe,EAEX,EAFW,EAEP,EAFO,EAEH,EAFG,EAEC,EAFD,EAEK,EAFL,EAGvB,EAHuB,EAGnB,EAHmB,EAGf,EAHe,EAGX,EAHW,EAGP,EAHO,EAGH,EAHG,EAGC,EAHD,EAGK,EAHL,EAIvB,EAJuB,EAInB,EAJmB,EAIf,EAJe,EAIX,EAJW,EAIP,EAJO,EAIH,EAJG,EAIC,EAJD,EAIK,EAJL,EAKvB,EALuB,EAKnB,EALmB,EAKf,EALe,EAKX,EALW,EAKP,EALO,EAKH,GALG,EAKE,GALF,EAKO,EALP,EAMvB,EANuB,EAMnB,EANmB,EAMf,EANe,EAMX,EANW,EAMP,EANO,EAMH,GANG,EAME,GANF,EAMO,EANP,EAOvB,EAPuB,EAOnB,EAPmB,EAOf,EAPe,EAOX,EAPW,EAOP,GAPO,EAOF,GAPE,EAOG,GAPH,EAOQ,GAPR,EAQvB,EARuB,EAQnB,EARmB,EAQf,EARe,EAQX,EARW,EAQP,GARO,EAQF,GARE,EAQG,GARH,EAQQ,EARR,E;IAWxB,oBAAyB,gBACxB,EADwB,EACpB,EADoB,EAChB,EADgB,EACZ,EADY,EACR,EADQ,EACJ,EADI,EACA,EADA,EACI,EADJ,EAExB,EAFwB,EAEpB,EAFoB,EAEhB,EAFgB,EAEZ,EAFY,EAER,EAFQ,EAEJ,EAFI,EAEA,EAFA,EAEI,EAFJ,EAGxB,EAHwB,EAGpB,EAHoB,EAGhB,EAHgB,EAGZ,EAHY,EAGR,EAHQ,EAGJ,EAHI,EAGA,EAHA,EAGI,EAHJ,EAIxB,EAJwB,EAIpB,EAJoB,EAIhB,EAJgB,EAIZ,EAJY,EAIR,EAJQ,EAIJ,EAJI,EAIA,EAJA,EAII,EAJJ,EAKxB,EALwB,EAKpB,EALoB,EAKhB,EALgB,EAKZ,EALY,EAKR,EALQ,EAKJ,EALI,EAKA,EALA,EAKI,EALJ,EAMxB,EANwB,EAMpB,EANoB,EAMhB,EANgB,EAMZ,EANY,EAMR,EANQ,EAMJ,EANI,EAMA,EANA,EAMI,EANJ,EAOxB,EAPwB,EAOpB,EAPoB,EAOhB,EAPgB,EAOZ,EAPY,EAOR,EAPQ,EAOJ,EAPI,EAOA,EAPA,EAOI,EAPJ,EAQxB,EARwB,EAQpB,EARoB,EAQhB,EARgB,EAQZ,EARY,EAQR,EARQ,EAQJ,EARI,EAQA,EARA,EAQI,EARJ,E;IAWzB,oBAAyB,kBACxB,GADwB,EAClB,SADkB,EACJ,QADI,EACU,SADV,EAExB,GAFwB,EAElB,UAFkB,EAEJ,SAFI,EAEU,UAFV,E;EAxF1B,C;;IA6F2B,uB;MAAA,UAAe,E;IACxC,OAA4B,CAArB,gBAAY,OAAZ,CAAqB,iBAAO,GAAP,C;EAC7B,C;;;;;;;;IA/FD,4C;MAAA,2B;;IAAA,qC;EAAA,C;;;;;;;mBE5lBD,+D;QAAA,S;aAAA,Q;;aAAA,uB;EAA+F,C;;IAA/F,wC;IAAA,yB;IAAA,kC;IAAA,kB;IAAA,0B;EAA+F,C;;;;;;;;;;;;;YAApD,gC;cAAA,mBAA4B,wB;YAAoC,gB;4BAAF,YAAE,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAZ,OAAA,oBAAK,cAAO,aAAP,EAA2B,gBAAM,cAAgB,YAAE,SAAlB,CAAjC,C;;;;;;;;;;;;;;EAAL,C;;mBAC/F,oE;QAAA,S;aAAA,Q;;aAAA,uB;EAAmE,C;;IAAnE,wC;IAAA,yB;IAAA,kC;IAAA,kB;IAAA,gC;EAAmE,C;;;;;;;;;;;;;YAAY,gB;4BAAA,UAAF,YAAE,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAZ,OAAA,oBAAK,cAAO,aAAP,EAAkB,uBAAmB,mBAAnB,CAAlB,C;;;;;;;;;;;;;;EAAL,C;;mBACnE,iE;QAAA,S;aAAA,Q;;aAAA,uB;EAAmG,C;;IAAnG,wC;IAAA,yB;IAAA,kC;IAAA,kB;IAAA,0B;EAAmG,C;;;;;;;;;;;;;YAApD,gC;cAAA,mBAA4B,wB;YAAoC,gB;4BAAA,UAAF,YAAE,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAZ,OAAA,oBAAK,cAAO,aAAP,EAAkB,gBAAlB,C;;;;;;;;;;;;;;EAAL,C;;IAGlG,cAAO,uCAAP,C;EACD,C;;;WR+D4F,gC;EQjE5F,C;;;IAMwC,OAAA,yBAA0B,iBAAQ,GAAR,e;EAA1B,C;;mBAExC,uD;QAAA,S;aAAA,Q;;aAAA,uB;EAQA,C;;IARA,wC;IAAA,yB;IAAA,wB;IAAA,0B;EAQA,C;;;;;;;;;;;;;YAPa,6D;YAAZ,gB;;;YAAA,KAAY,yBAAZ,C;cAAA,gB;;;;YAAY,gC;;YAEC,gB;4BAAJ,GAAI,gBAAO,gBAAP,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAX,OAAW,a;;;;YACV,iC;cAFF,O;;;;YADD,gB;;;;;YAMA,MAAM,mCAA8B,qBAA9B,C;;;;;;;;;;;;;;EACP,C;;mBAEA,0D;QAAA,S;aAAA,Q;;aAAA,uB;EAAqD,C;;IAArD,wC;IAAA,yB;IAAA,kC;EAAqD,C;;;;;;;;;;;;;YAAsB,gB;4BAAL,oBAAK,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAtB,gB;4BAAA,iBAAsB,aAAtB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,oB;;;;;;;;;;;;;;EAAA,C;;mBACrD,4E;QAAA,S;aAAA,Q;;aAAA,uB;EAA8I,C;;IAA9I,wC;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAA8I,C;;;;;;;;;;;;;YAA5G,gC;cAAA,mBAA4B,wB;YAAsB,kC;cAAA,qBAAwB,yB;YAAyD,gB;4BAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,OAAA,kBAAQ,mBAAe,aAAf,EAAmC,gBAAM,cAAgB,oBAAK,SAArB,CAAzC,C;;;;;;;;;;;;;;EAAR,C;;mBAC9I,iE;QAAA,S;aAAA,Q;;aAAA,uB;EAA6D,C;;IAA7D,wC;IAAA,yB;IAAA,kC;EAA6D,C;;;;;;;;;;;;;YAAK,gB;4BAAA,gBAAL,oBAAK,e;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAuB,gBAAvB,aAAgB,O;Y/DkpCvE,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;YAqEA,Q;YAAA,2B;YAAb,OAAa,cAAb,C;cAAa,sB;cACT,WAAY,WAAc,I+DxtCgE,O/DwtC9E,C;;;Y+DxtCyC,O/DytClD,W;;;;;;;;;;;;;;E+DztCkD,C;;mBAE7D,4D;QAAA,S;aAAA,Q;;aAAA,uB;EAA8D,C;;IAA9D,wC;IAAA,yB;IAAA,kC;EAA8D,C;;;;;;;;;;;;;YAAsB,gB;4BAAA,UAAL,oBAAK,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAtB,gB;4BAAA,iBAAsB,aAAtB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,oB;;;;;;;;;;;;;;EAAA,C;;mBAC9D,iF;QAAA,S;aAAA,Q;;aAAA,uB;EAAoI,C;;IAApI,wC;IAAA,yB;IAAA,kC;IAAA,gC;IAAA,8B;EAAoI,C;;;;;;;;;;;;;YAAzF,mC;cAAA,sBAAmB,U;YAAY,kC;cAAA,qBAAwB,yB;YAAiE,gB;4BAAA,UAAL,oBAAK,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,gB;4BAAR,kBAAQ,2BAAiC,SAAV,aAAU,CAAjC,EAA6C,uBAAmB,mBAAnB,CAA7C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAR,OAAQ,a;;;;;;;;;;;;;;EAAR,C;;mBACpI,iF;QAAA,S;aAAA,Q;;aAAA,uB;EAAsK,C;;IAAtK,wC;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAAsK,C;;;;;;;;;;;;;YAAtH,gC;cAAA,mBAA4B,uBAAmB,UAAnB,C;YAAgC,kC;cAAA,qBAAwB,yB;YAAiE,gB;4BAAA,UAAL,oBAAK,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,gB;4BAAR,kBAAQ,2BAAiC,SAAV,aAAU,CAAjC,EAA6C,gBAA7C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAR,OAAQ,a;;;;;;;;;;;;;;EAAR,C;;mBACtK,mE;QAAA,S;aAAA,Q;;aAAA,uB;EAAsE,C;;IAAtE,wC;IAAA,yB;IAAA,kC;EAAsE,C;;;;;;;;;;;;;YAAK,gB;4BAAA,gBAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAuB,gBAAvB,aAAgB,O;Y/D6oChF,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;YAqEA,Q;YAAA,2B;YAAb,OAAa,cAAb,C;cAAa,sB;cACT,WAAY,WAAc,I+DntCyE,O/DmtCvF,C;;;Y+DntCkD,O/DotC3D,W;;;;;;;;;;;;;;E+DptC2D,C;;mBACtE,6E;QAAA,S;aAAA,Q;;aAAA,uB;EAAgJ,C;;IAAhJ,wC;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAAgJ,C;;;;;;;;;;;;;YAA7G,gC;cAAA,mBAA4B,wB;YAAsB,kC;cAAA,qBAAwB,yB;YAA6D,gB;4BAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA1B,OAAA,kBAAQ,sBAAkB,aAAlB,EAAsC,gBAAtC,C;;;;;;;;;;;;;;EAAR,C;;mBAChJ,qE;QAAA,S;aAAA,Q;;aAAA,uB;EAA4F,C;;IAA5F,wC;IAAA,yB;IAAA,kC;IAAA,8B;EAA4F,C;;;;;;;;;;;;;YAA1D,kC;cAAA,qBAAwB,yB;YAAyD,gB;4BAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,OAAA,kBAAQ,mBAAe,aAAf,EAAmC,uBAAmB,oBAAK,SAAxB,CAAnC,C;;;;;;;;;;;;;;EAAR,C;;mBAC5F,8E;QAAA,S;aAAA,Q;;aAAA,uB;EAAwG,C;;IAAxG,wC;IAAA,yB;IAAA,kC;IAAA,8B;EAAwG,C;;;;;;;;;;;;;YAA7D,kC;cAAA,qBAAwB,yB;YAA0C,gB;4BAAA,gBAAL,oBAAK,EAAc,kBAAd,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA8B,gBAA9B,aAAuB,O;Y/D0oCzH,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;YAqEA,Q;YAAA,2B;YAAb,OAAa,cAAb,C;cAAa,sB;cACT,WAAY,WAAc,I+DhtCkH,O/DgtChI,C;;;Y+DhtCoF,O/DitC7F,W;;;;;;;;;;;;;;E+DjtC6F,C;;IAE9C,uB;MAAA,UAAwB,yB;IACjF,OAAO,wBAAW,uBAAmB,QAAnB,CAAX,EAAyC,OAAzC,e;EACR,C;;mBAEA,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAOA,C;;IAPA,wC;IAAA,yB;IAAA,wB;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAOA,C;;;;;;;;;;;;;YAPwC,gC;cAAA,mBAA4B,uBAAmB,UAAnB,C;YAAgC,kC;cAAA,qBAAwB,yB;YAC1G,gB;4BAAA,UAAL,oBAAK,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;+BAAA,a;;YAEhB,IAAI,yBAAJ,C;cAA+B,gB;8BAAA,iBAAiB,gBAAjB,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cAAqC,gB;8BAAR,kBAAQ,wBAAe,gBAAf,EAAsB,gBAAtB,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;YAAA,+B;YAApE,gB;;;YAA+B,+B;YAA/B,gB;;;;;;;;;YACC,gC;cACO,gB;8BAAR,kBAAQ,wBAAe,gBAAf,EAAsB,gBAAtB,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cAHF,O;;;;YAGE,+B;YADP,gB;;;;;;YAFF,sB;;;;;;;;;;;;;;;;EAKD,C;;mBAGA,sE;QAAA,S;aAAA,Q;;aAAA,uB;EAA8F,C;;IAA9F,wC;IAAA,yB;IAAA,kC;IAAA,8B;EAA8F,C;;;;;;;;;;;;;YAA3D,kC;cAAA,qBAAwB,yB;YAA6D,gB;4BAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA1B,OAAA,kBAAQ,sBAAkB,aAAlB,C;;;;;;;;;;;;;;EAAR,C;;mBAE9F,8D;QAAA,S;aAAA,Q;;aAAA,uB;EAQA,C;;IARA,wC;IAAA,yB;IAAA,kC;EAQA,C;;;;;;;;;;;;;;YALc,gB;4BAAL,oBAAK,kD;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAZ,OAAY,a;;;;YACX,gC;cACC,gBAAF,CAAE,C;cACU,gB;8BAAA,aAAL,oBAAK,uB;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cALb,O;;;;YAKC,OAAY,a;;;;;;;;;;;;;;;;;;;;;EAEd,C;;mBAEA,2E;QAAA,S;aAAA,Q;;aAAA,uB;EAQA,C;;IARA,wC;IAAA,yB;IAAA,wB;IAAA,wB;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAQA,C;;;;;;;;;;;;;YAR+B,gC;cAAA,mBAA4B,wB;YAAsB,kC;cAAA,qBAAwB,yB;8BAC7F,oB;YACM,gB;4BAAL,oBAAK,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;+BAAA,a;;YAEhB,IAAI,yBAAJ,C;cAA+B,gB;8BAAA,iBAAiB,gBAAjB,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cAAqC,gB;8BAAR,kBAAQ,wBAAe,gBAAf,EAAsB,gBAAM,cAAgB,eAAK,SAArB,CAA5B,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;;YAAA,+B;YAApE,gB;;;YAA+B,+B;YAA/B,gB;;;;;;;;;YACC,gC;cACO,gB;8BAAR,kBAAQ,wBAAe,gBAAf,EAAsB,gBAAM,cAAgB,eAAK,SAArB,CAA5B,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;;cAHF,O;;;;YAGE,+B;YADP,gB;;;;;;YAFF,sB;;;;;;;;;;;;;;;;EAKD,C;;;IAKC,qCAAmC,gC;;MAElC,mCAA4B,K;MAC5B,Y;;;MAEA,mCAA4B,8B;;EAE9B,C;6FARA,yB;IAAA,sC;IAAA,2C;MACC,qCAAmC,gC;;QAElC,mCAA4B,K;QAC5B,Y;;;QAEA,mCAA4B,8B;;IAE9B,C;GARA,C;;mBAUA,iF;QAAA,S;aAAA,Q;;aAAA,uB;EAAgJ,C;;IAAhJ,wC;IAAA,yB;IAAA,kC;IAAA,0B;IAAA,8B;EAAgJ,C;;;;;;;;;;;;;YAAzG,gC;cAAA,mBAA4B,wB;YAAsB,kC;cAAA,qBAAwB,yB;YAA8D,gB;4BAAL,oBAAK,uB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAvB,gB;4BAAR,kBAAQ,2BAAuB,aAAvB,EAA2C,gBAA3C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAR,OAAQ,aAAkD,W;;;;;;;;;;;;;;EAA1D,C;;mBAEhJ,0E;QAAA,S;aAAA,Q;;aAAA,uB;EAA8F,C;;IAA9F,wC;IAAA,yB;IAAA,kC;IAAA,8B;EAA8F,C;;;;;;;;;;;;;YAAvD,kC;cAAA,qBAAwB,yB;YAA2D,gB;4BAAL,oBAAK,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAApB,gB;4BAAR,kBAAQ,wBAAoB,aAApB,EAA4B,oBAAK,SAAjC,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAR,OAAQ,a;;;;;;;;;;;;;;EAAR,C;;mBAE9F,mF;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;;IAFA,wC;IAAA,yB;IAAA,kC;IAAA,4B;IAAA,4B;IAAA,0B;EAEA,C;;;;;;;;;;;;;YAFgD,iC;cAAA,oBAAsB,yB;YAAqB,gC;cAAA,mBAA4B,wB;YACpG,gB;4BAAP,iBAAO,wBAAe,iBAAf,EAAuB,gBAAM,cAAgB,oBAAK,SAArB,CAA7B,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAb,gB;4BAAL,oBAAK,eAAa,aAAb,W;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;EACN,C;;IC7F2C,wBAAiB,SAAjB,e;EAAA,C;;IACI,yBAAkB,SAAlB,e;EAAA,C;;mBAE/C,uD;QAAA,S;aAAA,Q;;aAAA,uB;EAGA,C;;IAHA,wC;IAAA,yB;IAAA,0B;EAGA,C;;;;;;;;;;;;;YAFC,QAAQ,gBAAa,gBAArB,C;YAC0B,gB;4BAA1B,yBAA0B,iBAAQ,gBAAR,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EAC3B,C;;mBAEA,yD;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;;IAFA,wC;IAAA,yB;IAAA,0B;EAEA,C;;;;;;;;;;;;;YADC,gB;4BAAA,iBAAuB,SAAN,gBAAM,CAAS,UAAhC,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACD,C;;mBAEA,wD;QAAA,S;aAAA,Q;;aAAA,uB;EAIA,C;;IAJA,wC;IAAA,yB;IAAA,wB;IAAA,0B;EAIA,C;;;;;;;;;;;;;YAHe,kBAAA,gBAAM,OAAN,W;YAAd,gB;;;;;YAAA,KAAc,yBAAd,C;cAAA,gB;;;;YAAc,kC;YACb,gB;4BAAA,iBAAiB,KAAM,OAAvB,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;YADD,gB;;;;;;;;;;;;;;;;;EAGD,C;;ICLA,mB;IAAa,wBAAY,KAAZ,E;IACZ,cAA8B,CAAX,+BAAW,S;IAC9B,cAA8B,S;IAU9B,wBAAuB,UACtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CADsB,EAEtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAFsB,EAGtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAHsB,EAItB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAJsB,EAKtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CALsB,EAMtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CANsB,EAOtB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAPsB,E;IAUvB,oBAAmB,OAClB,uBAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CADkB,C;EAtBpB,C;;IAKE,8B;IAAsB,8B;IACtB,gC;IAAuB,gC;IACvB,8B;IAAsB,4B;IAEE,QAAkB,iB;IAA1C,yBAAsD,YlEqQZ,MAAW,MAAK,CAAL,CkErQC,C;EAL9B,C;;;;;;;IACxB,uB;EADD,C;;IACuB,uB;EADvB,C;;IAEC,wB;EAFD,C;;IAEwB,wB;EAFxB,C;;IAGC,uB;EAHD,C;;IAGuB,sB;EAHvB,C;;IAAA,8BACC,uDADD,EACuB,uDADvB,EAEC,0DAFD,EAEwB,0DAFxB,EAGC,uDAHD,EAGuB,oDAHvB,C;EAAA,C;;IAAA,OACC,iEADD,IACuB,oDADvB,KAEC,sDAFD,KAEwB,sDAFxB,KAGC,oDAHD,KAGuB,kDAHvB,O;EAAA,C;;IAAA,c;IACC,4D;IAAsB,4D;IACtB,6D;IAAuB,6D;IACvB,4D;IAAsB,2D;IAHvB,a;EAAA,C;;IAAA,4IACC,kDADD,IACuB,kDADvB,IAEC,oDAFD,IAEwB,oDAFxB,IAGC,kDAHD,IAGuB,gDAHvB,I;EAAA,C;;IAsBA,e;IAAsB,Y;IAAtB,iB;IAAA,uB;EAAqB,C;;IAArB,wC;IAAA,C;IACC,uEAAU,CAAV,C;IACA,2DAAI,CAAJ,C;IACA,mEAAQ,CAAR,C;IACA,mFAAgB,CAAhB,C;IACA,6DAAK,CAAL,C;IAEA,sC;EAPD,C;;;IACC,2B;IAAA,wC;EAAA,C;;;IACA,2B;IAAA,kC;EAAA,C;;;IACA,2B;IAAA,sC;EAAA,C;;;IACA,2B;IAAA,8C;EAAA,C;;;IACA,2B;IAAA,mC;EAAA,C;EhE0vLF,+D;EAAA,8D;EAAA,+E;;IgExvLE,wC;IACsB,gBAAT,uB;IhEgwLX,eAAiC,cAAlB,YAAY,gBAAZ,CAAkB,EAAc,EAAd,C;IAC1B,kBAAc,qBAAoB,QAApB,C;IA+NL,Q;IAAhB,iD;MAAgB,cAAhB,e;MACI,WAAY,aAAgB,OgEj+LK,GhEi+LrB,EAA0B,OAA1B,C;;IgEj+LjB,ahEm+LQ,W;EgEp+LT,C;;;;;;;;IAAA,2B;IAAA,+C;MAAA,8B;;IAAA,wC;EAAA,C;;;;;;;IAPD,wM;EAAA,C;;;IAAA,a;MAAA,iB;QAAA,6C;MAAA,W;QAAA,uC;MAAA,e;QAAA,2C;MAAA,uB;QAAA,mD;MAAA,Y;QAAA,wC;MAAA,QAAA,2E;;EAAA,C;;;IAaC,kB;IACA,oB;IACA,oC;IACA,4B;IACA,0C;IACA,gC;IACA,sC;IAEkB,IAAN,I;YAAM,qB;WACjB,W;QAAwB,Q;QAAxB,K;WACA,S;QAAsB,Q;QAAtB,K;WACA,iB;QAA8B,Q;QAA9B,K;WACA,K;QAAkB,Q;QAAlB,K;WACA,M;QAAmB,Q;QAAnB,K;cACQ,Q;QANG,K;;IAAZ,iB;IAQA,cAAa,wBAAQ,UAAR,C;EAjBF,C;;;;;;;IAqBE,Q;;MAAb,aAAa,uCAAW,CAAX,EAA2B,IAA3B,kC;MACD,gBAAZ,e;M1ERE,S0ESD,SAAoB,Y;M1ETnB,S0EUD,UAAqB,a;M1EVpB,S0EWD,gBAA2B,qB;MALqD,O1ELxE,S;;;M0EYR,gC;QAPgF,OAQjF,I;;;QARiF,O;;EAAA,C;;IAkBjF,6B;MACC,gBAAmC,SAAd,YAAL,IAAK,CAAc,EAAO,CAAP,C;MAEnC,UAAU,W;MACV,GAAI,gBAAO,SAAP,C;MACJ,GAAI,gBAAO,IAAP,C;MAEF,aAAF,SAAE,EAAW,IAAK,OAAhB,C;MACA,WAAF,SAAE,EAAW,SAAX,C;MACA,WAAF,SAAE,EAAW,IAAX,C;MACA,aAAF,SAAE,EAAW,GAAU,MAArB,C;IAVH,C;EAAA,C;;IAeA,uB;MACC,IAAI,kBAAS,CAAb,C;QAEC,cAAc,a;QAGD,QAAK,IAAU,OAAV,GAA8B,K;QAAhD,aAA4D,YlE2MpB,MAAW,MAAK,CAAL,CkE3MS,C;QAC5D,oBAAoB,IAAK,OAAL,GAAY,K;QAChC,UAAU,cAAU,IAAI,CAAJ,GAAQ,IAAK,OAAb,IAAoB,SAAS,CAAT,IAApB,KAAV,C;QACV,WAAW,C;QACX,UAAU,C;QACN,OAAJ,GAAI,EAAO,CAAP,EAAU,GAAV,C;QACA,OAAJ,GAAI,EAAO,CAAP,EAAU,CAAV,C;QACJ,aAAU,CAAV,MAAkB,MAAlB,M;UACC,WAAW,OAAK,SAAS,CAAT,IAAL,C;UACX,WAAe,IAAJ,GAAU,aAAV,GAA6B,K;UACpC,OAAJ,GAAI,EAAO,GAAP,EAAgB,IAAJ,GAAU,CAAV,GAAiB,CAA7B,C;UACA,WAAJ,GAAI,EAAW,MAAM,CAAN,IAAX,EAAoB,IAApB,C;UACA,WAAJ,GAAI,EAAW,MAAM,CAAN,IAAX,EAAyB,CAAL,IAApB,C;UACJ,YAAU,IAAV,EAAgB,IAAhB,EAAsB,GAAtB,EAA2B,MAAM,CAAN,IAA3B,EAAoC,IAApC,C;UACA,aAAO,CAAP,GAAW,IAAX,K;UACA,cAAQ,IAAR,I;;QAID,OAAQ,gBAAO,IAAP,EAAa,CAAb,EAAgB,IAAK,OAArB,C;QACJ,WAAJ,GAAI,EAAW,MAAM,CAAN,IAAX,EAAoB,OAAc,MAAlC,C;QACJ,OAAO,G;;;QAEP,OAAO,2BAAgB,iBAAQ,IAAR,EAAc,aAAd,C;;IA7BzB,C;EAAA,C;;IAiCA,kD;MAA6B,+B;QAAA,kBAAuB,I;;MbTrD,aAAa,qBaUyC,ebVzC,C;MACb,QAAQ,iBAAiB,MAAjB,C;MaSiE,SbRhE,CaQgE,C;MAAvE,OAAO,KAAW,IAAX,EbPF,MAAO,caOL,C;IADR,C;EAAA,C;;IAIA,kD;MAAuC,+B;QAAA,kBAAuB,I;;;Mbb/D,aAAa,qBackD,ebdlD,C;MACb,QAAQ,iBAAiB,MAAjB,C;Maa0E,SbZzE,CaYyE,C;MAAhF,OAAO,KAAW,IAAX,EAAiB,ObXnB,MAAO,caWY,CAAjB,C;IADR,C;EAAA,C;;IAK0C,4B;MACxC,wBAAW,aAAX,C;MACA,wBAAW,cAAX,C;MACA,oBAAO,CAAP,C;MACA,oBAAO,kBAAW,GAAlB,C;MACA,oBAAO,CAAP,C;MACA,oBAAO,CAAP,C;MACA,oBAAO,CAAP,C;MACD,W;IARyC,C;EAAA,C;;IAD1C,6B;MACC,mBAAW,MAAX,EAAqC,EAArC,EAAyC,4EAAzC,C;IADD,C;EAAA,C;;IAegE,4B;MAC5C,gB;MAAA,OAAP,cAAO,Q;MAAjB,kD;QAAU,QAAV,Y;QACC,oBAAO,kBAAK,cAAK,CAAL,CAAZ,C;QACA,oBAAO,kBAAK,cAAK,CAAL,CAAZ,C;QACA,oBAAO,kBAAK,cAAK,CAAL,CAAZ,C;;MAEF,W;IAN8D,C;EAAA,C;;IAOA,4B;MAC5C,gB;MAAA,OAAP,cAAO,Q;MAAjB,kD;QAAU,QAAV,Y;QACC,oBAAO,kBAAK,cAAK,CAAL,CAAZ,C;;MAEF,W;IAJ8D,C;EAAA,C;;IA0ChE,W;EAAA,C;;IApDM,IAmBQ,IAnBR,EAgCQ,M;IA1Gd,aAAa,KAAM,W;IACnB,YAAY,MAAO,M;IACnB,aAAa,MAAO,O;IAClB,aAAF,CAAE,EAAW,WAAX,C;IACA,aAAF,CAAE,EAAW,WAAX,C;IAEF,6C;IAaA,YAAkE,YAAxC,oBAAd,KAAM,QAAQ,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,CAAwC,C;IAElE,6C;IAiCA,0D;IAIA,oF;IAIA,yE;IAaC,kBADK,MACL,W;MACC,iD;MACA,aAAW,MAAX,EAAqC,MAAO,QAAQ,OAAf,GAAsB,CAAtB,IAArC,EAA8D,6BAA9D,C;MAOA,aAAW,MAAX,EAAqC,MAAO,QAAQ,OAAf,GAAsB,CAAtB,IAArC,EAA8D,+BAA9D,C;MAMA,UAAU,cAAU,SAAS,mBAAQ,MAAR,CAAT,IAAV,C;MACV,UAAU,C;MACV,aAAU,CAAV,MAAkB,MAAlB,M;QACK,OAAJ,GAAI,GAAO,UAAP,EAAO,kBAAP,SAAc,CAAd,C;QACJ,YAAY,MAAO,eAAM,CAAN,EAAS,CAAT,C;QACnB,YAAU,MAAO,KAAjB,EAAuB,KAAvB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,KAAxC,C;QACA,YAAO,KAAP,I;;MAED,WAAW,MAAX,EAAmB,SAAS,GAAT,CAAnB,C;;UAED,kBA1BK,MA0BL,Y;MACC,8C;MAEA,YAAU,cAAU,UAAS,mBAAQ,MAAR,IAAiB,CAAjB,IAAT,KAAV,C;MACV,YAAU,C;MACV,eAAU,CAAV,QAAkB,MAAlB,Q;QACK,OAAJ,KAAI,GAAO,cAAP,EAAO,sBAAP,WAAc,CAAd,C;QACJ,cAAY,MAAO,eAAM,CAAN,EAAS,GAAT,C;QACnB,IAAI,MAAO,QAAX,C;UACC,aAAU,CAAV,MAAkB,KAAlB,M;YACK,WAAJ,KAAI,EAAW,KAAX,EAAgB,kBAAK,2BAAkB,MAAO,KAAP,CAAY,UAAQ,CAAR,IAAZ,CAAlB,CAArB,C;YACJ,gBAAO,CAAP,I;;;;UAGD,eAAU,CAAV,QAAkB,KAAlB,Q;YACK,WAAJ,KAAI,EAAW,KAAX,EAAgB,MAAO,KAAP,CAAY,UAAQ,GAAR,IAAZ,CAAhB,C;YACJ,gBAAO,CAAP,I;;;;MAKH,WAAW,MAAX,EAAmB,SAAS,KAAT,CAAnB,C;;IAIF,aAAW,MAAX,EAAqC,CAArC,EAAwC,uBAAxC,C;EAED,C;;IAYC,4B;MACC,aAAa,uB;MACb,WAAW,uBAAY,CAAZ,C;MACX,WAAW,wBAAkB,oBAAP,MAAO,CAAlB,C;MACX,UAAU,uB;cAEJ,K;aACL,M;UAGW,Q;UAFV,oBACC,eACS,aAFA,IAEA,CADT,EAEU,aAHD,IAGC,CAFV,EAGkB,OAJT,IAIS,CAHlB,EAIc,QAAA,sCAAW,MAAX,WAAiB,OALtB,IAKsB,CAAjB,qDAJd,EAKqB,OANZ,IAMY,CALrB,EAMgB,OAPP,IAOO,CANhB,EAOmB,OARV,IAQU,CAPnB,C;UAWD,aAAa,gC;UAbd,K;aAeA,M;;UACgB,QAAI,sB;UAAJ,QAAkB,IAAK,OAAO,QAAZ,GAAsB,CAAtB,I;UAAjC,WtE3MM,MAAK,KIg/BmC,CJh/BnC,EIg/BsC,CJh/BtC,C;UsE4MX,IAAK,cAAK,kBAAW,KAAhB,EAAsB,CAAtB,EAAyB,IAAK,OAAO,QAArC,C;UAFN,K;aAIA,M;;UACgB,UAAI,sB;UAAJ,UAAkB,IAAK,OAAO,Q;UAA7C,WtE/MM,MAAK,KIg/BmC,GJh/BnC,EIg/BsC,GJh/BtC,C;UsEgNX,IAAK,cAAK,gBAAS,KAAd,EAAoB,CAApB,EAAuB,IAAK,OAAO,QAAnC,C;UAFN,K;aAIA,M;UACC,eAAQ,gBAAY,QAAL,IAAK,CAAZ,C;UADT,K;aAGA,M;UAAA,K;;IAjCF,C;EAAA,C;;IA4Ca,UAaH,MAbG,EAiBF,MAjBE,EAkBD,MAlBC,EAmBA,MAnBA,EAwBA,MAxBA,EAyBK,MAzBL,EAyBwC,M;IA9ErD,IAAM,aAAF,CAAE,CAAF,KAAkB,WAAtB,C;MAA8B,MAAM,8BAAyB,kBAAzB,C;IAClC,aAAF,CAAE,C;IAEF,kBAAuB,IAAvB,C;IACA,cAAc,sB;IACd,iBAAiB,gBAAW,IAAI,GAAJ,IAAX,C;IACS,0BAAU,GAAV,C;ILlMX,U;IAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,mB;MACI,MAAM,CAAN,IKiMuC,CAAC,CAAD,I;;IAA7C,eAAe,eL/LN,KK+LM,C;IACf,uBAAmB,CAAnB,C;IAEA,8F;IAuCA,OAAO,CAAG,QAAF,CAAE,CAAV,C;MACG,UAAF,CAAE,C;MACF,IAAI,cAAc,iBAAlB,C;QAAmC,OAAO,S;;IAG9B,gB;IAAA,iB;MAAW,MAAM,8BAAyB,qBAAzB,C;;IAA9B,aAAa,I;IACb,YAAY,MAAO,M;IACnB,aAAa,MAAO,O;IAEpB,YAAY,cAAU,wBAAC,IAAI,KAAJ,IAAD,EAAc,MAAd,GAAuB,MAAO,MAA9B,CAAV,C;IAEZ,2BAAgB,mBAAU,OAAQ,cAAlB,EAAiC,KAAjC,C;IAEhB,WAAiB,SAAN,KAAM,C;IACjB,cAAc,wBAAgB,MAAhB,C;IACd,UAAU,OAAQ,OAAO,M;IACzB,YAAY,OAAQ,M;IAGnB,IAAA,MAAO,MAAP,KAAgB,CAAhB,C;;MAA6E,gBAAtB,SAAQ,cAAR,C;MjEy5B/C,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,6B;MAAb,OAAa,gBAAb,C;QAAa,wB;sBACT,W;QiE/9B8E,gC;QAAK,QAAW,CjE+9BpE,IiE/9BoE,GAAK,CAAL,QAAS,CAAT,I;QAAX,c7DrRnD,eAAQ,CAAH,CAAG,CAAb,GAAyB,G;Q6DqRuD,UAAW,CjE+9B5F,IiE/9B4F,GAAK,CAAL,QAAS,CAAT,I;QAAX,c7DrR3E,eAAQ,CAAH,GAAG,CAAb,GAAyB,G;Q6DqR+E,UAAW,CjE+9BpH,IiE/9BoH,GAAK,CAAL,QAAS,CAAT,I;QjE+9BlI,aAAZ,WAAY,EiE/9BkE,yC7DrR9C,eAAQ,CAAH,GAAG,CAAb,GAAyB,G6DqR0B,E7DrR9C,aAAQ,CJovCd,IIpvCc,CAAb,GAAyB,G6DqR0B,CjE+9BlE,C;;MiE/9BI,qBAAQ,KAAR,EAAe,MAAf,UAA2J,WjEg+BxK,WiEh+BwK,CAA3J,C;;;MACb,sBAAS,KAAT,EAAgB,MAAhB,C;IAFT,gB;IAIA,WAAW,wE;IACX,YAAY,yE;IAEX,IADkB,MAAO,gBACzB,O;MAAK,8B;;MACG,0B;IAFT,mB;IAKa,0B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACK,SAAL,IAAK,Y;MAAmC,SAAL,IAAK,a;MAApD,6BAAmC,MAAnC,gB;QACC,UAAU,IAAK,Y;QACf,mBAAmB,IAAK,a;QACxB,sBAAsB,UAAW,IAAK,kB;QACtC,qBAAsB,6BAAkB,MAAO,MAAzB,C;QACtB,aAAkB,OAAL,IAAK,C;QAClB,iBAAiB,OAAQ,W;QACzB,cAAc,OAAQ,Q;QACjB,UAAL,IAAK,EAAU,UAAW,KAArB,EAA2B,CAA3B,EAA8B,cAA9B,C;QAEJ,iB;UACC,yBAAY,MAAZ,EAAoB,OAApB,EAA6B,UAA7B,EAAyC,MAAO,MAAhD,C;UACA,IAAK,qBAAY,GAAZ,EAAiB,GAAjB,EAAsB,UAAW,KAAjC,EAAuC,KAAvC,EAA8C,YAA9C,C;;cAEN,kB;UACC,yBAAY,MAAZ,EAAoB,OAApB,EAA6B,UAA7B,EAAyC,GAAzC,EAA8C,cAA9C,C;kBACM,I;iBACL,C;cAAK,iBAAI,gBAAO,UAAW,KAAlB,EAAwB,CAAxB,EAA2B,KAA3B,EAAkC,CAAlC,EAAqC,eAArC,C;cAAT,K;iBACA,C;cAAK,kBAAK,gBAAO,UAAW,KAAlB,EAAwB,CAAxB,EAA2B,KAA3B,EAAkC,CAAlC,EAAqC,eAArC,C;cAAV,K;oB1EjS2C,MAAM,6BAAoB,uC0EkSxD,YAAS,G1ElS+C,CAApB,C;;U0EoSlD,KAAM,qBAAY,GAAZ,EAAiB,GAAjB,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,YAApC,C;;QAGR,OAAQ,W;;;IAIV,OAAO,G;EACR,C;;IAEsB,oB;IACrB,eAAc,gBAAW,WAAO,OAAlB,C;IACd,kBAAiB,gBAAW,WAAO,OAAlB,C;IACjB,aAAY,eAAS,WAAO,MAAhB,C;EAHQ,C;;IAMnB,WAAW,e;IACX,kBAAa,Y;IACb,eAAU,I;EACX,C;;;;;;;IAI4B,Q;IAA5B,qBAAU,OAAO,eAAW,uCAAW,CAAX,EAA2B,KAA3B,8BAAX,CAAP,CAAV,C;EAAA,C;;IAGA,QAAQ,IAAI,CAAJ,GAAQ,CAAR,I;IACR,SAAS,IAAI,IAAI,CAAJ,IAAJ,C;IACT,SAAS,IAAI,IAAI,CAAJ,IAAJ,C;IACT,SAAS,IAAI,IAAI,CAAJ,IAAJ,C;IACT,OAAY,MAAM,EAAP,IAAe,MAAM,EAAzB,GAA8B,CAA9B,GAAyC,MAAM,EAAV,GAAc,CAAd,GAAqB,C;EAClE,C;;IAEqE,oB;MAAA,OAAY,CAAE,K;YAC5E,O;WACL,C;QAAA,K;WACA,C;QAAK,aAAU,GAAV,MAAoB,IAApB,M;UAA0B,WAAA,C7DzVM,KAAQ,C6DyVZ,C7DzVY,CAAb,GAAyB,G;U6DyVlB,UAAE,IAAI,GAAJ,I;UAAV,gBAAQ,C7DzVF,KAAQ,CAAH,GAAG,CAAb,GAAyB,G6DyV1B,K;UAAA,C7DxVyB,KAAL,C6DwVlB,C7DxVkB,IAAiB,S;;;Q6DwVpE,K;WACA,C;QAAK,eAAU,CAAV,QAAkB,IAAlB,Q;UAAwB,WAAA,C7D1VQ,KAAQ,C6D0Vd,G7D1Vc,CAAb,GAAyB,G6D0V5B,KAAQ,C7D1VA,KAAQ,C6D0VN,G7D1VM,CAAb,GAAyB,G6D0V5B,K;UAAA,C7DzV2B,KAAL,C6DyVpB,G7DzVoB,IAAiB,W;;;Q6DyVpE,K;WACA,C;QACC,eAAU,CAAV,QAAkB,GAAlB,Q;UAAuB,WAAA,C7D5Va,KAAQ,C6D4VnB,G7D5VmB,CAAb,GAAyB,G6D4VjC,KAAQ,CAAA,C7D5VK,KAAQ,C6D4VX,G7D5VW,CAAb,GAAyB,G6D4VzB,IAAO,CAAP,IAAR,K;UAAA,C7D3VgC,KAAL,C6D2VzB,G7D3VyB,IAAiB,W;;;Q6D4VnE,eAAU,GAAV,QAAoB,IAApB,Q;UAA0B,aAAA,C7D7VU,KAAQ,C6D6VhB,G7D7VgB,CAAb,GAAyB,G;U6D6VrB,UAAE,MAAI,GAAJ,I;UAAX,oBAAQ,CAAC,CAAA,C7D7VC,KAAQ,CAAH,GAAG,CAAb,GAAyB,G6D6VrB,KAAa,C7D7VZ,KAAQ,C6D6VM,G7D7VN,CAAb,GAAyB,G6D6VrB,KAAD,IAAsB,CAAtB,IAAR,K;UAAA,C7D5V6B,KAAL,C6D4VtB,G7D5VsB,IAAiB,W;;;Q6D0VpE,K;WAIA,C;QACC,eAAU,CAAV,QAAkB,GAAlB,Q;UAAuB,WAAA,C7DhWa,KAAQ,C6DgWnB,G7DhWmB,CAAb,GAAyB,G6DgWjC,KAAQ,C7DhWK,KAAQ,C6DgWX,G7DhWW,CAAb,GAAyB,G6DgWjC,K;UAAA,C7D/VgC,KAAL,C6D+VzB,G7D/VyB,IAAiB,W;;;Q6DgWnE,eAAU,GAAV,QAAoB,IAApB,Q;UAA0B,aAAA,C7DjWU,KAAQ,C6DiWhB,G7DjWgB,CAAb,GAAyB,G;U6DiWP,UAAE,MAAI,GAAJ,I;UAAF,aAAA,C7DjWb,KAAQ,CAAH,GAAG,CAAb,GAAyB,G;U6DiWK,aAAA,C7DjWzB,KAAQ,C6DiWmB,G7DjWnB,CAAb,GAAyB,G;U6DiWW,UAAE,MAAI,GAAJ,I;UAA3C,mBAAQ,4CAAiC,C7DjW/B,KAAQ,CAAH,GAAG,CAAb,GAAyB,G6DiWtB,CAAR,I;UAAA,C7DhW6B,KAAL,C6DgWtB,G7DhWsB,IAAiB,W;;;Q6D8VpE,K;c1E9U+C,MAAM,6BAAoB,uC0EkV5D,aAAU,M1ElVkD,CAApB,C;;E0EoVvD,C;;;;;;;;IA3VD,0B;MAAA,S;;IAAA,mB;EAAA,C;;IAyZC,+B;IAzDA,YAAiB,C;IACjB,YAAiB,C;EAHlB,C;;;MAMU,oBAAO,EAAP,GAAa,S;IAAb,C;;;IAGR,YAAK,QAAS,CAAT,GAAe,K;IACpB,YAAK,QAAS,EAAT,GAAgB,K;EACtB,C;;IAGC,YAAK,C;IACL,YAAK,C;EACN,C;;IAeQ,UAGC,MAHD,EAaA,M;IAzBP,cAAY,K;IACZ,YAAU,G;IACV,IAAI,UAAO,CAAX,C;MACW,U;MAAV,yBAAM,GAAa,CAAT,gBAAS,EAAT,wBAAS,SAAb,GAAyB,GAA/B,K;MACA,wBAAM,SAAN,I;MACA,wBAAM,sC;MACN,wBAAM,sC;MACN,M;;IAGD,WAAW,QAAM,sCAAN,I;IACX,WAAW,QAAM,sC;IACjB,OAAO,2CAAS,CAAhB,C;MACC,QAAQ,sC;MACR,gBAAO,CAAP,I;MACA,OAAO,2CAAM,CAAb,C;QACW,U;QAAV,yBAAM,GAAa,CAAT,gBAAS,EAAT,wBAAS,SAAb,GAAyB,GAA/B,K;QACA,wBAAM,SAAN,I;;MAED,wBAAM,sC;MACN,wBAAM,sC;;IAGP,UAAQ,I;IACR,gBAAO,GAAP,I;IACA,OAAO,+CAAM,CAAb,C;MACW,U;MAAV,yBAAM,GAAa,CAAT,gBAAS,EAAT,wBAAS,SAAb,GAAyB,GAA/B,K;MACA,wBAAM,SAAN,I;;IAED,wBAAM,sC;IACN,wBAAM,sC;EACP,C;;IAGC,UAAU,a;IACV,WAAS,IAAK,K;IACd,WAAS,IAAK,K;IACd,OAAO,G;EACR,C;;IAEA,iC;IACC,cACmB,K;IACnB,cACmB,I;EAJpB,C;;IAQE,YAAY,0B;IACZ,UAAgB,YAAO,0BAAP,C;IAChB,WAAiB,WAAW,0BAAX,C;IACjB,WAAiB,aAAM,IAAN,C;IACjB,mBAAQ,0BAAR,C;IACA,gBAAS,WAAW,0BAAX,CAAD,KAAuB,0BAAvB,+BAA+B,CAA/B,EAAR,C;IACA,gBAAS,kBAAW,EAAX,MAAkB,0BAAlB,CAAD,KAA+B,kBAAW,EAAX,MAAkB,0BAAlB,CAA/B,MAA4D,0BAA5D,WAAoE,GAApE,CAAR,C;IACA,IAAI,qBAAQ,0BAAR,MAAJ,C;MAAmB,qBAAQ,0BAAR,C;IACnB,IAAI,qBAAQ,0BAAR,MAAJ,C;MAAmB,qBAAQ,0BAAR,C;IACnB,IAAI,qBAAQ,2BAAR,MAAJ,C;MAAyB,qBAAQ,2BAAR,C;IACzB,IAAI,qBAAQ,0BAAR,MAAJ,C;MAAmB,qBAAQ,0BAAR,C;IACnB,OAAO,QAAS,eAAS,EAAT,CAAT,C;EACR,C;;;;;;;;IApBD,wC;MAAA,uB;;IAAA,iC;EAAA,C;;;;;;;IAqDA,6B;IA5BA,WAGgB,C;EAJjB,C;;;MAOU,e;IAAA,C;;;IAEkB,qB;MAAA,QAAa,C;IAAG,mB;MAAA,MAAW,GAAI,OAAJ,GAAW,KAAX,I;IAM1B,Q;IAL3B,cAAY,K;IACZ,YAAU,G;IAEV,QAAU,CAAF,Q;IACR,OAAO,kCAAS,CAAhB,C;MACC,IAAI,yDAAY,KAAM,GAAa,CAAT,cAAS,EAAT,sBAAS,OAAnB,IAA+B,GAA3C,IAAqD,CAAE,KAAK,C;;IAEjE,WAAM,CAAF,C;EACL,C;;IAEoB,WAAI,C;EAAV,C;;IACa,a;EAAN,C;;IAGpB,UAAU,W;IACV,UAAQ,IAAK,I;IACb,OAAO,G;EACR,C;;IAEA,+B;IACC,mBAAkC,eAAS,GAAT,C;IAGjC,aAAU,CAAV,MAAkB,GAAlB,M;MACC,QAAQ,C;MACR,QAAQ,C;MACR,OAAO,sBAAO,CAAd,C;QACC,IAAI,KAAM,CAAN,MAAW,CAAf,C;UACC,IAAI,aAAgB,CAAE,KAAK,C;;;UAE3B,IAAI,CAAE,KAAK,C;;;MAGb,iBAAU,CAAV,IAAe,C;;IAIjB,iBACsB,E;EAnBvB,C;;IAkCoB,Q;IAZlB,aAAW,I;IACX,aAAW,I;IACX,O;IACA,WAAW,iBAAU,cAAV,C;IACX,UAAU,iBAAU,cAAV,C;IAGV,IAAI,2CAAQ,CAAR,OAAJ,C;MAAe,OAAO,M;IAGtB,IAAI,CAAJ,IAAS,8B;IACT,MAAM,e;IACY,qB;IAAlB,aAAU,CAAV,gB;MACC,IAAI,CAAJ,IAAS,G;MACT,MAAM,cAAQ,CAAR,C;;IAIP,+BAAkB,IAAlB,EAAwB,GAAxB,C;IAGA,+BAAkB,GAAlB,EAAuB,IAAvB,C;;MAMC,+BAAkB,IAAlB,EAAwB,GAAxB,C;MACA,IAAI,mBAAS,eAAT,GAAc,gBAAd,CAAJ,C;QAAsB,SAAO,wBAAiB,IAAjB,EAAuB,MAAvB,C;MAC7B,SAAO,kBAAS,CAAT,C;MAGP,IAAI,eAAQ,gBAAR,CAAJ,C;QAAgB,K;MAGhB,+BAAkB,GAAlB,EAAuB,IAAvB,C;MACA,IAAI,mBAAS,eAAT,GAAc,gBAAd,CAAJ,C;QAAsB,SAAO,wBAAiB,GAAjB,EAAsB,MAAtB,C;MAC7B,SAAO,kBAAS,CAAT,C;;IAGC,wBAAQ,gBAAR,E;IAGT,SAAO,WAAS,IAAT,C;IACP,OAAO,M;EACR,C;;IAGC,YAAU,G;IACV,UAAgB,gB;IAChB,YAAY,C;IACZ,OAAO,eAAO,gBAAP,CAAP,C;MACC,IAAI,kBAAQ,eAAR,GAAa,gBAAb,CAAJ,C;QACC,MAAM,QAAQ,IAAI,KAAJ,CAAR,C;MACP,QAAM,iBAAQ,CAAR,C;MACN,qB;;IAED,OAAO,G;EACR,C;;IAGmB,Q;IAAA,qB;IAAlB,aAAU,CAAV,gB;MACC,OAAO,CAAP,IAAY,wBAAiB,GAAjB,EAAsB,IAAI,CAAJ,CAAtB,C;EACd,C;;;MAIE,UAAU,eAAS,gBAAU,OAAnB,C;MACV,UAAU,gBAAV,EAAqB,CAArB,EAAwB,GAAxB,EAA6B,CAA7B,EAAgC,GAAI,OAApC,C;MACA,OAAO,G;IACR,C;;;;;;;;;IA5FF,sC;MAAA,qB;;IAAA,+B;EAAA,C;;;;;;;ICvdD,mB;IACa,wBAAY,KAAZ,E;EADb,C;;IAGe,Q;IAAb,aAAa,kCADgE,CAChE,2BAA6B,UAAU,gBAAV,C;IAC1C,gBAAgB,WAF6D,CAE7D,EAAW,aAFkD,CAElD,CAAX,C;IAChB,qBAAqB,WAHwD,CAGxD,EAAW,aAH6C,CAG7C,CAAX,C;IACrB,mBAAmB,WAJ0D,CAI1D,EAAW,aAJ+C,CAI/C,CAAX,C;IACnB,gBAAiD,qBAAjB,eAAhB,cAL6D,CAK7D,CAAgB,CAAiB,EAAc,MAAd,C;IAIjD,OAAO,cAAU,OAAO,eAAW,SAAX,CAAP,CAAV,C;EATsE,C;;IAiBrD,UACA,MADA,EAEA,MAFA,EAGA,M;IAPxB,UAAU,C;IACV,UAAU,aAAS,KAAT,EAAgB,MAAhB,C;IAES,0BAAU,mBAAQ,MAAR,CAAV,C;INGJ,U;IAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,mB;MACI,MAAM,CAAN,IMJyC,CAAC,CAAD,I;;IAA/C,mBNMS,K;IMLT,eAAe,CAAS,mBAAT,QAAS,EAAU,CAAV,CAAT,mBAAyB,Y;IACxC,eAAe,CAAS,qBAAT,QAAS,EAAU,CAAV,CAAT,qBAAyB,Y;IACxC,eAAe,CAAS,qBAAT,QAAS,EAAU,CAAV,CAAT,qBAAyB,Y;IACxC,eAAe,CAAS,qBAAT,QAAS,EAAU,CAAV,CAAT,qBAAyB,Y;IAExC,aAAU,CAAV,MAAkB,MAAlB,M;MACC,aAAU,CAAV,MAAkB,KAAlB,M;QACC,QAAsB,aAAd,SAAS,GAAT,CAAc,C;QACtB,QAAsB,aAAd,SAAS,GAAT,CAAc,C;QACtB,QAAsB,aAAd,SAAS,GAAT,CAAc,C;QACtB,QAAsB,aAAd,SAAS,GAAT,CAAc,C;QACtB,GAAI,KAAJ,CAAS,GAAT,IAAgB,kBAAK,cAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;QACrB,iB;;;IAIF,OAAO,G;EACR,C;;IASO,IAcU,IAdV,UAoBc,MApBd,EAoBiC,MApBjC,EAsByB,M;IA5B/B,wBAAwB,sB;IACxB,YAAY,MAAO,M;IACnB,aAAa,MAAO,O;IACpB,gBAAgB,MAAO,S;INzBkC,YAAa,QM0BjD,SN1BiD,C;IAIvD,U;IAAA,SAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,mB;MACI,MAAM,CAAN,IMqB4B,cAAU,0BAAV,C;;IAAlC,eNnBS,K;YMqBH,kB;WACL,C;QACC,aAAU,CAAV,MAAkB,SAAlB,M;UACC,SAAS,CAAT,IAAc,SAAK,mBAAU,mBAAQ,MAAR,CAAV,C;;;QAFrB,K;WAKA,C;QACiC,kBAAnB,SAAQ,SAAR,C;QlEynCN,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;QAqEA,U;QAAA,+B;QAAb,OAAa,gBAAb,C;UAAa,wB;UACT,WAAY,WkE/rCsB,2ClE+rCtB,C;;;QkE/rChB,YlEgsCO,W;QkE5rCP,kBAAe,CAAf,WAAuB,SAAvB,W;UACC,aAAa,SAAS,MAAT,C;UACb,WAAW,C;UACE,yBAAM,MAAN,C;UAAb,kD;YAAa,WAAb,Y;YACC,UAAU,mBAAS,I;YACnB,OAAO,mBAAS,GAAhB,C;cACC,UAAU,kB;cACV,IAAI,OAAO,GAAX,C;gBACC,WAAW,kB;gBACG,eAAM,GAAN,I;gBAAd,aAAU,CAAV,mB;kBAA0B,OAAO,aAAP,EAAO,qBAAP,YAAsB,OAAL,IAAK,C;;;;gBAEhD,eAAU,CAAV,SAAa,GAAb,Q;kBAAkB,OAAO,aAAP,EAAO,qBAAP,YAA0B,OAAT,kBAAS,C;;;;;;;QAhBjD,K;cAsBQ,UAAU,oCAAiC,iBAA3C,C;QA5BT,K;;IA8BA,OAAO,oBAAa,KAAb,EAAoB,MAApB,EAA4B,QAA5B,C;EACR,C;;IAEqB,oB;IACpB,gBAAe,C;IACf,sBAAqB,C;IACrB,iBAAgB,C;EAHjB,C;;;;;;;IAOC,IAAI,oBADgF,CAChF,EAAY,CAAZ,GAAkB,MAAlB,CAAJ,C;MAA8B,OAAO,I;IACrC,cAAc,aAFsE,CAEtE,C;YACR,Q;WACL,C;QAAA,K;WACA,C;QAAK,OAAO,I;cACJ,OAAO,I;;IAEhB,eAAe,UARqE,CAQrE,EAAU,CAAV,C;IACf,eAAe,aATqE,CASrE,C;IACf,aAAa,aAVuE,CAUvE,C;IACb,YAAY,aAXwE,CAWxE,C;IACZ,qBAAqB,aAZ+D,CAY/D,C;IACrB,gBAAgB,aAboE,CAapE,C;IACM,gBAAf,sB;I3ErCL,S2EsCD,c;I3EtCC,S2EuCD,gB;I3EvCC,S2EwCD,gBAAoB,qC;I3ExCnB,S2EyCD,oB;I3EzCC,S2E0CD,gC;I3E1CC,S2E2CD,sB;IAND,O3EpCS,S;E2EsB2E,C;;;;;;;;IApFtF,0B;MAAA,S;;IAAA,mB;EAAA,C;;ICGA,mB;IAAa,wBAAY,KAAZ,E;EAAb,C;EjBuHA,4C;;IiBrHgB,iBAAF,CAAE,C;IAAmB,QAAS,CAAE,OAAO,Q;IAAU,gBAAvC,iBxE+Kb,MAAK,KwE/KuB,GxE+KvB,EI21BsC,CJ31BtC,CwE/KQ,C;IjByHmB,U;IiBzHzC,YjByH+D,OAAtB,+DAAsB,CAAO,W5B9HX,c;;M6CO1D,IAAU,WAAN,KAAM,EAAW,MAAX,CAAN,IAAkC,WAAN,KAAM,EAAW,OAAX,CAAtC,C;QAC4D,kBAAzB,WAAV,QAAR,MAAF,CAAE,CAAQ,CAAU,EAAS,aAAS,MAAlB,C;QjBsHK,U;QiBtHvC,cjBsH6D,OAAtB,iEAAsB,CAAO,W;QiBrHpE,UAAyC,SAAI,OAAJ,C;QACtB,kBAAZ,e;Q5EmDP,W4ElDC,SAAY,S;Q5EkDb,W4EjDC,UAAa,U;QAFd,O5EoDO,W;;;Q4E/CP,OAAO,I;;;;MAEP,gC;QACD,OAAO,I;;;QAZR,O;;EAcD,C;;IAG4D,gBAAzB,WAAV,QAAR,MAAF,CAAE,CAAQ,CAAU,EAAS,aAAS,MAAlB,C;IjBuGO,Q;IiBvGzC,cjBuG+D,OAAtB,2DAAsB,CAAO,W;IiBtGtE,UAAyC,SAAI,OAAJ,C;IACzC,OAAO,cAAU,OAAO,eACnB,SAAJ,GAAI,CAAS,UADU,CAAP,CAAV,C;EAGR,C;;;;;;;;IAzBD,0B;MAAA,S;;IAAA,mB;EAAA,C;;;ICPsC,SAAa,kBAAS,oBAAT,C;IAAb,gB;EAAA,C;;ICItC,mB;IAAa,wBAAY,KAAZ,E;EAAb,C;;;MAGG,QAAQ,wBAAW,CAAX,C;MACW,gBAAZ,e;M9EyDN,S8ExDA,SAAe,O;M9EwDf,S8EvDA,UAAgB,Q;M9EuDhB,S8EtDA,gBAAsB,c;MAHvB,O9E0DQ,S;;;M8ErDP,gC;QACD,OAAO,I;;;QARR,O;;EAUD,C;;IAGC,kB;IACA,oB;IACA,kB;IACA,gC;IAEA,YAAW,wBAAQ,WAAR,C;IACX,aAAY,oBAAe,CAAf,I;EAPH,C;;;;;;;IAYT,eAAiB,OAAF,CAAE,C;IACjB,mBAAqB,OAAF,CAAE,C;IACrB,gBAAkB,OAAF,CAAE,C;YACZ,U;WACL,C;Q9Ed+C,MAAM,6BAAoB,sC8Ec/D,qB9Ed2C,C;W8EerD,C;QAAA,K;WACA,C;WAAA,E;Q9EhB+C,MAAM,6BAAoB,sC8EgB3D,iB9EhBuC,C;cAAN,MAAM,6BAAoB,sC8EiB5D,a9EjBwC,C;;I8EmBtD,sBAAwB,aAAF,CAAE,C;IACxB,qBAAuB,aAAF,CAAE,C;IACvB,wBAA0B,OAAF,CAAE,C;IAC1B,aAAA,CAAE,SAAF,yBAAc,4BAAiB,iBAAjB,CAAd,E;IACA,YAAc,WAAF,CAAE,C;IACd,YAAc,WAAF,CAAE,C;IACd,YAAc,WAAF,CAAE,C;IACd,aAAe,WAAF,CAAE,C;IACf,iBAAmB,OAAF,CAAE,C;YACb,W;WACL,E;WAAA,E;QAAA,K;c9E7B+C,MAAM,6BAAoB,sC8E8B5D,gB9E9BwC,C;;I8EgCtD,sBAAwB,OAAF,CAAE,C;IACxB,YAAY,CAAE,oBAAqB,CAAtB,GAA6B,CAA9B,MAAoC,C;IAChD,cAAgB,oBAAqB,CAAtB,GAA6B,C;IAC1C,UAAF,CAAE,EAAU,QAAV,C;IACF,OAAO,aAAa,KAAb,EAA6B,MAA7B,EAA6C,KAA7C,EAAmE,UAAnE,C;EACR,C;;IAIyB,IAAX,I;IADb,WAAW,wBAAW,CAAX,C;YACQ,IAAK,c;WACvB,E;QAAM,wB;QAAN,K;WACA,E;QAAM,yB;QAAN,K;c9E3C+C,MAAM,6BAAoB,sC8E4C5D,gB9E5CwC,C;;I8EyCtD,iB;IAKA,UAA4C,CAAlC,aAAS,IAAK,MAAd,EAAqB,IAAK,OAA1B,CAAkC,uBAAa,MAAb,EAAuB,UAAF,CAAE,EAAU,YAAA,IAAK,KAAL,EAAY,IAAK,MAAjB,CAAV,CAAvB,C;IAC5C,IAAI,IAAK,MAAT,C;MAAgB,GAAI,Q;IACpB,OAAO,cAAU,OAAO,eAAW,GAAX,CAAP,CAAV,C;EACR,C;;IAIO,IAOa,IAPb,UAQE,MARF,EASE,MATF,EAUE,MAVF,EAWE,M;IAZR,aAAa,KAAM,W;IAElB,kBADK,MACL,W;M9EtD+C,MAAM,6BAAoB,sC8EuDnE,sC9EvD+C,C;;U8EyDrD,kBAJK,MAIL,Y;MACC,WAAW,cAAU,MAAO,KAAP,GAAc,CAAd,IAAV,C;MACX,QAAQ,C;MACS,OAAP,MAAO,K;MAAjB,kD;QAAU,QAAV,Y;QACC,KAAK,UAAL,EAAK,kBAAL,YAAyB,OAAb,kBAAK,cAAK,CAAL,CAAQ,C;QACzB,KAAK,UAAL,EAAK,kBAAL,YAAyB,OAAb,kBAAK,cAAK,CAAL,CAAQ,C;QACzB,KAAK,UAAL,EAAK,kBAAL,YAAyB,OAAb,kBAAK,cAAK,CAAL,CAAQ,C;QACzB,KAAK,UAAL,EAAK,kBAAL,YAAyB,OAAb,kBAAK,cAAK,CAAL,CAAQ,C;;MAExB,SAAF,CAAE,EAAO,CAAP,C;MACA,SAAF,CAAE,EAAO,CAAP,C;MACA,SAAF,CAAE,EAAO,CAAP,C;MACA,aAAF,CAAE,EAAW,CAAX,C;MACA,aAAF,CAAE,EAAW,CAAX,C;MACA,SAAF,CAAE,EAAO,CAAP,C;MACA,aAAF,CAAE,EAAW,CAAX,C;MACA,aAAF,CAAE,EAAW,CAAX,C;MACA,aAAF,CAAE,EAAW,MAAO,MAAlB,C;MACA,aAAF,CAAE,EAAW,MAAO,OAAlB,C;MACA,SAAF,CAAE,EAAO,EAAP,C;MACA,SAAF,CAAE,EAAO,KAAM,CAAb,C;MAEA,WAAF,CAAE,EAAW,IAAX,C;;EAGL,C;;;;;;;;IAlGD,0B;MAAA,S;;IAAA,mB;EAAA,C;;ICAC,aAAa,UAAO,oBAAO,IAAd,EAAmB,oBAAO,MAA1B,EAAiC,oBAAO,KAAxC,EAA8C,oBAAO,MAArD,E;IACb,eAAkB,OAAL,SAAK,C;IAClB,UAAU,aAAsB,YAAb,QAAO,MAAM,CAAtB,EAA6C,YAAd,QAAO,OAAO,CAA7C,C;IACV,a;IAAA,gBAAmB,SAAnB,qC;MAAA,mB;MACC,YAAY,mBAAO,QAAQ,MAAO,KAAtB,C;MACZ,GAAI,cAAK,KAAL,EAAgB,YAAJ,CAAE,EAAE,CAAhB,EAA6B,YAAJ,CAAE,EAAE,CAA7B,EAA8C,YAAR,CAAE,MAAM,CAA9C,EAAgE,YAAT,CAAE,OAAO,CAAhE,C;;IAEL,OAAO,G;EACR,C;;ICZ6C,6B;IAArB,c;EAAD,C;;;MACU,OAAA,QAAI,M;IAAJ,C;;;;MACC,OAAA,QAAI,O;IAAJ,C;;;IhFkBgB,MAAM,6BAAoB,sCgFfrE,uEhFeiD,C;EgFdvD,C;;;;;;ECsBD,iG;;I9DfgB,wB;IAwEf,aAAY,qB;IACZ,eAAoB,iB;IAEpB,+B8D5D6E,iC9D4D/B,oC8D5D+B,C;I9D6D7E,2B8D7D6E,iC9D6DtC,gC8D7DsC,C;I9D8D7E,yB8D9D6E,iC9D8DvC,8B8D9DuC,C;I9D+D7E,6B8D/D6E,iC9D+DrC,kC8D/DqC,C;I9DgE7E,2B8DhE6E,iC9DgEvC,gC8DhEuC,C;I9DiE7E,sB8DjE6E,iC9DiE7C,2B8DjE6C,C;I9DkE7E,+B8DlE6E,iC9DkE3B,oC8DlE2B,C;I9DmE7E,iC8DnE6E,iC9DmEvB,sC8DnEuB,C;I9DoE7E,6B8DpE6E,iC9DoEpC,kC8DpEoC,C;I9DwN7E,YAAW,4B;EAvOG,C;;;MACS,OAAA,aAAS,M;IAAT,C;;;;MACC,OAAA,aAAS,O;IAAT,C;;;IAExB,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,2C;IAAA,C;IAAqB,kE;IAAM,oE;IAAO,sE;EAAlC,C;;;IAAqB,8B;IAAA,sC;EAAA,C;;;IAAM,8B;IAAA,uC;EAAA,C;;;IAAO,8B;IAAA,wC;EAAA,C;;;;;;;IAAlC,4H;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,2C;MAAA,a;QAAA,4C;MAAA,c;QAAA,6C;MAAA,QAAA,8E;;EAAA,C;;;IACA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,4C;IAAA,C;IAAsB,sE;IAAO,sE;IAAO,sE;EAApC,C;;;IAAsB,+B;IAAA,wC;EAAA,C;;;IAAO,+B;IAAA,wC;EAAA,C;;;IAAO,+B;IAAA,wC;EAAA,C;;;;;;;IAApC,+H;EAAA,C;;;IAAA,a;MAAA,a;QAAA,6C;MAAA,a;QAAA,6C;MAAA,a;QAAA,6C;MAAA,QAAA,+E;;EAAA,C;;;IACA,e;IAAA,iB;IAAA,uB;EAAA,C;;IAAA,+C;IAAA,C;IAAyB,kF;IAAU,gF;IAAS,8E;EAA5C,C;;;IAAyB,kC;IAAA,8C;EAAA,C;;;IAAU,kC;IAAA,6C;EAAA,C;;;IAAS,kC;IAAA,4C;EAAA,C;;;;;;;IAA5C,8I;EAAA,C;;;IAAA,a;MAAA,gB;QAAA,mD;MAAA,e;QAAA,kD;MAAA,c;QAAA,iD;MAAA,QAAA,kF;;EAAA,C;;;IAEA,e;IAAiC,kB;IAAjC,iB;IAAA,uB;EAAgC,C;;IAAhC,yD;IAAA,C;IACC,+FAAK,GAAL,C;IAAW,2FAAG,GAAH,C;IAAS,2FAAG,GAAH,C;IAAS,2FAAG,GAAH,C;EAD9B,C;;;IACC,4C;IAAA,oD;EAAA,C;;;IAAW,4C;IAAA,kD;EAAA,C;;;IAAS,4C;IAAA,kD;EAAA,C;;;IAAS,4C;IAAA,kD;EAAA,C;;;;;;;IAD9B,iN;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,yD;MAAA,U;QAAA,uD;MAAA,U;QAAA,uD;MAAA,U;QAAA,uD;MAAA,QAAA,4F;;EAAA,C;;;IAKC,0C;EADD,C;;IACC,4C;IACC,mE;EADD,C;;IACsB,6B;IACpB,uBAA0B,G;IAC1B,wBAA2B,G;EAFhB,C;;;MACX,2B;IAAA,C;;;;MACA,4B;IAAA,C;;;;;;;;;;;;;IAHF,mD;MAAA,kC;;IAAA,4C;EAAA,C;;EAUqD,C;;EACoD,C;;IACxB,UAAO,eAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,C;EAAjB,C;;EAC2E,C;;IAAhG,qB;MAAA,QAAa,KAAM,M;IAAO,sB;MAAA,SAAc,KAAM,O;IAAQ,yB;MAAA,YAAsB,c;IAA9H,kJ;EAAkJ,C;;;;;;;IAGnJ,e;IAAyB,kB;IAAzB,iB;IAAA,uB;EAAwB,C;;IAAxB,iD;IAAA,C;IACC,6EAAI,GAAJ,C;IAAU,iFAAM,GAAN,C;IAAY,uFAAS,GAAT,C;IAAe,mFAAO,GAAP,C;EADtC,C;;;IACC,oC;IAAA,2C;EAAA,C;;;IAAU,oC;IAAA,6C;EAAA,C;;;IAAY,oC;IAAA,gD;EAAA,C;;;IAAe,oC;IAAA,8C;EAAA,C;;IAGpC,WADgE,IAChE,kD;MAD0D,OAC9C,Q;;MAD8C,OAElD,SAAS,U;EAFyC,C;;;;;;;IAH5D,6L;EAAA,C;;;IAAA,a;MAAA,W;QAAA,gD;MAAA,a;QAAA,kD;MAAA,gB;QAAA,qD;MAAA,c;QAAA,mD;MAAA,QAAA,oF;;EAAA,C;;;IAUA,e;IAA2B,kB;IAA3B,iB;IAAA,uB;EAA0B,C;;IAA1B,mD;IAAA,C;IACC,mFAAK,GAAL,C;IAAW,uFAAO,GAAP,C;IAAa,qFAAM,GAAN,C;EADzB,C;;;IACC,sC;IAAA,8C;EAAA,C;;;IAAW,sC;IAAA,gD;EAAA,C;;;IAAa,sC;IAAA,+C;EAAA,C;;IAEgB,eAAQ,U;EAAR,C;;;;;;;IAHzC,oJ;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mD;MAAA,c;QAAA,qD;MAAA,a;QAAA,oD;MAAA,QAAA,sF;;EAAA,C;;;IAMA,e;IAAqB,oB;IAAqB,oB;IAA1C,iB;IAAA,uB;EAAoB,C;;IAApB,6C;IAAA,C;IACC,uEAAK,KAAL,EAAY,KAAZ,C;IAAoB,mFAAW,IAAX,EAAiB,KAAjB,C;IAAyB,+EAAS,KAAT,EAAgB,IAAhB,C;IAAuB,2EAAO,IAAP,EAAa,IAAb,C;EADrE,C;;;IACC,gC;IAAA,wC;EAAA,C;;;IAAoB,gC;IAAA,8C;EAAA,C;;;IAAyB,gC;IAAA,4C;EAAA,C;;;IAAuB,gC;IAAA,0C;EAAA,C;;;;;;;IADrE,mL;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,6C;MAAA,kB;QAAA,mD;MAAA,gB;QAAA,iD;MAAA,c;QAAA,+C;MAAA,QAAA,gF;;EAAA,C;;;IAKC,yB;MAAA,YAA0B,c;IAC1B,oB;MAAA,OAA0B,I;IAC1B,oB;MAAA,OAAyB,kB;IACzB,6B;MAAA,wD;IACA,yB;MAAA,YAAwB,G;IACxB,uB;MAAA,8C;IACA,wB;MAAA,iD;IACA,0B;MAAA,aAAyB,I;IACzB,2B;MAAA,cAAyB,oBAAM,oBAAO,MAAb,C;IACzB,yB;MAAA,YAAuB,oBAAM,oBAAO,MAAb,C;IACvB,oB;MAAA,OAAiB,mBAAK,YAAL,EAAmB,IAAnB,C;IACjB,6B;MAAA,8D;IACA,+B;MAAA,8D;IACA,2B;MAAA,cAA0B,G;IAb1B,0B;IACA,gB;IACA,gB;IACA,kC;IACA,0B;IACA,sB;IACA,wB;IACA,4B;IACA,8B;IACA,0B;IACA,gB;IACA,kC;IACA,sC;IACA,8B;EAde,C;;IAiBQ,IACf,I;IAFa,OAAA,IAAK,cACb,cAAU,QADG,EAElB,gDAFkB,EAGlB,SAAK,QAHa,C;EAAL,C;;;;;;;IAfrB,qB;EADD,C;;IAEC,gB;EAFD,C;;IAGC,gB;EAHD,C;;IAIC,yB;EAJD,C;;IAKC,qB;EALD,C;;IAMC,mB;EAND,C;;IAOC,oB;EAPD,C;;IAQC,sB;EARD,C;;IASC,uB;EATD,C;;IAUC,qB;EAVD,C;;IAWC,gB;EAXD,C;;IAYC,yB;EAZD,C;;IAaC,2B;EAbD,C;;IAcC,uB;EAdD,C;;IAAA,2BACC,iDADD,EAEC,kCAFD,EAGC,kCAHD,EAIC,6DAJD,EAKC,iDALD,EAMC,2CAND,EAOC,8CAPD,EAQC,oDARD,EASC,uDATD,EAUC,iDAVD,EAWC,kCAXD,EAYC,6DAZD,EAaC,mEAbD,EAcC,uDAdD,C;EAAA,C;;IAAA,OACC,oDADD,IAEC,sCAFD,KAGC,sCAHD,KAIC,wDAJD,KAKC,gDALD,KAMC,4CAND,KAOC,8CAPD,KAQC,kDARD,KASC,oDATD,KAUC,gDAVD,KAWC,sCAXD,KAYC,wDAZD,KAaC,4DAbD,KAcC,oDAdD,O;EAAA,C;;IAAA,c;IACC,0D;IACA,qD;IACA,qD;IACA,8D;IACA,0D;IACA,wD;IACA,yD;IACA,2D;IACA,4D;IACA,0D;IACA,qD;IACA,8D;IACA,gE;IACA,4D;IAdD,a;EAAA,C;;IAAA,4IACC,8CADD,IAEC,oCAFD,IAGC,oCAHD,IAIC,sDAJD,IAKC,8CALD,IAMC,0CAND,IAOC,4CAPD,IAQC,gDARD,IASC,kDATD,IAUC,8CAVD,IAWC,oCAXD,IAYC,sDAZD,IAaC,0DAbD,IAcC,kDAdD,I;EAAA,C;;;a8D1CQ,uCAAW,M;I9DoEnB,C;;M8DhEC,uCAAW,KzD3Bb,ayD2Ba,C;I9DgEZ,C;;;;a8DpEQ,mCAAW,M;I9DqEnB,C;;M8DjEC,mCAAW,KzD3Bb,SyD2Ba,C;I9DiEZ,C;;;;a8DrEQ,iCAAW,M;I9DsEnB,C;;M8DlEC,iCAAW,KzD3Bb,OyD2Ba,C;I9DkEZ,C;;;;a8DtEQ,qCAAW,M;I9DuEnB,C;;M8DnEC,qCAAW,KzD3Bb,WyD2Ba,C;I9DmEZ,C;;;;a8DvEQ,mCAAW,M;I9DwEnB,C;;M8DpEC,mCAAW,KzD3Bb,SyD2Ba,C;I9DoEZ,C;;;;a8DxEQ,8BAAW,M;I9DyEnB,C;;M8DrEC,8BAAW,KzD3Bb,IyD2Ba,C;I9DqEZ,C;;;;a8DzEQ,uCAAW,M;I9D0EnB,C;;M8DtEC,uCAAW,KzD3Bb,ayD2Ba,C;I9DsEZ,C;;;;a8D1EQ,yCAAW,M;I9D2EnB,C;;M8DvEC,yCAAW,KzD3Bb,eyD2Ba,C;I9DuEZ,C;;;;a8D3EQ,qCAAW,M;I9D4EnB,C;;M8DxEC,qCAAW,KzD3Bb,WyD2Ba,C;I9DwEZ,C;;+HAEA,yB;IAAA,2B;MAAuD,IAGtD,O;;QAH0E,SAApB,IAAoB,C;;;QAApB,IAOrD,U;;MAPqD,W;IAAA,C;GAAvD,C;;IAGC,W;;MAEC,U;;;MAEA,c;;EAEF,C;;IAGC,QAAQ,UAAM,U;IACd,QAAQ,CAAE,E;IACV,QAAQ,CAAE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"}