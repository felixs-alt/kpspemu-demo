{"version":3,"file":"korui-js.js","sources":["../../../../../common/src/main/kotlin/com/soywiz/korui/Application.kt","collections/Collections.kt","util/Standard.kt","collections/MutableCollections.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/Korui.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/Screen.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/geom/len/Length.kt","core/math.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/geom/len/Padding.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/geom/len/Position.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/geom/len/Size.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/light/light.kt","util/Lazy.kt","../../../../../common/src/main/kotlin/com/soywiz/kds/Extra.kt","../../../../../../../../../../dummy.kt","collections/Maps.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/light/log/LogLightComponents.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/style/Style.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/ui/Component.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/ui/ComponentHandlerExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/Once.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/ui/Layout.kt","core/generated/_CollectionsJs.kt","core/generated/_ComparisonsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/ui/VectorImage.kt","../../../../src/main/kotlin/com/soywiz/korui/KoruiEventLoop.kt","../../../../src/main/kotlin/com/soywiz/korui/light/HtmlLightComponents.kt","generated/org.w3c.dom.kt","core/string.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/coroutine/coroutine.kt","coroutines/experimental/CoroutinesLibrary.kt","../../../../src/main/kotlin/com/soywiz/korui/light/NativeLightsComponentsFactory.kt","../../../../../common/src/main/kotlin/com/soywiz/korui/KoruiVersion.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with (iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n",null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Long, b: Long): Long = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Long, b: Long): Long = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n",null,null,null,null,"@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n",null,null,null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long): Long {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long): Long {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n",null,null,null,"/*\n * Generated file\n * DO NOT EDIT\n * \n * See libraries/tools/idl2k for details\n */\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    open val rootElement: SVGSVGElement?\n    var title: String\n    open val referrer: String\n    var domain: String\n    open val activeElement: Element?\n    open val location: Location?\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((Event) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((Event) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((Event) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((Event) -> dynamic)?\n    override var ondrag: ((Event) -> dynamic)?\n    override var ondragend: ((Event) -> dynamic)?\n    override var ondragenter: ((Event) -> dynamic)?\n    override var ondragexit: ((Event) -> dynamic)?\n    override var ondragleave: ((Event) -> dynamic)?\n    override var ondragover: ((Event) -> dynamic)?\n    override var ondragstart: ((Event) -> dynamic)?\n    override var ondrop: ((Event) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((Event) -> dynamic)?\n    override var oninput: ((Event) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((Event) -> dynamic)?\n    override var onkeypress: ((Event) -> dynamic)?\n    override var onkeyup: ((Event) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((Event) -> dynamic)?\n    override var onmousedown: ((Event) -> dynamic)?\n    override var onmouseenter: ((Event) -> dynamic)?\n    override var onmouseleave: ((Event) -> dynamic)?\n    override var onmousemove: ((Event) -> dynamic)?\n    override var onmouseout: ((Event) -> dynamic)?\n    override var onmouseover: ((Event) -> dynamic)?\n    override var onmouseup: ((Event) -> dynamic)?\n    override var onwheel: ((Event) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((Event) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((Event) -> dynamic)?\n    override var oncut: ((Event) -> dynamic)?\n    override var onpaste: ((Event) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun exitFullscreen(): Promise<Unit>\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close(): Unit\n    fun write(vararg text: String): Unit\n    fun writeln(vararg text: String): Unit\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear(): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(interface_: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n@kotlin.internal.InlineOnly inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindow {\n    override val performance: Performance\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close(): Unit\n    fun stop(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert(): Unit\n    fun alert(message: String): Unit\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print(): Unit\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int): Unit\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int): Unit\n    fun moveBy(x: Int, y: Int): Unit\n    fun resizeTo(x: Int, y: Int): Unit\n    fun resizeBy(x: Int, y: Int): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n@kotlin.internal.InlineOnly inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n//    fun namedItem(name: String): UnionElementOrHTMLCollection?\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n}\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection {\n//    override fun namedItem(name: String): UnionElementOrRadioNodeList?\n}\n//@kotlin.internal.InlineOnly override inline operator fun HTMLFormControlsCollection.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun forceSpellCheck(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap {\n}\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.set(name: String, value: String): Unit { asDynamic()[name] = value; }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var scope: String\n    open var workerType: WorkerType\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    @JsName(\"as\") open var as_: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, TexImageSource, HTMLOrSVGImageElement {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load(): Unit\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double): Unit\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause(): Unit\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((Event) -> dynamic)?\n    open var onremovetrack: ((Event) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue): Unit\n    fun removeCue(cue: TextTrackCue): Unit\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption(): Unit\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead(): Unit\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot(): Unit\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit(): Unit\n    fun reset(): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally): Unit\n    fun stepDown(n: Int = definedExternally): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun close(returnValue: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n\n    o[\"flatten\"] = flatten\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally): Unit\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save(): Unit\n    fun restore(): Unit\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double): Unit\n    fun rotate(angle: Double): Unit\n    fun translate(x: Double, y: Double): Unit\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun setTransform(transform: dynamic = definedExternally): Unit\n    fun resetTransform(): Unit\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n    var fillStyle: dynamic\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: dynamic, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun fillRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double): Unit\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath(): Unit\n    fun fill(fillRule: CanvasFillRule = definedExternally): Unit\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun stroke(): Unit\n    fun stroke(path: Path2D): Unit\n    fun clip(fillRule: CanvasFillRule = definedExternally): Unit\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun resetClip(): Unit\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element): Unit\n    fun drawFocusIfNeeded(path: Path2D, element: Element): Unit\n    fun scrollPathIntoView(): Unit\n    fun scrollPathIntoView(path: Path2D): Unit\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: dynamic, dx: Double, dy: Double): Unit\n    fun drawImage(image: dynamic, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n    fun drawImage(image: dynamic, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally): Unit\n    fun removeHitRegion(id: String): Unit\n    fun clearHitRegions(): Unit\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double): Unit\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double): Unit\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>): Unit\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath(): Unit\n    fun moveTo(x: Double, y: Double): Unit\n    fun lineTo(x: Double, y: Double): Unit\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally): Unit\n    override fun closePath(): Unit\n    override fun moveTo(x: Double, y: Double): Unit\n    override fun lineTo(x: Double, y: Double): Unit\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    override fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val region: String?\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?): Unit\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally): Unit\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = null): ElementDefinitionOptions {\n    val o = js(\"({})\")\n\n    o[\"extends\"] = extends\n\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int): Unit\n    fun getData(format: String): String\n    fun setData(format: String, data: String): Unit\n    fun clearData(format: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?): Unit\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally): Unit\n    fun back(): Unit\n    fun forward(): Unit\n    fun pushState(data: Any?, title: String, url: String? = definedExternally): Unit\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String): Unit\n    fun replace(url: String): Unit\n    fun reload(): Unit\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((Event) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update(): Unit\n    fun abort(): Unit\n    fun swapCache(): Unit\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n    var onblur: ((Event) -> dynamic)?\n    var oncancel: ((Event) -> dynamic)?\n    var oncanplay: ((Event) -> dynamic)?\n    var oncanplaythrough: ((Event) -> dynamic)?\n    var onchange: ((Event) -> dynamic)?\n    var onclick: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    var oncontextmenu: ((Event) -> dynamic)?\n    var oncuechange: ((Event) -> dynamic)?\n    var ondblclick: ((Event) -> dynamic)?\n    var ondrag: ((Event) -> dynamic)?\n    var ondragend: ((Event) -> dynamic)?\n    var ondragenter: ((Event) -> dynamic)?\n    var ondragexit: ((Event) -> dynamic)?\n    var ondragleave: ((Event) -> dynamic)?\n    var ondragover: ((Event) -> dynamic)?\n    var ondragstart: ((Event) -> dynamic)?\n    var ondrop: ((Event) -> dynamic)?\n    var ondurationchange: ((Event) -> dynamic)?\n    var onemptied: ((Event) -> dynamic)?\n    var onended: ((Event) -> dynamic)?\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    var onfocus: ((Event) -> dynamic)?\n    var oninput: ((Event) -> dynamic)?\n    var oninvalid: ((Event) -> dynamic)?\n    var onkeydown: ((Event) -> dynamic)?\n    var onkeypress: ((Event) -> dynamic)?\n    var onkeyup: ((Event) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onloadeddata: ((Event) -> dynamic)?\n    var onloadedmetadata: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    var onloadstart: ((Event) -> dynamic)?\n    var onmousedown: ((Event) -> dynamic)?\n    var onmouseenter: ((Event) -> dynamic)?\n    var onmouseleave: ((Event) -> dynamic)?\n    var onmousemove: ((Event) -> dynamic)?\n    var onmouseout: ((Event) -> dynamic)?\n    var onmouseover: ((Event) -> dynamic)?\n    var onmouseup: ((Event) -> dynamic)?\n    var onwheel: ((Event) -> dynamic)?\n    var onpause: ((Event) -> dynamic)?\n    var onplay: ((Event) -> dynamic)?\n    var onplaying: ((Event) -> dynamic)?\n    var onprogress: ((Event) -> dynamic)?\n    var onratechange: ((Event) -> dynamic)?\n    var onreset: ((Event) -> dynamic)?\n    var onresize: ((Event) -> dynamic)?\n    var onscroll: ((Event) -> dynamic)?\n    var onseeked: ((Event) -> dynamic)?\n    var onseeking: ((Event) -> dynamic)?\n    var onselect: ((Event) -> dynamic)?\n    var onshow: ((Event) -> dynamic)?\n    var onstalled: ((Event) -> dynamic)?\n    var onsubmit: ((Event) -> dynamic)?\n    var onsuspend: ((Event) -> dynamic)?\n    var ontimeupdate: ((Event) -> dynamic)?\n    var ontoggle: ((Event) -> dynamic)?\n    var onvolumechange: ((Event) -> dynamic)?\n    var onwaiting: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n    var onbeforeprint: ((Event) -> dynamic)?\n    var onbeforeunload: ((Event) -> String?)?\n    var onhashchange: ((Event) -> dynamic)?\n    var onlanguagechange: ((Event) -> dynamic)?\n    var onmessage: ((Event) -> dynamic)?\n    var onoffline: ((Event) -> dynamic)?\n    var ononline: ((Event) -> dynamic)?\n    var onpagehide: ((Event) -> dynamic)?\n    var onpageshow: ((Event) -> dynamic)?\n    var onpopstate: ((Event) -> dynamic)?\n    var onrejectionhandled: ((Event) -> dynamic)?\n    var onstorage: ((Event) -> dynamic)?\n    var onunhandledrejection: ((Event) -> dynamic)?\n    var onunload: ((Event) -> dynamic)?\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((Event) -> dynamic)?\n    var oncut: ((Event) -> dynamic)?\n    var onpaste: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val caches: CacheStorage\n    val origin: String\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally): Unit\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally): Unit\n    fun createImageBitmap(image: dynamic, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: dynamic, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String): Unit\n    fun registerContentHandler(mimeType: String, url: String, title: String): Unit\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String): Unit\n    fun unregisterContentHandler(mimeType: String, url: String): Unit\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    override val length: Int\n    fun refresh(reload: Boolean = definedExternally): Unit\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close(): Unit\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = null, resizeHeight: Int? = null, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindow?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindow?, ports: Array<MessagePort>): Unit\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindow? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindow? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close(): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n\n    o[\"withCredentials\"] = withCredentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Int\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((Event) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally): Unit\n    fun send(data: String): Unit\n    fun send(data: Blob): Unit\n    fun send(data: ArrayBuffer): Unit\n    fun send(data: ArrayBufferView): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindow, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun start(): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((Event) -> dynamic)?\n    fun importScripts(vararg urls: String): Unit\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((Event) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((Event) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate(): Unit\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Int\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open var href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String): Unit\n    fun removeItem(key: String): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n@kotlin.internal.InlineOnly inline operator fun Storage.set(key: String, value: String): Unit { asDynamic()[key] = value; }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n}\n\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start(): Unit\n    fun stop(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n}\n\npublic external interface External {\n    fun AddSearchProvider(): Unit\n    fun IsSearchProviderInstalled(): Unit\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?): Unit\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n    val lastElementChild: Element?\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic): Unit\n    fun append(vararg nodes: dynamic): Unit\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n    val nextElementSibling: Element?\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic): Unit\n    fun after(vararg nodes: dynamic): Unit\n    fun replaceWith(vararg nodes: dynamic): Unit\n    fun remove(): Unit\n}\n\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override val length: Int\n    override fun item(index: Int): Node?\n}\n@kotlin.internal.InlineOnly inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : UnionElementOrHTMLCollection, ItemArrayLike<Element> {\n    override val length: Int\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally): Unit\n    fun disconnect(): Unit\n    fun takeRecords(): Array<MutationRecord>\n}\n\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = null, characterData: Boolean? = null, subtree: Boolean? = false, attributeOldValue: Boolean? = null, characterDataOldValue: Boolean? = null, attributeFilter: Array<String>? = null): MutationObserverInit {\n    val o = js(\"({})\")\n\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize(): Unit\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\npublic external interface ElementCreationOptions {\n    @JsName(\"is\") var is_: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(is_: String? = null): ElementCreationOptions {\n    val o = js(\"({})\")\n\n    o[\"is\"] = is_\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrProcessingInstruction, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent {\n    open var innerHTML: String\n    open var outerHTML: String\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    fun requestFullscreen(): Promise<Unit>\n    fun insertAdjacentHTML(position: String, text: String): Unit\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String): Unit\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String): Unit\n    fun removeAttribute(qualifiedName: String): Unit\n    fun removeAttributeNS(namespace: String?, localName: String): Unit\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String): Unit\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView(): Unit\n    fun scrollIntoView(arg: dynamic): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n\n    o[\"mode\"] = mode\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    override val length: Int\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n}\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String): Unit\n    fun insertData(offset: Int, data: String): Unit\n    fun deleteData(offset: Int, count: Int): Unit\n    fun replaceData(offset: Int, count: Int, data: String): Unit\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    fun splitText(offset: Int): Text\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun createContextualFragment(fragment: String): DocumentFragment\n    fun setStart(node: Node, offset: Int): Unit\n    fun setEnd(node: Node, offset: Int): Unit\n    fun setStartBefore(node: Node): Unit\n    fun setStartAfter(node: Node): Unit\n    fun setEndBefore(node: Node): Unit\n    fun setEndAfter(node: Node): Unit\n    fun collapse(toStart: Boolean = definedExternally): Unit\n    fun selectNode(node: Node): Unit\n    fun selectNodeContents(node: Node): Unit\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents(): Unit\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node): Unit\n    fun surroundContents(newParent: Node): Unit\n    fun cloneRange(): Range\n    fun detach(): Unit\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach(): Unit\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    override val length: Int\n    open var value: String\n    override fun item(index: Int): String?\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String): Unit\n    fun remove(vararg tokens: String): Unit\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String): Unit\n    fun supports(token: String): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n@kotlin.internal.InlineOnly inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = null, top: Double? = null, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?): Unit\n    fun addListener(listener: ((Event) -> Unit)?): Unit\n    fun removeListener(listener: EventListener?): Unit\n    fun removeListener(listener: ((Event) -> Unit)?): Unit\n}\n\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = null): BoxQuadOptions {\n    val o = js(\"({})\")\n\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n\n    return o\n}\n\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\npublic external @marker interface UnionElementOrProcessingInstruction {\n}\n\npublic external @marker interface UnionElementOrHTMLCollection {\n}\n\npublic external @marker interface UnionElementOrRadioNodeList {\n}\n\npublic external @marker interface UnionHTMLOptGroupElementOrHTMLOptionElement {\n}\n\npublic external @marker interface UnionAudioTrackOrTextTrackOrVideoTrack {\n}\n\npublic external @marker interface UnionElementOrMouseEvent {\n}\n\npublic external @marker interface UnionMessagePortOrWindow {\n}\n\npublic external @marker interface UnionMessagePortOrServiceWorker {\n}\n\npublic external @marker interface HTMLOrSVGScriptElement {\n}\n\npublic external @marker interface RenderingContext {\n}\n\npublic external @marker interface HTMLOrSVGImageElement {\n}\n\n/* please, don't implement this interface! */\npublic external interface DocumentReadyState {\n    companion object\n}\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\npublic external interface CanPlayTypeResult {\n    companion object\n}\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackMode {\n    companion object\n}\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackKind {\n    companion object\n}\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\npublic external interface SelectionMode {\n    companion object\n}\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasFillRule {\n    companion object\n}\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\npublic external interface ImageSmoothingQuality {\n    companion object\n}\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineCap {\n    companion object\n}\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineJoin {\n    companion object\n}\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextAlign {\n    companion object\n}\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextBaseline {\n    companion object\n}\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasDirection {\n    companion object\n}\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollRestoration {\n    companion object\n}\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\npublic external interface ImageOrientation {\n    companion object\n}\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\npublic external interface PremultiplyAlpha {\n    companion object\n}\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\npublic external interface ColorSpaceConversion {\n    companion object\n}\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\npublic external interface ResizeQuality {\n    companion object\n}\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\npublic external interface BinaryType {\n    companion object\n}\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\npublic external interface WorkerType {\n    companion object\n}\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\npublic external interface ShadowRootMode {\n    companion object\n}\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollBehavior {\n    companion object\n}\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollLogicalPosition {\n    companion object\n}\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\npublic external interface CSSBoxType {\n    companion object\n}\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()\n\n","package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n",null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmName(\"CoroutinesKt\")\npackage kotlin.coroutines.experimental\n\nimport kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED\nimport kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn\nimport kotlin.coroutines.experimental.intrinsics.createCoroutineUnchecked\n\n/**\n * Starts coroutine with receiver type [R] and result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(receiver, completion).resume(Unit)\n}\n\n/**\n * Starts coroutine without receiver and with result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend  () -> T).startCoroutine(\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(completion).resume(Unit)\n}\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(receiver, completion), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(completion), COROUTINE_SUSPENDED)\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Repeated invocation of any resume function produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\npublic inline suspend fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n        suspendCoroutineOrReturn { c: Continuation<T> ->\n            val safe = SafeContinuation(c)\n            block(safe)\n            safe.getResult()\n        }\n\n// INTERNAL DECLARATIONS\n\n@kotlin.internal.InlineOnly\ninternal inline fun processBareContinuationResume(completion: Continuation<*>, block: () -> Any?) {\n    try {\n        val result = block()\n        if (result !== COROUTINE_SUSPENDED) {\n            @Suppress(\"UNCHECKED_CAST\")\n            (completion as Continuation<Any?>).resume(result)\n        }\n    } catch (t: Throwable) {\n        completion.resumeWithException(t)\n    }\n}\n",null,null],"names":[],"mappings":"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"}