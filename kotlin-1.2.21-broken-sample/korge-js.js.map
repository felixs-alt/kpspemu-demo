{"version":3,"file":"korge-js.js","sources":["../../../../../common/src/main/kotlin/com/soywiz/korge/Korge.kt","../../../../../common/src/main/kotlin/com/soywiz/korinject/AsyncInjector.kt","core/generated/_ComparisonsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/Vector2.kt","core/math.kt","core/collections.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/time/TimeSpan.kt","collections/Collections.kt","../../../../../common/src/main/kotlin/com/soywiz/klogger/Logger.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/Animate.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Rectangle.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/RedirectField.kt","util/Standard.kt","../../../../../../../../../../dummy.kt","../../../../../common/src/main/kotlin/com/soywiz/kds/Extra.kt","collections/Maps.kt","arrayUtils.kt","core/generated/_ArraysJs.kt","core/generated/_MapsJs.kt","collections/Sets.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/util/Once.kt","collections/MutableCollections.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/AnimateLibrary.kt","core/generated/_CollectionsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/Timed.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/serialization/AnLibraryDeserializer.kt","text/Strings.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/serialization/AnLibrarySerializer.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/stream/SyncStream.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/serialization/json/Json.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/serialization/AniFile.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/animate/serialization/OptimizedStringAllocator.kt","comparisons/Comparisons.kt","core/Comparator.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/atlas/Atlas.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/serialization/ObjectMapper.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/atlas/AtlasInfo.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/Size.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/audio/SoundSystem.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/bitmapfont/BitmapFont.kt","util/Lazy.kt","core/generated/_StringsJs.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/bus/Bus.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/Component.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/event/EventDispatcher.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/docking/DockingComponent.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/input/MouseComponent.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/docking/JellyButton.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/tween/tween.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/docking/SortedChildrenByComponent.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/list/GridViewList.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/component/list/ViewList.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/html/Html.kt","core/string.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/i18n/ConstantTextSource.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/i18n/Language.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/i18n/TextContainer.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/i18n/TextSourceExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/i18n/ViewsExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/input/Gestures.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/geom/PointInt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/View.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/input/Input.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/input/Keys.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/input/KeysComponent.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/lang/ClassExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/plugin/KorgePlugin.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/BatchBuilder2D.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/shader/shaders.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/BitmapExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/RenderContext.kt","../../../../../common/src/main/kotlin/com/soywiz/korag/AG.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/RenderContext2D.kt","../../../../../common/src/main/kotlin/com/soywiz/kds/Pool.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/Texture.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/TextureWithBitmapSlice.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/render/TransformedTexture.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/resources/Cached.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/resources/Path.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/resources/ResourcesRoot.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/scene/Intent.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/scene/Module.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/scene/Scene.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/scene/SceneContainer.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/scene/Transition.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Achievements.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Ads.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Analytics.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Browser.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/CloudSave.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/InAppPayments.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/RateApp.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Share.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/Store.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/storage/IStorage.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/storage/InmemoryStorage.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/storage/Storage.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/storage/StorageBase.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/service/storage/StorageExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/tests/KorgeTest.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/tests/ViewsForTesting.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/time/TimerComponents.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/coroutine/coroutine.kt","coroutines/experimental/CoroutinesLibrary.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/tween/Easing.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/async/CancellableContinuation.kt","../../../../../common/src/main/kotlin/com/soywiz/korio/async/async.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/util/CancellableExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/util/DynamicExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/BlendMode.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/Camera.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/Container.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/FontRepository.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/Image.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/NinePatch.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/ScaleView.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/SolidRect.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/Text.kt","../../../../../common/src/main/kotlin/com/soywiz/korma/Matrix2d.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/Views.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/ViewsExt.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/tiles/TileMap.kt","../../../../../common/src/main/kotlin/com/soywiz/korim/bitmap/Bitmap32.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/view/tiles/TileSet.kt","../../../../src/main/kotlin/com/soywiz/korge/native/KorgeNative.kt","../../../../src/main/kotlin/com/soywiz/korge/service/storage/NativeStorage.kt","../../../../../common/src/main/kotlin/com/soywiz/korge/KorgeVersion.kt"],"sourcesContent":[null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n\npackage kotlin.comparisons\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long): Long {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), Math.max(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return maxOf(a, maxOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the greater of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) >= 0) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).toByte()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).toShort()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long): Long {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T: Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toByte()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), Math.min(b.toInt(), c.toInt())).toShort()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values according to the order specified by the given [comparator].\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, c: T, comparator: Comparator<in T>): T {\n    return minOf(a, minOf(b, c, comparator), comparator)\n}\n\n/**\n * Returns the smaller of two values according to the order specified by the given [comparator].\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T {\n    return if (comparator.compare(a, b) <= 0) a else b\n}\n\n",null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:Suppress(\"DEPRECATION\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */-> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n\n\n\n// ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Int, b: Int): Int = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Int, b: Int): Int = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun min(a: Long, b: Long): Long = minOf(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline fun max(a: Long, b: Long): Long = maxOf(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.math.floor\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n@library(\"arrayToString\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun arrayToString(array: Array<*>): String = definedExternally\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.shuffle(): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = rand(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\nprivate fun rand(upperBound: Int) = floor(kotlin.js.Math.random() * upperBound).toInt()\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n */\npublic fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n\n    array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal fun <T> arrayOfNulls(reference: Array<out T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n// no singleton map implementation in js, return map as is\ninternal inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\ninternal inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\ninternal inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n        if (isVarargs)\n        // no need to copy vararg array in JS\n            this\n        else\n            this.copyOf()\n",null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n",null,null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.internal.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}\n",null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ByteArray.copyOf(newSize: Int): ByteArray {\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ShortArray.copyOf(newSize: Int): ShortArray {\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun IntArray.copyOf(newSize: Int): IntArray {\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun LongArray.copyOf(newSize: Int): LongArray {\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun FloatArray.copyOf(newSize: Int): FloatArray {\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun CharArray.copyOf(newSize: Int): CharArray {\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic fun <T: Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun CharArray.toTypedArray(): Array<Char> {\n    return Array<Char>(size, { i -> this[i] })\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/* Not available on platform: JS */\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with (iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\n\npackage kotlin.text\n\nimport kotlin.comparisons.*\nimport kotlin.internal.contracts.*\n\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        }\n        else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence\n        = replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String\n        = (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String\n        = (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String = regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length)\n            || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0..length-1) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\nprivate fun CharSequence.findAnyOf(chars: CharArray, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, Char>? {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        val index = if (!last) nativeIndexOf(char, startIndex) else nativeLastIndexOf(char, startIndex)\n        return if (index < 0) null else index to char\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..lastIndex else startIndex.coerceAtMost(lastIndex) downTo 0\n    for (index in indices) {\n        val charAtIndex = get(index)\n        val matchingCharIndex = chars.indexOfFirst { it.equals(charAtIndex, ignoreCase) }\n        if (matchingCharIndex >= 0)\n            return index to chars[matchingCharIndex]\n    }\n\n    return null\n}\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n        indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(private val input: CharSequence, private val startIndex: Int, private val limit: Int, private val getNextMatch: CharSequence.(Int) -> Pair<Int, Int>?): Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            }\n            else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                }\n                else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    }\n                    else {\n                        val (index,length) = match\n                        nextItem = currentStartIndex..index-1\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimiters, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to 1 } })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimitersList, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,"/*\n * Copyright 2010-2014 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T)->Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n        }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenBy.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n        }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n        }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenByDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n        }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@thenComparator.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparison(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n        Comparator { a, b ->\n            val previousCompare = this@then.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n        }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n        Comparator<T> { a, b ->\n            val previousCompare = this@thenDescending.compare(a, b)\n            if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n        }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> -1\n                b == null -> 1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n        Comparator { a, b ->\n            when {\n                a === b ->   0\n                a == null -> 1\n                b == null -> -1\n                else -> comparator.compare(a, b)\n            }\n        }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T: Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T: Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T: Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>): Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator: Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n\npublic interface Comparator<T> {\n    @JsName(\"compare\") fun compare(a: T, b: T): Int\n}\n\npublic inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,null,null,null,null,null,"@file:kotlin.jvm.JvmName(\"LazyKt\")\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\nprivate object UNINITIALIZED_VALUE\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\nprivate class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0..length - 1) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0..length - 1)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0..length - 1)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each character of the original char sequence.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val result = ArrayList<R>((thisSize + step - 1) / step)\n    var index = 0\n    while (index < thisSize) {\n        val end = index + size\n        val coercedEnd = if (end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index -> transform(subSequence(index, (index + size).coerceAtMost(length))) }\n}\n\n/**\n * Returns a list of pairs built from characters of both char sequences with same indexes. List has length of shortest char sequence.\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from characters of both char sequences with same indexes using provided [transform]. List has length of shortest char sequence.\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0..length-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0..size - 1) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,"package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2017 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmName(\"CoroutinesKt\")\npackage kotlin.coroutines.experimental\n\nimport kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED\nimport kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn\nimport kotlin.coroutines.experimental.intrinsics.createCoroutineUnchecked\n\n/**\n * Starts coroutine with receiver type [R] and result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(receiver, completion).resume(Unit)\n}\n\n/**\n * Starts coroutine without receiver and with result type [T].\n * This function creates and start a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend  () -> T).startCoroutine(\n        completion: Continuation<T>\n) {\n    createCoroutineUnchecked(completion).resume(Unit)\n}\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n        receiver: R,\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(receiver, completion), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n * Repeated invocation of any resume function on the resulting continuation produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n        completion: Continuation<T>\n): Continuation<Unit> = SafeContinuation(createCoroutineUnchecked(completion), COROUTINE_SUSPENDED)\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Repeated invocation of any resume function produces [IllegalStateException].\n */\n@SinceKotlin(\"1.1\")\npublic inline suspend fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n        suspendCoroutineOrReturn { c: Continuation<T> ->\n            val safe = SafeContinuation(c)\n            block(safe)\n            safe.getResult()\n        }\n\n// INTERNAL DECLARATIONS\n\n@kotlin.internal.InlineOnly\ninternal inline fun processBareContinuationResume(completion: Continuation<*>, block: () -> Any?) {\n    try {\n        val result = block()\n        if (result !== COROUTINE_SUSPENDED) {\n            @Suppress(\"UNCHECKED_CAST\")\n            (completion as Continuation<Any?>).resume(result)\n        }\n    } catch (t: Throwable) {\n        completion.resumeWithException(t)\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCA,qB;IACC,eAAc,a;IAEd,cAAa,gCAAO,OAAP,C;EAHd,C;;mBAe+B,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAA2C,C;;IAA3C,wC;IAAA,6B;IAAA,yB;IAAA,wB;IAAA,0B;IAAA,0B;IAAA,0B;IAAA,kC;EAA2C,C;;;;;;;;;;;;;YCGzB,gB;4BAAA,oE;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,a;YDHV,+B;YCGU,gB;4BAAA,6D;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,a;YDHH,iC;YCGG,gB;4BAAA,wE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,a;YDHI,iC;YCGJ,gB;4BAAA,gE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,a;YDHW,iC;YCGX,gB;4BAAA,uE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,a;YDHhB,2FAAkC,aAAlC,C;;;;;;;;;;;;;;EAAyC,C;;mBAC3C,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAAU,C;;IAAV,wC;IAAA,6B;IAAA,yB;EAAU,C;;;;;;;;;;;;;YAAR,kB;;;;;;;;;;;;;;;;EAAQ,C;;mBAKL,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAAe,C;;IAAf,wC;IAAA,6B;IAAA,yB;EAAe,C;;;;;;;;;;;;;YAAb,uB;;;;;;;;;;;;;;;;EAAa,C;;mBACZ,yE;QAAA,S;aAAA,Q;;aAAA,uB;EAAkB,C;;IAAlB,wC;IAAA,6B;IAAA,yB;EAAkB,C;;;;;;;;;;;;;YAAhB,0B;;;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,EAAL,EAAS,IAAT,C;IG1F3B,SH2FF,WAAW,kBAAS,WAAO,OAAhB,C;IG3FT,SH4FF,QAAO,WAAO,Y;IG5FZ,SH6FF,W;IAHD,mBGzFU,S;IHgGT,wBAAQ,gBAAR,C;IAGD,uBEpIgD,uF;aFoIV,gB;IAAX,CEpIqB,YFoIrB,gBEpIqB,+B;MFoIV,wB;IAAX,CEpIqB,YFoIrB,gBEpIqB,G;IFqIhD,sBExI8D,qF;aFwIR,c;IAAX,CExImB,YFwInB,gBExImB,+B;MFwIR,sB;IAAX,CExImB,YFwInB,gBExImB,G;IFyI9D,sBEzI8D,qF;aFyIR,c;IAAX,CEzImB,YFyInB,gBEzImB,+B;MFyIR,sB;IAAX,CEzImB,YFyInB,gBEzImB,G;EF4H9C,C;;;MAAC,6B;IAAA,C;;;;MAAiC,4B;IAAA,C;;;;aEhJ1C,6BAAS,M;IF2JjB,C;;MEvJC,6BAAS,KEjBX,MFiBW,C;IFuJV,C;;;;aE3JQ,4BAAS,M;IF4JjB,C;;MExJC,4BAAS,KEjBX,IFiBW,C;IFwJV,C;;;;aE5JQ,4BAAS,M;IF6JjB,C;;MEzJC,4BAAS,KEjBX,IFiBW,C;IFyJV,C;;;IAEsC,IAAO,I;IAAP,qBAAO,OAAP,WAAO,eAAO,YAAP,CAAP,2B;EAAA,C;;;;;;;IAKY,Q;EAAE,C;;;EK5JnD,yD;;IL4JF,0B;;MKrKiC,gC;MAAX,wB;MAAW,qDAAiB,kC;MAA/C,UAAW,uH;MACX,IAAI,WAAJ,C;QACC,QAAQ,yB;QAUU,0C;QADnB,IAAY,eAAR,QAAJ,C;UAA2B,kBAAgB,U;QACnC,wB;QAAW,yDAAiB,kC;QAAM,mBATb,CASa,6D;QAA1C,mB;UCsJC,kC;;QD9JA,yBAAO,C;QAAP,2B;;MAED,yBAAO,G;;;;EL+JV,C;;IKzJsB,wC;IADnB,IAAY,eAAR,QAAJ,C;MAA2B,kBAAgB,U;IACnC,wB;IAAW,qDAAiB,kC;IAAM,mBDxB7C,cCwB6C,6D;IAA1C,mB;MCsJC,kC;;ENGJ,C;;IAGqB,gB;IAAuB,oB;IAC3C,eACyB,SAAK,Q;IAC9B,aAAY,YAAQ,M;IACpB,mBAAkB,C;IAClB,wBAAgC,I;IAChC,0BAAwD,I;IAEx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;EAAA,6D;IAC4C,+BAAW,CAAX,EAAc,CAAd,C;EAAA,C;EAD5C,kF;;IFQiC,Q;IAD8D,gBR0zBpF,WQ1zB+B,mBAAa,QR0zB5C,+BSptBQ,2BDtG+D,wCCsG/D,CTotBR,E;IA6VA,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,6B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,WAAY,WAAc,IQ7tCsE,IR6tCpF,C;;IQ7tC0F,uB;I1BJ/C,kCkBkuCpD,WlBluCoD,C;I0BI7D,eAAe,CAAiB,IAAjB,CdsgaW,4B;IcrgaK,OAAb,IAAK,QAAQ,O;IAA/B,aAAU,CAAV,gB;MACC,uC;MAAA,UAAe,cAAA,IAAK,QAAL,CAAa,CAAb,E;MhB+Id,wBAAI,GAAJ,EgB/ImC,ChB+InC,C;;IgB7IF,mBAAY,I;EACb,C;;;;;;;IGrBD,2B;IAAqB,sB;IAEnB,oBC+FuF,iDD/FnE,uBC+FmE,C;ID9FvF,oBC8FuF,iDD9FnE,yBC8FmE,C;ID7FvF,oBC6FuF,iDD7FnE,yBC6FmE,C;ID5FvF,oBC4FuF,kDD5FnE,yBC4FmE,C;ID3FvF,oBC2FuF,4CD3FnE,yBC2FmE,C;EDjGzF,C;;mBAW6B,4E;QAAA,S;aAAA,Q;;aAAA,uB;EAQ1B,C;;IAR0B,wC;IAAA,6B;IAAA,yB;IAAA,wB;IAAA,0B;IAAA,0B;IAAA,kC;EAQ1B,C;;;;;;;;;;;;;YALE,gB;4BAAA,qE;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,+B;YACA,gB;4BAAA,sE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,iC;YACA,gB;4BAAA,gE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,iC;YACA,gB;4BAAA,wE;gBAAA,qC;qBAAA,mB;YAAA,Q;;YALD,OACM,yEAIL,aAJK,C;;;;;;;;;;;;;;EAMP,C;;IATD,KAAM,SACJ,qCAAyB,2BAAzB,C;EASH,C;;IAlBgD,kBAAV,0BAAG,KAAH,C;IAAU,WCaF,aAAI,sCAAkB,WAAlB,C;IDbkB,kBAAb,0BAAG,QAAH,C;IAAa,aCatB,aAAI,sCAAkB,WAAlB,C;IDbqC,kBAAZ,0BAAG,OAAH,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"}